NOTE: 프로시저 PRINTTO 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

Traverser: Traverser 불러옴.  MPCONNECT 명령은 !sascmdv -nosyntaxcheck -noasynchio -noobjectserver입니다. 
Traverser: 플로우 Traversal 시작 
17196      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17197      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17198      put '<Node Id="Ids" Event="Run" Pid="7624" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Ids" Event="Run" Pid="7624" Gridid=""/>';
17199      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 파일 EMWIPMSG:
      Local Host Name=DESKTOP-IOK0OJ9,
      Local Host IP addr=fe80::9141:5c52:98cb:6d54%2,
      Peer Hostname Name=DESKTOP-IOK0OJ9,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=50272,Lrecl=32767,Recfm=Variable

NOTE: 1개의 레코드를 파일 EMWIPMSG에 기록했습니다.
      최소 레코드 길이는 49입니다.
      최대 레코드 길이는 49입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

17200      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Ids : Beginning update before running 
* datetime : 14OCT2018:00:37:14 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     filename _emtool_ 'C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS1\Ids\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17202      %let _HPDMGRIDHOST=;
17203      %let _HPDMGRIDINSTALLLOC=;
17204      %let _HPDMGRIDDATASERVER=;
17205      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Ids : End update 
* datetime : 14OCT2018:00:37:15 
* 
*------------------------------------------------------------* 
17206      %em_getactionstatus(emlib =EMWS1, nodeid=Ids);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17207      %let em_Train = N;
17208      %let em_Score = N;
17209      %let em_Report = N;
17210      %let em_Run = N;
NOTE: 프로시저 DISPLAY 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

노드 "Ids"은(는) 이미 실행되었습니다. 
노드 "Ids" 성공함. 
17211      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17212      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17213      put '<Node Id="Ids" Event="Complete" Pid="7624" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Ids" Event="Complete" Pid="7624" Gridid=""/>';
17214      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 파일 EMWIPMSG:
      Local Host Name=DESKTOP-IOK0OJ9,
      Local Host IP addr=fe80::9141:5c52:98cb:6d54%2,
      Peer Hostname Name=DESKTOP-IOK0OJ9,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=50272,Lrecl=32767,Recfm=Variable

NOTE: 1개의 레코드를 파일 EMWIPMSG에 기록했습니다.
      최소 레코드 길이는 54입니다.
      최대 레코드 길이는 54입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

traverser_readyNode_note 
17215      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17216      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17217      put '<Node Id="TextParsing" Event="Run" Pid="7624" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="TextParsing" Event="Run" Pid="7624" Gridid=""/>';
17218      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 파일 EMWIPMSG:
      Local Host Name=DESKTOP-IOK0OJ9,
      Local Host IP addr=fe80::9141:5c52:98cb:6d54%2,
      Peer Hostname Name=DESKTOP-IOK0OJ9,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=50272,Lrecl=32767,Recfm=Variable

NOTE: 1개의 레코드를 파일 EMWIPMSG에 기록했습니다.
      최소 레코드 길이는 57입니다.
      최대 레코드 길이는 57입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

17219      %let emloopmode =;
*------------------------------------------------------------* 
* 
* TextParsing : Beginning update before running 
* datetime : 14OCT2018:00:37:15 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.TextParsing_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextParsing: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextParsing: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'DataMining2018';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Week_Final';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
17482      %let emexceptionString =;
17483      %let EMEXCEPTIONSTRING=;
17484      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
17485      * UPDATE: TextParsing;
MPRINT(EM_DIAGRAM):   * UPDATE: TextParsing;
17486      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17487      %let EM_ACTION = UPDATE;
17488      %let syscc = 0;
17489      %macro main();
17490        %if %upcase(&EM_ACTION) eq CREATE %then %do;
17491          filename temp catalog 'sashelp.emtxtext.parse_create.source';
17492          %include temp;
17493          %create();
17494        %end;
17495        %if %upcase(&EM_ACTION) eq TRAIN %then %do;
17496          filename temp catalog 'sashelp.emtxtext.parse_train.source';
17497          %include temp;
17498          %train();
17499        %end;
17500        %if %upcase(&EM_ACTION) eq REPORT %then %do;
17501          filename temp catalog 'sashelp.emtxtext.parse_report.source';
17502          %include temp;
17503          %report();
17504        %end;
17505        %if %upcase(&EM_ACTION) eq SCORE %then %do;
17506          filename temp catalog 'sashelp.emtxtext.parse_score.source';
17507          %include temp;
17508          %score();
17509        %end;
17510          %if %upcase(&EM_ACTION) eq OPENTABLE1 %then %do;
17511             filename temp catalog 'sashelp.emtxtext.parse_actions.source';
17512             %include temp;
17513             filename temp;
17514             %openTable1;
17515         %end;
17516      %mend main;
17517      
17518      %main();
MPRINT(EM_DIAGRAM):    
MPRINT(EM_DIAGRAM):  ;
17519      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17520      * End UPDATE: TextParsing;
MPRINT(EM_DIAGRAM):   * End UPDATE: TextParsing;
17521      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17522      
17523      
17524      
17525      

17526      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS1\TextParsing\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17528      %let _HPDMGRIDHOST=;
17529      %let _HPDMGRIDINSTALLLOC=;
17530      %let _HPDMGRIDDATASERVER=;
17531      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* TextParsing : End update 
* datetime : 14OCT2018:00:37:16 
* 
*------------------------------------------------------------* 
17532      %em_getactionstatus(emlib =EMWS1, nodeid=TextParsing);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17533      %let em_filemodtime=;
17534      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
17535      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
17536      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
17537      where fileref eq "#LN00149";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00149";
17538      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
17539      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: 1개의 관측값을 데이터셋 SASHELP.VEXTFL.에서 읽었습니다.
      WHERE fileref='#LN00149';
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.01 초
      

17540      %symdel em_filemodtime;
WARNING: 매크로 변수 EM_FILEMODTIME을(를) 삭제하는 데 실패했습니다. 변수를 찾을 수 없습니다.
17541      %let em_Train = Y;
17542      %let em_Score = N;
17543      %let em_Report = N;
17544      %let em_Run = Y;
NOTE: 프로시저 DISPLAY 실행(총 프로세스 시간):
      실행 시간           0.14 초
      cpu 시간            0.07 초
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

17545      %let emloopmode =;
17546      %let emloopnumber =0;
17547      %let emloopId =TextParsing;
*------------------------------------------------------------* 
* 
* TextParsing : Running 
* datetime : 14OCT2018:00:37:16 
* 
*------------------------------------------------------------* 
17548      %let SYSCC =0;
17549      %let EMGROUPMODE =;
17550      %let EMGROUPID =;
MPRINT(EM_DIAGRAM):      filename temp catalog 'sashelp.emutil.em_vardist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_classdist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checksetinit.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checkerror.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odsliston.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odslistoff.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_getvarname.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    filename L2FLA61Q "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS1\TextParsing\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto log=L2FLA61Q new;
MPRINT(EM_DIAGRAM):   run;
