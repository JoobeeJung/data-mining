*------------------------------------------------------------*
사용자:                Administrator
날짜:                2018년 11월 17일
시간:                17시14분42초
사이트:                10503192
플랫폼:            X64_10HOME
관리 릴리스: 9.04.01M4P110916
EM 버전:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "2018년 11월 17일" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17시14분26초" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 분석 로그";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* 분석 로그
날짜:                2018년 11월 17일
시간:                17시14분26초
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1BZQC31 "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1BZQC31 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "2018년 11월 17일" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17시14분26초" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "사용자:                Administrator";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "사이트:                10503192";
MPRINT(EM_DIAGRAM):   put "플랫폼:            X64_10HOME";
MPRINT(EM_DIAGRAM):   put "관리 릴리스: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM 버전:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "2018년 11월 17일" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17시14분26초" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "사용자:                Administrator";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 분석 출력";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 스코어 출력";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 리포트 출력";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
46073      proc freq data=EMWS5.TextTopic2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS5.TextTopic2_VariableSet noprint;
46074      table ROLE*LEVEL/out=WORK.TextTopic2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TextTopic2META;
46075      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: 1개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_VARIABLESET.에서 읽었습니다.
NOTE: 데이터셋 WORK.TEXTTOPIC2META은(는) 1개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 FREQ 실행(총 프로세스 시간):
      실행 시간           0.07 초
      cpu 시간            0.07 초
 
 
46076      proc print data=WORK.TextTopic2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TextTopic2META label noobs;
46077      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
46078      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "역할" LEVEL = "측도 레벨" COUNT = "빈도 개수";
46079      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
46080      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "변수 요약";
MPRINT(EM_DIAGRAM):   run;
46081      run;
 
NOTE: 1개의 관측값을 데이터셋 WORK.TEXTTOPIC2META.에서 읽었습니다.
NOTE: 출력 결과 (프로시저: PRINT, 페이지: 7)
NOTE: 프로시저 PRINT 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.06 초
 
 
46082      title10;
MPRINT(EM_DIAGRAM):   title10;
46083      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextTopic2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextTopic2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'DataMining2018';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Beekman';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS5.TextFilter2_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46421      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
46422      * TextTopic2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * TextTopic2: Generation of macros and macro variables;
46423      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
46424      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
46425      %let EMEXCEPTIONSTRING=;
46426      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
46427      * TRAIN: TextTopic2;
MPRINT(EM_DIAGRAM):   * TRAIN: TextTopic2;
46428      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46429      %let EM_ACTION = TRAIN;
46430      %let syscc = 0;
46431      %macro main;
46432          %if %upcase(&EM_ACTION) = CREATE %then %do;
46433              filename temp catalog 'sashelp.emtxtext.topic_create.source';
46434              %include temp;
46435              %create;
46436          %end;
46437          %if %upcase(&EM_ACTION) = TRAIN %then %do;
46438              filename temp catalog 'sashelp.emtxtext.topic_train.source';
46439              %include temp;
46440              %train;
46441          %end;
46442         %if %upcase(&EM_ACTION) = SCORE %then %do;
46443              filename temp catalog 'sashelp.emtxtext.topic_score.source';
46444              %include temp;
46445              %score;
46446          %end;
46447          %if %upcase(&EM_ACTION) = REPORT %then %do;
46448              filename temp catalog 'sashelp.emtxtext.topic_report.source';
46449              %include temp;
46450              %report;
46451          %end;
46452      %mend main;
46453
46454      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emtxtext.topic_train.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TOPIC_TRAIN.SOURCE입니다.
46455     +/* ****************************************************************
46456     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
46457     + *
46458     + * Name:             topic_train.sas
46459     + * Support:          cox  James A. Cox
46460     + * Product:          SAS Text Miner
46461     + * Language:         Sas
46462     + * Script:
46463     + *
46464     + * Usage:
46465     + *
46466     + * Purpose: Implements the Train action in the Text Topic Node.
46467     + *
46468     + * History:
46469     + * 26May09 Added header [cox]
46470     + *
46471     + * Notes:.
46472     + *
46473     + * Last Modified By:
46474     + * Last Modified On: Tue Oct 25 16:29:22 2016
46475     + *
46476     + * End
46477     + * ************************************************************** */
46478     +%macro train;
46479     +
46480     +   %if ^%symexist(tm_debug) %then %let tm_debug=0;
46481     +    %global last_parse_node last_filter_node last_prescore_node server_err
46482     +      parsevar EM_SASMSG /* EMEXCEPTIONSTRING */ systmutil;
46483     +   %let EM_SASMSG=TMINE;
46484     +   %let syscc=0;
46485     +   %let systmutil = ;
46486     +
46487     +    filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
46488     +    %include temp;
46489     +    %tm_get_last_filter(eminfo=&EM_IMPORT_DATA_EMINFO,em_lib=&em_lib,
46490     +                        em_variableset=&em_data_variableset);
46491     +    %if &EMEXCEPTIONSTRING ne %then %goto end_topic_train;
46492     +    %let lastparsenode=&last_parse_node;
46493     +    %let lastfilternode=&last_filter_node;
46494     +    %let lastprescore=&last_prescore_node;
46495     +
46496     +
46497     +    /*populate last tm node dataset so tm_get_last_filter is not called in score*/
46498     +    %em_getname(key=last_tm_nodes, type=data);
46499     +    data &em_user_last_tm_nodes;
46500     +        set &EM_IMPORT_DATA_EMINFO;
46501     +    run;
46502     +
46503     +    * include helper macros ;
46504     +    filename temp catalog 'sashelp.emtxtext.row_pivot_normalize.source';
46505     +    %include temp;
46506     +
46507     +    filename temp catalog 'sashelp.emtxtext.tmt_topify.sas';
46508     +    %include temp;
46509     +
46510     +    filename temp catalog 'sashelp.emtxtext.tmt_doc_score.source';
46511     +    %include temp;
46512     +
46513     +    filename temp catalog 'sashelp.emtxtext.tmt_remove_dups.source';
46514     +    %include temp;
46515     +
46516     +   /* Tell system that this is not data step score code */
46517     +
46518     +%let EM_PUBLISHCODE = PUBLISH;
46519     +%let EM_SCORECODEFORMAT = DATASTEP;
46520     +
46521     +    * get input data sets ;
46522     +
46523     +    %em_getname(key=terms,         type=data);
46524     +    %em_getname(key=tmout,         type=data);
46525     +    %em_getname(key=weightedterms, type=data);
46526     +    %em_getname(key=weightedtmout, type=data);
46527     +
46528     +    %em_getname(key=parseVarData, type=data);
46529     +
46530     +    /* Make sure that at least 15 documents are provided */
46531     +   /* Check to make sure that minimum number of documents occur to calculate
46532     +      topics */
46533     +/* This check is done in tmt_multi_terms and is not relevant for times when they are running with user topics */
46534     +/*
46535     +   proc sql noprint; select count(distinct _document_) into :nobs
46536     +      from &em_lib..&lastfilternode._tmout;
46537     +      quit;
46538     +   %if &nobs < 15 %then %do;
46539     +      %let EMEXCEPTIONSTRING = EMTOOL.TOPIC_DATA_SMALL,&nobs;
46540     +      %goto end_topic_train;
46541     +      %end;
46542     +*/
46543     +
46544     +      %global ntopics;
46545     +
46546     +    %em_getname(key=initTopics, type=data);
46547     +
46548     +   /* Note: for the following macro variables, anything that begins with tmt_
46549     +   refers to properties on the TM node, anything that begins with em_ are
46550     +   tables that need to be em_registered, and anything that beings tmm_ are
46551     +   macro variables that the user may or may not set.  If they are not set, then
46552     +   they should default to the value given */
46553     +
46554     +   %em_checkmacro(name=tmm_doccutoff,       global=Y, value=.001);
46555     +      %if &tmm_doccutoff<0 or &tmm_doccutoff>1 %then %let tmm_doccutoff=0.001;
46556     +   %em_checkmacro(name=tmm_termcutoff,       global=Y, value=.001);
46557     +      %if &tmm_termcutoff<0 or &tmm_termcutoff>1
46558     +          %then %let tmm_termcutoff=0.001;
46559     +   %em_checkmacro(name=tmm_norm_pivot,      global=Y, value=.7);
46560     +      %if &tmm_norm_pivot<0 or &tmm_norm_pivot>1 %then %let tmm_norm_pivot=0.7;
46561     +   %em_checkmacro(name=tmm_term_cutoff,      global=Y, value=);
46562     +
46563     +   /* The default value of 35 degrees means that a topic is excluded if at least 2/3 of its variance
46564     +      (i.e. r-squared) is accounted for by the other topic (i.e. sqrt(2/3) ~ arccos(35) )
46565     +    */
46566     +   %em_checkmacro(name=tmm_max_topic_angle, global=Y, value=35);
46567     +   %em_checkmacro(name=tmm_min_docs,      global=Y, value=10);
46568     +  /* Any terms less than this pct. of maximum are excluded */
46569     +   %em_checkmacro(name=tmm_term_cutoff_pct, global=Y, value=.1);
46570     +
46571     +
46572     +
46573     +   %em_getname(key=topics,           type=data);
46574     +   %em_getname(key=termtopics,       type=data);
46575     +   %em_getname(key=docDs,            type=data);
46576     +   %em_getname(key=tmout_normalized, type=data);
46577     +   %em_getname(key=term_sums,        type=data);
46578     +   %em_getname(key=tmout_parent,     type=data);
46579     +
46580     +   %let tmt_num_single=&em_property_topTermCnt;
46581     +   %let tmt_num_multi=&em_property_autoTopicCnt;
46582     +
46583     +   %let em_topics     = &em_user_topics;
46584     +   %let em_termtopics = &em_user_termtopics;
46585     +   %let em_doc_ds     = &em_user_docDs;
46586     +   %let em_norm_out   = &em_user_tmout_normalized;
46587     +   %let em_term_sums  = &em_user_term_sums;
46588     +   %let em_term_ds=&em_user_weightedterms;
46589     +
46590     +   /* Check if initTopics data set exists */
46591     +   %em_getname(key=initTopics, type=data);
46592     +   %em_getname(key=topic_Cutoffs, type=data);
46593     +   %let tmt_init_topics=&em_user_initTopics;
46594     +
46595     +
46596     +   %if ^%sysfunc(exist(&em_user_initTopics)) %then %do;
46597     +   proc sql noprint;
46598     +   create table &em_user_topic_Cutoffs
46599     +      (_name char(100)
46600     +          label="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topic_vlabel, NOQUOTE))",
46601     +       _termcutoff decimal
46602     +          label="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_termCutoff_vlabel, NOQUOTE))",
46603     +       _doccutoff decimal
46604     +          label="%sysfunc(sasmsg(sashelp.tmine, rpt_text_docCutoff_vlabel, NOQUOTE))"
46605     +       );
46606     +   create table &em_user_initTopics
46607     +      (_topic_ char(100)
46608     +          label="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_intopic_vlabel, NOQUOTE))",
46609     +       _term_ char(80)
46610     +          label="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_intopic_term, NOQUOTE))",
46611     +       _role_ char(32)
46612     +          label="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_intopic_role, NOQUOTE))",
46613     +       _weight_ decimal
46614     +          label="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_intopic_weight, NOQUOTE))"
46615     +       );
46616     +   quit;
46617     +   %end;
46618     +
46619     +   %else %if ^%sysfunc(exist(&em_user_topic_Cutoffs)) %then %do;
46620     +   proc sql noprint;
46621     +   create table &em_user_topic_Cutoffs
46622     +      (_name char(100)
46623     +          label="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topic_vlabel, NOQUOTE))",
46624     +       _termcutoff decimal
46625     +          label="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_termCutoff_vlabel, NOQUOTE))",
46626     +       _doccutoff decimal
46627     +          label="%sysfunc(sasmsg(sashelp.tmine, rpt_text_docCutoff_vlabel, NOQUOTE))"
46628     +       );
46629     +   quit;
46630     +   %end;
46631     +
46632     +   /*--------------- Following is training code -------------------- */
46633     +   /* First thing to do is create a weighted out data set if one has not already
46634     +     been created in Text Filter node.  Then make sure you have the out data set
46635     +     as the version that has children rolled up to parents and dropped terms
46636     +     removed.
46637     +     Also, make sure you use a term ds that does not include children, the where clause below accomplishes that.
46638     +   */
46639     +   %let syscc=0;
46640     +
46641     +    %let isweight = 0;
46642     +    %let dsid=%sysfunc(open(%str(&em_lib..&lastfilternode._terms)));
46643     +    %if &dsid gt 0 %then %do;
46644     +        %let isweight =%sysfunc(varnum(&dsid, weight));
46645     +        %let rc=%sysfunc(close(&dsid));
46646     +    %end;
46647     +
46648     +      /* get target variable info */
46649     +      %let targetvar = ;
46650     +      data _null_;
46651     +      set &em_data_variableset(where=(ROLE='TARGET' and USE in('Y' 'D')
46652     +                                      and LEVEL ne 'INTERVAL'));
46653     +      if _N_=1 then call symput('targetvar', strip(NAME));
46654     +      run;
46655     +      data _null_;
46656     +         cellwgt="LOG";
46657     +         set &em_lib..&lastfilternode._tmconfig;
46658     +         call symput('cellwgt',cellwgt);
46659     +         run;
46660     +
46661     +    /* Output weighted, parent-only term and out data set. */
46662     +    proc tmutil data=&em_lib..&lastfilternode._tmout key=&em_lib..&lastfilternode._terms
46663     +        %if &targetvar ne %then doc=&EM_IMPORT_DATA target=&targetvar ;;
46664     +        control init memloc='tmutil_memloc';
46665     +    proc tmutil;
46666     +        control release memloc='tmutil_memloc';
46667     +
46668     +
46669     +    %if "&isweight" eq "0" %then %do;
46670     +       weight termwgt=%if &targetvar= %then entropy; %else MI; cellwgt=&cellwgt;
46671     +       %if &lastfilternode = &lastparsenode %then select reducef=4;;
46672     +       output keeponly keyformat=tmscore out=&EM_USER_weightedtmout key=&em_user_terms;
46673     +       run;
46674     +       %if "%ktrim(&systmutil)" ne "" %then %goto pre_end_topic_train;
46675     +       proc sql noprint;
46676     +           %if ^%sysfunc(exist(&em_user_weightedTerms,'view')) %then drop view &em_user_weightedterms;;
46677     +           create table &em_user_weightedterms as
46678     +              select a.weight, b.*
46679     +              from &em_user_terms as a, &em_lib..&lastfilternode._terms as b
46680     +              where a.key=b.key and a.parent = . and b._ispar ne '.'
46681     +              order by key;
46682     +           quit;
46683     +       %end;
46684     +    %else %do;
46685     +       /* Apply weights on current term table */
46686     +       /******* look up weight from tmconfig table! */
46687     +       weight cellwgt=&cellwgt
46688     +          in_weight=&em_lib..&lastfilternode._terms_data(keep=key weight);
46689     +        output keeponly keyformat=tmscore out=&EM_USER_weightedtmout;
46690     +       run;
46691     +       %if "%ktrim(&systmutil)" ne "" %then %goto pre_end_topic_train;
46692     +       proc sql noprint;
46693     +       %if ^%sysfunc(exist(&em_user_weightedTerms,'view')) %then drop view &em_user_weightedterms;;
46694     +       create table &em_user_weightedterms as
46695     +          select * from &em_lib..&lastfilternode._terms where _ispar ne '.'
46696     +          order by key;
46697     +       quit;
46698     +       %end;
46699     +
46700     +    %if %eval(&syscc)>4 %then %do;
46701     +        %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
46702     +       %goto end_topic_train;
46703     +    %end;
46704     +
46705     +   /* Normalize the weighted out data set (containing only kept non-child terms)
46706     +      so that documents have a length of approximately 1 */
46707     +       %if &tmm_norm_pivot ne 0 %then %do;
46708     +           %row_pivot_normalize(transds=&em_user_weightedtmout,
46709     +                     outtransds=&em_norm_out,
46710     +                     col_sumds=&em_term_sums,
46711     +                     row=_document_,col=_termnum_,entry=_count_,
46712     +                     pivot=&tmm_norm_pivot,
46713     +                     tmt_config=&em_lib..&lastfilternode._tmconfig,
46714     +                     tmt_train=1, prefix=&EM_NODEID.);
46715     +          %end;
46716     +       %else %do;
46717     +          data &em_norm_out; set &em_user_weightedtmout; run;
46718     +          %end;
46719     +
46720     +
46721     +    %if %eval(&syscc)>4 %then %do;
46722     +        %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
46723     +       %goto end_topic_train;
46724     +    %end;
46725     +
46726     +   %let tmprefix=&EM_NODEID._;
46727     +   %let syscc=0;
46728     +   %let curdocDs=;
46729     +
46730     +   /* If there is an em_init_topics table, call %tmt_topify and _tmt_doc_score,
46731     +                     if not create a completely blank em_term_ds and em_topics
46732     +    */
46733     +
46734     +   %tmt_topify(initds=&tmt_init_topics,termds=&em_term_ds,topicds=&em_topics,
46735     +               termtopicds=&em_termtopics,topic_cutoff_ds=&em_user_topic_Cutoffs,
46736     +               doccutoff=&tmm_doccutoff, termcutoff=&tmm_termcutoff);
46737     +%if &tm_debug =0 %then %do;
46738     +proc sql;
46739     +   drop table _tmptop;
46740     +quit;
46741     +%end;
46742     +   %if %eval(&syscc)>4 %then %do;
46743     +       %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
46744     +      %goto end_topic_train;
46745     +   %end;
46746     +
46747     +   proc sql noprint; select count(*) into :ntopics from &em_topics; quit;
46748     +
46749     +   *check for eliminated init topics;
46750     +   proc sql noprint; select count(distinct _topic_) into :user_ntopics from &tmt_init_topics; quit;
46751     +   %if(%eval(&user_ntopics-&ntopics)>0) %then %do;
46752     +        %put &em_codebar;
46753     +         %let errormsg = %sysfunc(sasmsg(sashelp.tmine,EMTOOL.USERTOPIC_NOTE, NOQUOTE,%eval(&user_ntopics-&ntopics), %eval(&user_ntopics-0)));
46754     +        %put &errormsg;
46755     +         %put &em_codebar;
46756     +      %let user_ntopics=&ntopics;
46757     +   %end;
46758     +
46759     +   %tmt_doc_score(termtopds=&em_termtopics,outds=&em_norm_out,
46760     +                  topicds=&em_topics,docds=&em_import_data,newdocds=_userdocs,
46761     +                  termsumds=&em_term_sums, prefix=&tmprefix, pivot=&tmm_norm_pivot);
46762     +    %if %eval(&syscc)>4 %then %do;
46763     +        %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
46764     +       %goto end_topic_train;
46765     +    %end;
46766     +
46767     +   %let curdocDs=_userdocs;
46768     +
46769     +   /* be sure docscore dataset is populated if only init docs */
46770     +   data &em_doc_ds; set &curdocDs; run;
46771     +
46772     +   /* If they indicate to create any single term topics, run next three macros,
46773     +      to create single word topics, then score the documents on just those topics,
46774     +      then remove duplicates (based on document scores).  Finally, append new topics and
46775     +      topicterms to respective data sets.  */
46776     +
46777     +    %if "&em_property_topTermCnt" ne "0" %then %do;
46778     +       filename temp catalog 'sashelp.emtxtext.tmt_single_terms.source';
46779     +       %include temp;
46780     +
46781     +       %let syscc=0;
46782     +
46783     +       %tmt_single_terms(termds=&em_term_ds,num_topics=%eval(&tmt_num_single+&user_ntopics),
46784     +                        termtopicds=singtermtop, topicds=singtopics,
46785     +                        startnum=%eval(&ntopics+1),
46786     +                        doccutoff=.001);
46787     +
46788     +        /*get actual number of topics produced*/
46789     +        proc sql noprint; select count(*) into :tmt_act_single from singtopics; quit;
46790     +        %let tmt_act_single=%ktrim(&tmt_act_single);
46791     +
46792     +       %tmt_doc_score(termtopds=singtermtop, docds=&curdocDs,
46793     +                      outds=&em_norm_out, topicds=singtopics, newdocds=_singuserdocs,
46794     +                      termsumds=&em_term_sums, prefix=&tmprefix,
46795     +                      pivot=&tmm_norm_pivot);
46796     +
46797     +       %let _ndel=%eval(&tmt_act_single-&tmt_num_single);
46798     +       %if &_ndel>0 %then %do;
46799     +
46800     +          %tmt_remove_dups(in=_singuserdocs,n=%eval(&user_ntopics+&tmt_act_single),
46801     +                           m=&ntopics,m1=%eval(&ntopics+1),out=&em_doc_ds,
46802     +                           topicds=singtopics, termtopicds=singtermtop,
46803     +                           prefix=&tmprefix.raw,ndel=&_ndel);
46804     +          %let ntopics=%eval(&ntopics+&tmt_act_single-&_ndel);
46805     +          %end;
46806     +           %else %do;
46807     +              %let ntopics=%eval(&ntopics+&tmt_act_single);
46808     +              data &em_doc_ds; set _singuserdocs;
46809     +              %end;
46810     +
46811     +       data &em_topics; set &em_topics singtopics; run;
46812     +       data &em_termtopics; set &em_termtopics singtermtop; run;
46813     +%if &tm_debug =0 %then %do;
46814     +proc sql;
46815     +   drop table singtopics;
46816     +   drop table singtermtop;
46817     +   drop view _tm_termtmpview;
46818     +   drop table _singuserdocs;
46819     +   drop table _tmpdocs;
46820     +   drop table _termview;
46821     +   drop table _termtopics;
46822     +   drop table top_tmp_out;
46823     +   drop table _weighted_tmout;
46824     +   drop table _termsumds;
46825     +quit;
46826     +%end;
46827     +       %if %eval(&syscc)>4 %then %do;
46828     +          %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
46829     +          %goto end_topic_train;
46830     +          %end;
46831     +   %end; /*  %if "&em_property_topTermCnt" ne "0" */
46832     +
46833     +
46834     +
46835     +   /* If they indicate to create any multi-term topics, run next three macros */
46836     +   /* The value for rotation= depends on the autoTopic property.  If Yes, then
46837     +      rotation=promax should be used, otherwise rotation=varimax should be used. */
46838     +
46839     +   %if "&em_property_autoTopicCnt" ne "0" %then %do;
46840     +      filename temp catalog 'sashelp.emtxtext.tmt_multi_terms.source';
46841     +      %include temp;
46842     +      proc sql noprint;
46843     +         select count(*) into: _numrepterms
46844     +         from &em_term_ds;
46845     +      quit;
46846     +
46847     +      %if &_numrepterms < 15 %then %do;
46848     +         %let EMEXCEPTIONSTRING = EMTOOL.TOPICTOOFEWTERMS,&_numrepterms;
46849     +         %goto end_topic_train;
46850     +      %end;
46851     +
46852     +        %let syscc=0;
46853     +
46854     +%let startnum=%eval(&ntopics+1);
46855     +      %em_getname(key=out_u, type=data);
46856     +       %tmt_multi_terms(outds=&em_norm_out,termds=&em_term_ds,
46857     +                        num_topics=%eval(&tmt_num_multi+&user_ntopics),termtopicds=mult_termtop,
46858     +                        rotation=
46859     +                            %if &em_property_autoTopic=Y %then promax;
46860     +                        %else varimax;
46861     +                        ,
46862     +                        startnum=&startnum, topicds=mult_topics,
46863     +                        termcutoff=&tmm_term_cutoff,
46864     +                        doccutoff=&tmm_doccutoff*2,
46865     +                        tmptable=&em_user_out_u);
46866     +       %if &EMEXCEPTIONSTRING ne  %then %goto end_topic_train;
46867     +   /* %end; */
46868     +
46869     +        /*get actual number of topics produced*/
46870     +        proc sql noprint; select count(*) into :tmt_act_multi from mult_topics; quit;
46871     +        %let tmt_act_multi=%ktrim(&tmt_act_multi);
46872     +
46873     +
46874     +       %tmt_doc_score(termtopds=mult_termtop, docds=&curdocDs,
46875     +                      outds=&em_norm_out, topicds=mult_topics, newdocds=multdocs,
46876     +                      termsumds=&em_term_sums, prefix=&tmprefix,
46877     +                      pivot=&tmm_norm_pivot,norm=);
46878     +
46879     +       /*    proc corr data=multdocs; run; */
46880     +
46881     +
46882     +%let endnum=%eval(&startnum + &tmt_act_multi -1);
46883     +%let cnt=%eval(&endnum-&startnum+1);
46884     +
46885     +           /* Set document cutoffs based on average + standard deviation */
46886     +           data _doc_tmp_sums (keep=_doccutoff _mean_ _std_ _ssi_ _ndoc_ _topicid);
46887     +           array vals{&cnt} &tmprefix.raw&startnum -&tmprefix.raw&endnum;
46888     +           array sums{&cnt} _temporary_ (&cnt*0);
46889     +           array ss{&cnt} _temporary_ (&cnt*0);
46890     +           _ndoc_=0;
46891     +           do until(eof);
46892     +              set multdocs end=eof;
46893     +              _ndoc_=_ndoc_+1;
46894     +              do i=1 to &cnt;
46895     +                 sums{i}=sums{i}+abs(vals{i});
46896     +                 ss{i}=ss{i}+abs(vals{i})**2;
46897     +                 end;
46898     +              end;
46899     +           do i=1 to &cnt;
46900     +              _mean_=sums{i}/_ndoc_;
46901     +              _std_=sqrt((ss{i} - _ndoc_*_mean_*_mean_)/(_ndoc_-1));
46902     +              _doccutoff=round(_mean_+_std_,.001);
46903     +              _topicid=i+&startnum-1;
46904     +              _ssi_=ss{i};
46905     +              output;
46906     +              end;
46907     +
46908     +           proc sql noprint;
46909     +               create table mult_topics as
46910     +                  select a._topicid, _name, _cat, /*, _apply */ _numterms, _numdocs,
46911     +                    _termCutoff, b._doccutoff
46912     +                  from mult_topics as a, _doc_tmp_sums as b
46913     +                  where a._topicid=b._topicid;
46914     +           /* proc print data=mult_topics; run; */
46915     +
46916     +       /* Now rescore based on new cutoffs */
46917     +       %tmt_doc_score(termtopds=mult_termtop, docds=&curdocDs,
46918     +                      outds=&em_norm_out, topicds=mult_topics, newdocds=multdocs,
46919     +                      termsumds=&em_term_sums, prefix=&tmprefix,
46920     +                      pivot=&tmm_norm_pivot);
46921     +       %let _ndel=%eval(&tmt_act_multi-&tmt_num_multi);
46922     +
46923     +       %if &_ndel > 0 %then %do;
46924     +          %tmt_remove_dups(in=multdocs,n=%eval(&ntopics+&tmt_act_multi),
46925     +                           m=&user_ntopics, m1=%eval(&ntopics+1),
46926     +                           prefix=&tmprefix.raw,out=&em_doc_ds,
46927     +                           ndel=&_ndel,
46928     +                           topicds=mult_topics, termtopicds=mult_termtop);
46929     +          %let ntopics=%eval(&ntopics+&tmt_act_multi-&_ndel);
46930     +          %end;
46931     +           %else %let ntopics=%eval(&ntopics+&tmt_act_multi);;
46932     +
46933     +      %let curdocDs=&em_doc_ds; /* pass output of remove_dup_tops */
46934     +      data &em_topics; set &em_topics mult_topics; run;
46935     +      data &em_termtopics; set &em_termtopics mult_termtop; run;
46936     +%if &tm_debug =0 %then %do;
46937     +proc sql;
46938     +   drop table out_u;
46939     +   drop table _factors;
46940     +   drop table _factrot;
46941     +   drop table _termmrg;
46942     +   drop table mult_termtop;
46943     +   drop view _tmp_top_weights;
46944     +   drop table _termtmpsums;
46945     +   drop table mult_topics;
46946     +   drop table mult_termtop;
46947     +   drop table multdocs;
46948     +   drop table _doc_tmp_sums;
46949     +   drop view _doc_tmp_sums;
46950     +quit;
46951     +%end;
46952     +      %if %eval(&syscc)>4 %then %do;
46953     +         %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
46954     +         %goto end_topic_train;
46955     +         %end;
46956     +   %end;
46957     +proc sort data=&em_topics; by _topicid; run;
46958     +data &em_topics;
46959     +   length _displayCat $16;
46960     +   set &em_topics;
46961     +   label _topicid    = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicid_vlabel, NOQUOTE))";
46962     +   label _name        = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topic_vlabel, NOQUOTE))";
46963     +/*   label _cat         = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_category_vlabel, NOQUOTE))";*/
46964     +   * label _apply       = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_apply_vlabel, NOQUOTE))";
46965     +   label _doccutoff   = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_docCutoff_vlabel, NOQUOTE))";
46966     +   label _termcutoff  = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_termCutoff_vlabel, NOQUOTE))";
46967     +   label _numterms    = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_numterms_vlabel, NOQUOTE))";
46968     +   label _numdocs     = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_numdocs_vlabel, NOQUOTE))";
46969     +   label _displayCat  = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_category_vlabel, NOQUOTE))";
46970     +
46971     +   select(ksubstr(_cat,1,1));
46972     +      when('S') _displayCat = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicsingle_value, NOQUOTE))";
46973     +      when('M') _displayCat = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicmulti_value, NOQUOTE))";
46974     +      when('U') _displayCat = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicuser_value, NOQUOTE))";
46975     +      otherwise;
46976     +      end;
46977     + run;
46978     +   quit;
46979     +
46980     +   * Set some of the data specific issues for TM_CLIENT_SETTINGS;
46981     +   %let docs_interactive = &curDocDs;
46982     +   %let terms_interactive = &em_term_ds;
46983     +
46984     +   %let docs_view_variables = ;
46985     +   * save out the metadata on the docs table ;
46986     +   proc contents data=&docs_interactive out=work._docs_contents noprint;
46987     +   run;
46988     +
46989     +
46990     +   * get a list of the variables ;
46991     +   %let docs_nobs = ;
46992     +   proc sql noprint;
46993     +      select name into :docs_view_variables separated by ' '
46994     +      from work._docs_contents
46995     +      where name not like 'TextTopic%' and klowcase(name) ne "_document_" and
46996     +         kupcase(name) ne "%kupcase(%trim(%left(&parseVar)))";
46997     +
46998     +      * get a count of the variables ;
46999     +      select count(*) into :docs_nobs
47000     +      from &docs_interactive;
47001     +
47002     +      * delete our temp table ;
47003     +      drop table work._docs_contents;
47004     +
47005     +      * get a count of the variables ;
47006     +      select count(*) into :terms_nobs
47007     +      from &em_term_ds;
47008     +   quit;
47009     +
47010     +   * add the parseVar back in as the first field ;
47011     +   %let docs_view_variables = topic_weight %trim(%left(&parseVar)) &docs_view_variables;
47012     +
47013     +   %em_getname(key=tm_client_settings);
47014     +   proc sort data=&em_user_tm_client_settings;
47015     +      by VIEWER KEY;
47016     +   run;
47017     +
47018     +  %let len = %length(&docs_view_variables);
47019     +   /* %put !!!!!!!!!!!! &len  &docs_view_variables; */
47020     +
47021     +   data work.tm_client_settings;
47022     +       length viewer $80 key $80 value $32000;
47023     +       * document table ;
47024     +       viewer = "DOCUMENTS"; key = "nobs";          value = "&docs_nobs";           output;
47025     +       viewer = "DOCUMENTS"; key = "viewvariables"; value = "&docs_view_variables"; output;
47026     +         viewer = "DOCUMENTS"; key = "parseVariable"; value="&parsevar"; output;
47027     +       * terms table ;
47028     +       viewer = "TERMS";     key = "nobs";          value = "&terms_nobs";          output;
47029     +
47030     +       * augTopics table ;
47031     +       viewer = "TOPICS";    key = "nobs";          value = "&ntopics";         output;
47032     +     run;
47033     +    proc sort data=work.tm_client_settings;
47034     +       by VIEWER KEY;
47035     +    run;
47036     +    data &em_user_tm_client_settings;
47037     +       merge &em_user_tm_client_settings work.tm_client_settings;
47038     +       by VIEWER KEY;
47039     +    run;
47040     +    proc datasets nolist nodetails lib=work;
47041     +       delete tm_client_settings;
47042     +    run;
47043     +    quit;
47044     +   * add the info to EMINFO to forward on to other nodes ;
47045     +   data &EM_DATA_EMINFO;
47046     +      length TARGET KEY $32 DATA $43;
47047     +         target = " ";
47048     +      key="LastTMNode";       data="&EM_NODEID";                    output;
47049     +      key="LastTMNodeType";       data="TextTopic";                    output;
47050     +      key="LastTopic";    data="&EM_NODEID";                    output;
47051     +      key="tm_topic_dataset"; data="&EM_PROPERTY_tm_topic_dataset"; output;
47052     +         key="PRESCORECODE"; data="&EM_NODEID"; output;
47053     +    run;
47054     +
47055     +
47056     +   /* At this point, training is complete.  The three tables have been created
47057     +      that are used in the Topic view property: &em_topics for the topic table,
47058     +      a join of &em_term_ds and &em_termtopics for the terms table, and &em_doc_ds
47059     +      for the documents table.  However, the training, etc. table to be exported
47060     +      from the node will be obtained from the scoring code, as documented below.
47061     +   */
47062     +
47063     +
47064     +  %pre_end_topic_train:
47065     +  %if "%ktrim(&systmutil)" ne "" %then %do;
47066     +        %let EMEXCEPTIONSTRING = EMTOOL.TMUTIL, &systmutil;
47067     +        %put emexceptionstring= "&EMEXCEPTIONSTRING";
47068     +        %let syscc=0;
47069     +         %end;
47070     +
47071     +  %end_topic_train:
47072     +  filename temp;
47073     +%if &tm_debug =0 %then %do;
47074     +proc sql;
47075     +   drop table _userdocs;
47076     +quit;
47077     +%end;
47078     +
47079     +
47080     +%mend train;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TM_GET_LAST_FILTER.SOURCE입니다.
47081     +/* ****************************************************************
47082     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
47083     + *
47084     + * Name:             tm_get_last_filter.sas
47085     + * Product:          SAS Text Miner
47086     + * Language:         Sas
47087     + * Script:
47088     + *
47089     + * Usage:
47090     + *
47091     + * Purpose:  macro to get the last filter node and the last parse node in the
47092     + *   diagram that corresponds to the current parse variable.  If there is no filter
47093     + *   node, the filter node is set to the last parse node.
47094     + *
47095     + *
47096     + *
47097     + * History:
47098     + * 14Aug09 Initial Coding
47099     + *
47100     + * Notes:
47101     + *    Returns an error in the following cases:
47102     + *      1. There is no preceding parse node.
47103     + *      2. There is no parse node with the current parse variable.
47104     + *
47105     + * Last Modified By:
47106     + * Last Modified On: Wed Sep 23 15:35:04 2009
47107     + *
47108     + * End
47109     + * ************************************************************** */
47110     +%macro tm_get_last_filter(eminfo=,em_lib=, em_variableset=);
47111     +   %let last_parse_node=;
47112     +   %let last_filter_node=;
47113     +   %let last_prescore_node=;
47114     +   %let server_err=;
47115     +   %let EMEXCEPTIONSTRING=;
47116     +   %let syscc=0;
47117     +
47118     +    /* verify that setinit for SAS Text Miner is currently active */
47119     +    %if %sysfunc(sysprod(PRODNUM107)) ne 1 %then %do;
47120     +       %let EMEXCEPTIONSTRING = EMTOOL.NOTMLICENSE;
47121     +        %goto end_macro;
47122     +        %end;
47123     +
47124     +
47125     +    * find last filter or text parse node if no filter node. ;
47126     +   %if %sysfunc(exist(&eminfo)) %then %do;
47127     +      proc sql noprint;
47128     +      select data into :last_parse_node from &eminfo where key="LastTextParsing";
47129     +         select data into :last_filter_node from &eminfo where key="LastTextFilter";
47130     +         select data into :last_prescore_node from &eminfo where kupcase(key)="PRESCORECODE";
47131     +      quit;
47132     +
47133     +   %end;
47134     +
47135     +   %if &last_parse_node= %then %do;
47136     +      %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGNODE;
47137     +      %goto end_macro;
47138     +      %end;
47139     +
47140     +   %else %if &last_filter_node= %then %let last_filter_node = %ktrim(&last_parse_node);
47141     +   %else %let last_filter_node = %ktrim(&last_filter_node);
47142     +   %let last_parse_node = %ktrim(&last_parse_node);
47143     +
47144     +   * Check to make sure parse variable is present and still exists;
47145     +   %let parsevar = ;
47146     +   proc sql noprint;
47147     +    select parsevar into :parsevar
47148     +    from &em_lib..&last_filter_node._tmconfig;
47149     +    quit;
47150     +
47151     +    *check for dropped parsevar on input dataset;
47152     +       %let parsevarOK= ;
47153     +       %let parsevarN=%kupcase(%ktrim(&parsevar));
47154     +       data _null_;
47155     +         set &em_variableset(where=(kupcase(NAME)="&parsevarN" and USE in('Y' 'D')));
47156     +         if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
47157     +         run;
47158     +       %if(&parsevarOK eq ) %then %do;
47159     +          %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGVAR;
47160     +          %goto end_macro;
47161     +          %end;
47162     +%end_macro:
47163     +
47164     +%mend tm_get_last_filter;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TM_GET_LAST_FILTER):   * find last filter or text parse node if no filter node. ;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select data into :last_parse_node from EMWS5.TextFilter2_EMINFO where key="LastTextParsing";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_filter_node from EMWS5.TextFilter2_EMINFO where key="LastTextFilter";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_prescore_node from EMWS5.TextFilter2_EMINFO where kupcase(key)="PRESCORECODE";
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
 
 
MPRINT(TM_GET_LAST_FILTER):   * Check to make sure parse variable is present and still exists;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select parsevar into :parsevar from EMWS5.TextFilter2_tmconfig;
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
 
 
MPRINT(TM_GET_LAST_FILTER):   *check for dropped parsevar on input dataset;
MPRINT(TM_GET_LAST_FILTER):   data _null_;
MPRINT(TM_GET_LAST_FILTER):   set EMWS5.TextTopic2_VariableSet(where=(kupcase(NAME)="REVIEW" and USE in('Y' 'D')));
MPRINT(TM_GET_LAST_FILTER):   if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
MPRINT(TM_GET_LAST_FILTER):   run;
 
NOTE: 1개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_VARIABLESET.에서 읽었습니다.
      WHERE (KUPCASE(NAME)='REVIEW') and USE in ('D', 'Y');
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS5.TextTopic2_last_tm_nodes;
MPRINT(TRAIN):   set EMWS5.TextFilter2_EMINFO;
MPRINT(TRAIN):   run;
 
NOTE: 6개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_LAST_TM_NODES은(는) 6개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.03 초
 
 
MPRINT(TRAIN):   * include helper macros ;
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.row_pivot_normalize.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.ROW_PIVOT_NORMALIZE.SOURCE입니다.
47165     +/* ****************************************************************
47166     + * Copyright (C) 1996 by SAS Institute Inc., Cary, NC 27513
47167     + *
47168     + * Name:             row_pivot_normalize_docs.sas
47169     + * Product:          SAS/GRAPH
47170     + * Language:         Sas
47171     + * Script:
47172     + *
47173     + * Usage:
47174     + *
47175     + * Purpose:          To output a new out table that is normalized so that each
47176     + *  row is normalized so "on average" the sums of squares of the _count_ is 1.
47177     + *
47178     + * History:
47179     + * 05May09 Initial Coding
47180     + *
47181     + * Notes:
47182     + *
47183     + * Last Modified By:
47184     + * Last Modified On: Thu Jan 06 17:08:35 2011
47185     + *
47186     + * End
47187     + * ************************************************************** */
47188     +%macro row_pivot_normalize(transds=,outtransds=,row=,col=,entry=,
47189     +                           col_sumds=, pivot=.5, tmt_config= , tmt_train=1, prefix=);
47191     +   /* Calculate sum of the squared entries for each row */
47192     +proc summary nway data=&transds;
47193     +   class &row;
47194     +   var &entry;
47195     +   output out=_sqrowvals uss=;
47196     +   run;
47198     +   /* Put into &meandiv what the average euclidean length is across rows */
47201     +%if &tmt_train = 1  %then %do;
47202     +   proc sql noprint;
47203     +      select mean(sqrt(&entry)) into :meaneuclen
47204     +      from _sqrowvals;
47205     +   quit;
47206     +   %if &tmt_config ne %then %do;
47207     +      *populate the config file with the mean value;
47208     +      data &tmt_config;
47209     +         set &tmt_config;
47210     +         &prefix._meaneuclen= symget('meaneuclen');
47211     +      run;
47212     +   %end;
47213     +    data _sqrowvals;
47214     +      set _sqrowvals;
47215     +      meaneuclen=symget('meaneuclen');
47216     +      divisor = meaneuclen + (sqrt(&entry) - meaneuclen)*&pivot;
47217     +      drop meaneuclen;
47218     +   run;
47221     +%end;
47222     +%else %do;
47223     +      * grab the mean value from the config file  and put into meaneuclien;
47224     +   data _null_;
47225     +      set &tmt_config;
47226     +      call symput('meaneuclen',&prefix._meaneuclen);
47227     +   run;
47228     +    data _sqrowvals;
47229     +      set _sqrowvals;
47230     +      meaneuclen=symget('meaneuclen');
47231     +      divisor = meaneuclen + (sqrt(&entry) - meaneuclen)*&pivot;
47232     +   run;
47234     +%end;
47239     +proc sql noprint;
47240     +   create table &outtransds as
47241     +      select a.&row,a.&col,a.&entry / divisor as &entry
47242     +      from &transds as a,_sqrowvals as b
47243     +      where a.&row=b.&row;
47244     +   drop table _sqrowvals;
47245     +         quit;
47246     +%if &col_sumds ne %then %do;
47247     +   proc summary nway data=&outtransds;
47248     +   class &col;
47249     +   var &entry;
47250     +   output out=&col_sumds mean=;
47251     +   run;
47252     +%end;
47253     +%mend row_pivot_normalize;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tmt_topify.sas';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TMT_TOPIFY.SOURCE입니다.
47254     +/* ****************************************************************
47255     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
47256     + *
47257     + * Name:             tmt_topify.sas
47258     + * Product:          SAS Text Miner
47259     + * Language:         Sas
47260     + * Script:
47261     + *
47262     + * Usage: %tmt_topify(initds=,termds=,topicds=,termtopicds=,<doccutoff=>);
47263     + *
47264     + * Purpose:  To convert a user-created table containing one row for
47265     + *      each term that contains a weight for each topic into a
47266     + *      normalized form with two tables :
47267     + *      a topic table with one row per topic, and a termtopics table
47268     + *      that has one row per term per topic.
47269     + *
47270     + * Parameters:
47271     + *   initds= The name of a table that contains one line per term per
47272     + * topic.  It must include the variables _topic_ (unique name of
47273     + * topic), _term_ (term text string), _role_ (part of speech or entity
47274     + * type).
47275     + *
47276     + *   termds= The name of a table that contains the terms matched up
47277     + * with their term ids, or key.  This table must include the variables
47278     + * key (the unique term id), term (term text string), role (part of
47279     + * speech or entity type), and parent (term id of parent if term
47280     + * represents a synonym of another term).
47281     + *
47282     + *   topicds= a table name that on output will contain one row per
47283     + * topic.  It contains the variables _topicid(unique identifier of
47284     + * topic, numbered sequentially beginning with 1), _name (unique name of
47285     + * topic), _cat (always set to "User" to indicate user topic), _apply
47286     + * (always set to Y so that topic will create a new variable on scored
47287     + * data representing topic), _doccutoff (set to input _docCutoff
47288     + * parameter), _termcutoff (set to zero), _numterms (set to missing to
47289     + * be calculated later), and _numdocs (set to missing to be calculated
47290     + * later)
47291     + *
47292     + *   topictermds= a table name that on output will contain one row for
47293     + * each term with a weight on each topic.  The variables on this table
47294     + * will be _topicid (unique id for each _topic as identified on
47295     + * topicds table), _termid (term ids as identified from the terms
47296     + * table for the term string and role string), and _weight (the weight
47297     + * to be applied to that term from the initds).
47298     + *
47299     + * History:
47300     + * 06May09 Initial Coding
47301     + *
47302     + * Notes:
47303     + *   The way that the term and role text strings are mapped into term
47304     + * ids via the terms data set obeys the following rules:
47305     + *
47306     + * 0. A normalized text string is created that is a downcased version
47307     + * of the term on the init_ds (since all terms are downcased on the
47308     + * terms table).  A normalized role is created in which roles
47309     + * representing parf of speech are set to have first letter
47310     + * uppercased, and the rest lowercased, again to match the term ds casing.
47311     +
47312     + * 1. If a given row on the initds contains both a non-blank term
47313     + * and role then a row is generated on termtopicds for each
47314     + * term on the term ds with that normalized text string and either
47315     + * that normalized role, or a blank role.
47316     + *
47317     + * 2. Any row on initds that has a blank role and a blank term is
47318     + * ignored.
47319     + *
47320     + * 3. Otherwise, any row that has a blank role matches terms in termds
47321     + * with any role.
47322     + *
47323     + * 4. Otherwise, any row with a blank term matches any terms in termds
47324     + * with the given role.
47325     + *
47326     + * Last Modified By:
47327     + * Last Modified On: Tue May 29 14:19:57 2012
47328     + *
47329     + * End
47330     + * ************************************************************** */
47331     +%macro tmt_topify(initds=,termds=,topicds=,termtopicds=,topic_cutoff_ds=,
47332     +                  doccutoff=.001,termcutoff=.001);
47333     +   data _tmptop (keep=_topic_ _term_ _role_ _weight_);
47334     +   set &initds;
47335     +   /* Normalize data (terms all downcased), roles set as appropriate
47336     +    before output */
47337     +   _term_=klowcase(_term_);
47338     +   if propcase(_role_) in
47339     +      ("Adj","Adv","Aux","Conj","Det","Noun","Num","Part",
47340     +       "Prep", "Pron","Prop", "Verb")
47341     +      then _role_=propcase(_role_);
47342     +   if (_term_ ne ' ' or _role_ ne ' ') and _weight_ ne 0 and _weight_ ne . then output _tmpTop;
47343     +   run;
47344     +
47345     +    /* Now summarize all duplicates as mean of all the rows that are duplicated,
47346     +       for topic_cutoffs.
47347     +     */
47348     +   proc summary nway data=&topic_cutoff_ds;
47349     +   class _name;
47350     +   var _docCutoff _termCutoff;
47351     +   output out=&topic_cutoff_ds mean=;
47352     +
47353     +
47354     +   /* Make sure to eliminate duplicates, and to roll children into parents.  Also join
47355     +       with the topic_cutoff_ds to get term and document cutoffs */
47356     +   proc sql noprint;
47357     +      create table _tmptop as
47358     +         select a.*, b._doccutoff, b._termcutoff
47359     +         from _tmptop as a left join &topic_cutoff_ds as b
47360     +         on upcase(a._topic_)=upcase(b._name);
47361     +            quit;
47362     +
47363     +   proc sql noprint;
47364     +      create table _termtop1  as
47365     +         select a._topic_,
47366     +            case
47367     +              when b.parent=. then b.key else b.parent end
47368     +              as _termid, a._weight_ as _weight, a._doccutoff, a._termcutoff
47369     +         from &termds as b,_tmpTop as a
47370     +         where (b.key ne b.parent) and (a._term_= ' ' and a._role_=b.role);
47371     +            quit;
47372     +   proc sql noprint;
47373     +      create table _termtop2  as
47374     +         select a._topic_,
47375     +            case
47376     +              when b.parent=. then b.key else b.parent end
47377     +              as _termid, a._weight_ as _weight, a._doccutoff, a._termcutoff
47378     +         from &termds as b,_tmpTop as a
47379     +         where (b.key ne b.parent) and
47380     +         (a._term_ ne ' ' and a._role_ = ' ' and a._term_=b.term);
47381     +            quit;
47382     +   proc sql noprint;
47383     +      create table _termtop3  as
47384     +         select a._topic_,
47385     +            case
47386     +              when b.parent=. then b.key else b.parent end
47387     +              as _termid, a._weight_ as _weight, a._doccutoff, a._termcutoff
47388     +         from &termds as b,_tmpTop as a
47389     +         where (b.key ne b.parent) and
47390     +               (a._term_ ne ' ' and a._role_ ne ' ' and a._term_=b.term
47391     +                 and (a._role_=b.role or b.role=' '));
47392     +            quit;
47393     +
47394     +
47395     +   data &termtopicds;
47396     +            set _termtop1 _termtop2 _termtop3; run;
47397     +
47398     +   proc sort data=&termtopicds; by _topic_;
47399     +
47400     +   /* Now create the topic data set, which has one row per topic, and
47401     +    the convert the termtopic data set to have one row per actual term
47402     +    per topic */
47403     +   data &topicds (keep=_topicid _name _displayCat _cat _docCutoff _termCutoff
47404     +                  _numterms _numdocs)
47405     +      &termtopicds (keep=_topicid _termid _weight);
47406     +   retain _topicid;
47407     +   format _docCutoff _termCutoff _weight 5.3;
47408     +   set &termtopicds; by _topic_;
47409     +   if _n_=1 then _topicid=1;
47410     +
47411     +   output &termtopicds;
47412     +   if last._topic_ then do;
47413     +      _name=_topic_;
47414     +      _cat="User";
47415     +      _displayCat="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicuser_value, NOQUOTE))";
47416     +      if _doccutoff=. then _docCutoff=&doccutoff;
47417     +      if _termcutoff=. then  _termcutoff=&termcutoff;
47418     +      _numterms=.;
47419     +      _numdocs=.;
47420     +      output &topicds;
47421     +      _topicid=_topicid+1;
47422     +      end;
47423     +   run;
47424     +
47425     +   /* Replace duplicates with their mean weight */
47426     +   proc summary nway data=&termtopicds;
47427     +   class _topicid _termid;
47428     +   var _weight;
47429     +   output out=&termtopicds mean=;
47430     +   run;
47431     +   data &termtopicds; set &termtopicds(drop=_type_ _freq_); run;
47432     +
47433     +%if &tm_debug =0 %then %do;
47434     +proc sql;
47435     +   drop table _termtop1;
47436     +   drop table _termtop2;
47437     +   drop table _termtop3;
47438     +   quit;
47439     +%end;
47440     +%mend;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tmt_doc_score.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TMT_DOC_SCORE.SOURCE입니다.
47441     +/* ****************************************************************
47442     + * Copyright (C) 2010 by SAS Institute Inc., Cary, NC 27513
47443     + *
47444     + * Name:             tmt_doc_score.sas
47445     + * Support:          cox  James A. Cox
47446     + * Product:          SAS Text Miner
47447     + * Language:         Sas
47448     + * Script:
47449     + *
47450     + * Usage:
47451     + *
47452     + * Purpose:  To score documents based on contents of a topic table (&topicds), a term-topic table
47453     + *      (&termtopds), and a weighted "out" table (&outds).  A topic weight is a weighted sum of the
47454     + *      term weights from the term-topic table  (_weight_) where such weight is above a minimum
47455     + *      _termcutoff,  multiplied by the weighted _count_ (_count_) from the weighted "out" table,
47456     + *      where such counts are the tfidf weighted counts.
47457     + *
47458     + *
47459     + * History:
47460     + * 01May09 Initial Coding [cox]
47461     + * 08Nov10 Changed to use hash tables [cox]
47462     + *
47463     + * Notes:
47464     + *   scoring=yes is passed in in topic_score.source for both flow and saved score code.
47465     + *       Otherwise, a blank value is passed in.
47466     + *   docds is blank only when called from the Topic Viewer, since the new document table does
47467     + *       not need to be recalculated until scoring time ( a view is actually displayed that joins
47468     + *        them in the Document table part).  So when scoring is nonblank, docds is
47469     + *       never non-blank.
47470     + *
47471     + *   This routine will score topics inclusive from the minimum topic number (computed internally as
47472     + *        &_mintopic) to the maximum topic number (computed as &_maxtopic) from the input topic data
47473     + *        set.
47474     + *
47475     + *
47476     + *   If &scoring is blank, then topic variables are created for each such topic as <nodename>_#.
47477     + *    For example, if the smallest topic number in topic table is 4 and the largest is 10, and the
47478     + *    nodename is "texttopic", then Texttopic_4-TextTopic10 will be created on the output &newdocds.
47479     + *    In this case, the topic table is updated for the variables _numterms and _numdocs to have the
47480     + *    number of terms and documents that exceed their "minimum" value as indicated on the topic ds.
47481     + *   If &scoring is nonblank, the same variables will contain either 1 (if the weighted sum >=
47482     + *    _docCutoff) or 0 (if it is not).  In this case, variables including a raw suffix will indicate
47483     + *   the raw values as calculated above (e.g. texttopic_raw4-texttopic_raw10).  Also, the topic ds
47484     + *    is NOT updated when scoring.
47485     + *
47486     + *   If docds is passed in, then all variables are added to existing variables on the docds.  In this
47487     + *     case, any documents that have no terms for any of the topics will have 0 for all topic variables.
47488     + *     If docds is not passed in, of course, no concatenation is done, and topics that have no terms
47489     + *     for any of the topics will not appear.
47490     + *
47491     + * Unit Tests:  These unit tests were performed satisfactorily from 11/05-11/23 on this code:
47492     + *   Used existing topic node results to work from... this involves using an existing Text Topic Node and
47493     + *   then rescoring the topics.  Unfortunately, it is not quite this easy since the current tmt_doc_score
47494     + *   also normalizes the topic weights each time it is called for all current topics.  This is incorrect, which
47495     + *   was part of the motivation for this rewrite.  I was able to verify same results using some transformations,
47496     + *   however.
47497     + *
47498     + *   1. Verify that when docds= valid value, that the newdocds contains the new variables, and set to the new
47499     + *       values when they differ from the old ones.  Also that it only has the
47500     + *      new variables when docds is not passed in.
47501     + *   2. Verify that when scoring=yes, the _numdocs and _numterms is not updated, but that the _# variables and
47502     + *      the raw_# variables ARE created, and that the number of 1s in each _# variable is correct based on the
47503     + *      document cutoffs specified.
47504     + *   3. Verify that when scoring=, _numdocs and _numterms IS updated, but that _numterms is the same as was
47505     + *      generated by tmt_doc_score before, and _numdocs is equal to the count of the # of 1s in each topic
47506     + *      variable as generated in the result from 2. above.
47507     + *   4. Verify that the results obtained using tmt_doc_score can be made equivalent to this by performing the
47508     + *      normalization before this code is called.  This was tried for scoring=,docds=, and for scoring=y,
47509     + *      docds=train ds, and scoring=,docds
47510     + *   5. Verify that subsetting topics from 4-10 generate same results for those topics as for topics 1-10.  This
47511     + *      was verified for both scoring=yes and scoring=no.
47512     + *   6. Show that documents that contain no terms for all topics appear and generate 0s for all topic scores when
47513     + *      docds is passed in, but don't appear when docds is not passed in.
47514     + *
47515     + *
47516     + * Last Modified By:
47517     + * Last Modified On: Tue Oct 22 15:19:28 2013
47518     + *
47519     + * End
47520     + * ************************************************************** */
47521     +%macro tmt_doc_score(termtopds=tmp_term_topics,outds=,docds=,newdocds=work.topdocs,
47522     +                     topicds=tmp_topics, termsumds=,scoring=,prefix=_topic,
47523     +                     pivot=.5,norm=,outpos=,topicpos=);
47524     +%let _mintopic=1;
47525     +
47526     +/* Remove any duplicate topic ids before scoring */
47527     +proc sort data=&topicds nodupkey; by _topicid;
47528     +proc sort data=&termtopds nodupkey; by _termid _topicid; run;
47529     +proc sql noprint;
47530     +    select max(_topicid), min(_topicid) into :_maxtopic, :_mintopic from &topicds;
47531     +       quit;
47532     +%if &_mintopic eq . %then %let _mintopic=1;
47533     +/*
47534     +%if &scoring ne %then %do;
47535     +    %let _mintopic=1;
47536     +%end;
47537     +*/
47538     +
47539     +%let _mintopic=%left(&_mintopic);
47540     +%let _maxtopic=%left(&_maxtopic);
47541     +
47542     +/* Do the following if there are any topics to be scored */
47543     +%if &_maxtopic >0 %then %do;
47544     +
47545     +%let _minlab=%ktrim(_tmlab)&_mintopic;
47546     +%let _maxlab=%ktrim(_tmlab)&_maxtopic;
47547     +proc sql noprint;
47548     +    select _name into :&_minlab - :&_maxlab from &topicds;
47549     +       quit;
47550     +
47551     +data &newdocds (drop=_topicid _doccutoff _termCutoff _name _cat _displaycat  _numterms _numdocs
47552     +                _weight _termid rc _termnum_ i _count_)
47553     +   %if &scoring= %then %do;
47554     +      &topicds (keep=_topicid _name _cat _displaycat _numterms _numdocs _docCutoff _termCutoff)
47555     +         %end;
47556     +   %if &outpos ne and &topicpos ne %then %do;
47557     +      &topicpos (keep=_topicid _document_ _offset_ _length_ _termnum_)
47558     +         %end;
47559     +   ;
47560     +   if 0 then set &topicds &termtopds;
47561     +
47562     +   /* Create topic hash table */
47563     +   dcl hash _topic_hash(dataset: "&topicds", ordered: "a");
47564     +   _topic_hash.defineKey("_topicid");
47565     +   _topic_hash.defineData("_topicid","_docCutoff","_termCutoff","_name","_cat","_numterms",
47566     +                     "_numdocs");
47567     +   _topic_hash.defineDone();
47568     +
47569     +   dcl hiter _it_topic("_topic_hash");
47570     +
47571     +   /* Unless we are scoring, zero out _numterms and _numdocs since we will recalculate based on
47572     +    currently specified cutoffs
47573     +    */
47574     +   %if &scoring= %then %do;
47575     +      rc=_it_topic.first();
47576     +      do while(rc=0);
47577     +         _numterms=0; _numdocs=0;
47578     +         _topic_hash.replace();
47579     +         rc=_it_topic.next();
47580     +         end;
47581     +      %end;
47582     +
47583     +   /* Create term-topic hash table */
47584     +   dcl hash _termtopics(multidata: "Y");
47585     +   _termtopics.defineKey("_termid");
47586     +   _termtopics.defineData("_termid","_topicid", "_weight");
47587     +   _termtopics.defineDone();
47588     +
47589     +   /* Now read in observations, and, for every one whose abs(weight) >= _termCutoff, add
47590     +    it to _termtopics hash table and increment the _numdocs count in the topics hash table
47591     +    */
47592     +   do until(eof);
47593     +      set &termtopds end=eof;
47594     +      if _topic_hash.find() ne 0 then do;
47595     +         put "topic " _topicid " not found in topic data set";
47596     +         end;
47597     +      else if abs(_weight)>= _termCutoff then do;
47598     +
47599     +         /* If we are not scoring, adjust the term counts */
47600     +         %if &scoring= %then %do;
47601     +            _numterms+1;
47602     +            _topic_hash.replace();
47603     +            %end;
47604     +
47605     +         /* Add to _termtopics */
47606     +         _termtopics.add();
47607     +         end;
47608     +      end;
47609     +
47610     +   /* Now create document hash table. This will have one row for each document, and contain the
47611     +      weighted topic values for each of the topics on that one row.
47612     +    */
47613     +   array _topic{&_mintopic:&_maxtopic} &prefix.raw&_mintopic-&prefix.raw&_maxtopic;
47614     +   format &prefix.raw&_mintopic-&prefix.raw&_maxtopic 5.3;
47615     +      %if &scoring ne %then %do;
47616     +         array trunc{&_mintopic:&_maxtopic} &prefix.&_mintopic-&prefix.&_maxtopic;
47617     +         array notrunc{&_mintopic:&_maxtopic} &prefix.raw&_mintopic-&prefix.raw&_maxtopic;
47618     +         /* %put "using superq"; */
47619     +         %do i=&_mintopic %to &_maxtopic;
47620     +            /* %put &_tm_tmp; */
47621     +            %let _tm_tmp=_1_0_%bquote(&&_tmlab&i);
47622     +            label &prefix.&i="&_tm_tmp";
47623     +            %let _tm_tmp=%bquote(&&_tmlab&i);
47624     +            label &prefix.raw&i="&_tm_tmp";
47625     +            %end;
47626     +
47627     +         %end;
47628     +
47629     +   dcl hash _doc_hash(hashexp:16,ordered: 'a');
47630     +   _doc_hash.defineKey("_document_");
47631     +   _doc_hash.defineData("_document_"
47632     +                    %do i=&_mintopic %to &_maxtopic; ,"&prefix.raw&i" %end;
47633     +                    );
47634     +   _doc_hash.defineDone();
47635     +
47636     +   /* Now read in out data set */
47637     +   eof=0;
47638     +   do until(eof);
47639     +      set &outds end=eof;
47640     +
47641     +      /* If we haven't seen this document yet, set all topic weights to zero */
47642     +      if _doc_hash.find() ne 0 then do;
47643     +         do i=&_mintopic to &_maxtopic;
47644     +            _topic{i}=0;
47645     +            end;
47646     +         _doc_hash.add();
47647     +         end;
47648     +
47649     +      /* Check to see if this term has significant weights on any topics */
47650     +      _termid=_termnum_;
47651     +      rc=_termtopics.find();
47652     +      if rc = 0 then do;
47653     +         do while(rc=0);
47654     +            _topic{_topicid}= _topic{_topicid}+_weight*_count_;
47655     +            rc=_termtopics.find_next();
47656     +            end;
47657     +         _doc_hash.replace();
47658     +         end;
47659     +      end;
47660     +   _doc_hash.output(dataset: "docds");
47661     +
47662     +   /****************************************************************************
47663     +    * Following is new code for tmt_doc_score_new.  Should be moved into %tmt_doc_score
47664     +    * for 9.4
47665     +    ****************************************************************************/
47666     +
47667     +   %if &outpos ne and &topicpos ne %then %do;
47668     +   /* Now read in outpos data set */
47669     +   eof=0;
47670     +   do until(eof);
47671     +      set &outpos end=eof;
47672     +      if _doc_hash.find() = 0 then do;
47673     +         /* Check to see if this term and document are both in the topic.  If so, output */
47674     +         _termid=_termnum_;
47675     +         rc=_termtopics.find();
47676     +         do while(rc=0);
47677     +            if _topic_hash.find()=0 then
47678     +               if round( _topic{_topicid},.001) >= _doccutoff then output &topicpos;
47679     +            rc=_termtopics.find_next();
47680     +            end;
47681     +         end;
47682     +               else put 'document ' _document_ ' not found.';
47683     +      end;
47684     +
47685     +
47686     +    %end;
47687     +
47688     +   /****************************************************************************
47689     +    * end of new code
47690     +    ****************************************************************************/
47691     +
47692     +   /* Now we have info in the docds hash table for cumulative weights.  Prepare for output and
47693     +      create numdocs for the topics hash table */
47694     +
47695     +   /* Note: If a docds was passed in, we load it here... this accounts for documents that have no
47696     +      positive topic weights.  Otherwise, we process docds hash table iteratively
47697     +    */
47698     +   %if &docds= %then %do;
47699     +      dcl hiter _doc_it("_doc_hash");
47700     +      rc=_doc_itfirst();
47701     +      do while(rc=0);
47702     +         %end;
47703     +      %else %do;
47704     +         eof=0;
47705     +         do until(eof);
47706     +            set &docds end=eof;
47707     +            rc=_doc_hash.find();
47708     +            %end;
47709     +         if rc ne 0 then
47710     +            do i=&_mintopic to &_maxtopic;
47711     +               _topic{i}=0; %if &scoring ne %then trunc{i} = 0;;
47712     +               end;
47713     +         else do _topicid=&_mintopic to &_maxtopic;
47714     +            /* Round value to nearest thousandth */
47715     +            _topic{_topicid}=round( _topic{_topicid},.001);
47716     +            _topic_hash.find();
47717     +            if _topic{_topicid} >= _doccutoff then do;
47718     +               %if &scoring= %then %do;
47719     +                  _numdocs=_numdocs+1;
47720     +                  _topic_hash.replace();
47721     +                  end;
47722     +                  %end;
47723     +               %else %do;
47724     +                  trunc{_topicid} = 1;
47725     +                  end;
47726     +            else trunc{_topicid} = 0;
47727     +            %end;
47728     +         end;
47729     +         output &newdocds;
47730     +       %if &docds= %then rc=_doc_itnext();;
47731     +       end;
47732     +
47733     +   %if &scoring= %then %do;
47734     +      eof=0;
47735     +      do until(eof);
47736     +         set &topicds end=eof;
47737     +         rc=_topic_hash.find();
47738     +         output &topicds;
47739     +         end;
47740     +      %end;
47741     +   * _termtopics.output(dataset: "&termtopds");
47742     +   run;
47743     +
47744     +/* proc sort data=&termtopds; by _topicid _termid; run; */
47745     +%end;
47746     +%else %if &docds ne %then %do;
47747     +    /* If there were no documents,set the new document table to contain the old documents */
47748     +    data &newdocds;
47749     +        set &docds;
47750     +    run;
47751     +
47752     +%end;
47753     +
47754     +%mend;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tmt_remove_dups.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TMT_REMOVE_DUPS.SOURCE입니다.
47755     +/* ****************************************************************
47756     + * Copyright (C) 2010 by SAS Institute Inc., Cary, NC 27513
47757     + *
47758     + * Name:             tmt_remove_dups.sas
47759     + * Product:          SAS Text Miner
47760     + * Language:         Sas
47761     + * Script:
47762     + *
47763     + * Usage:
47764     + * %tmt_remove_dups(in=tmp , N= , M= , maxc= , t= , prefix=, out=, outN=, outI=);
47765     + *  (see additional parameters in Notes below).
47766     + *
47767     + * Purpose: To remove N-M-maxc topics out of the inputs provided.  The topics that are removed
47768     + *          are the last N-M topics that have the highest correlations with the first M topics .
47769     + *          The first M factors indicate topics that will always persist to output.
47770     +
47771     +*inputs
47772     +    in: input data set with only required variables being &prefix1-&prefixN with rows being
47773     +    the document weight associated with each factor (topic)
47774     +
47775     +    N: total number of factors
47776     +
47777     +    M: number of user factors that will definitely persist to output.  factor1-factorM are
47778     +    taken as user factors unless M=0 (in which case there are no user factors...)
47779     +
47780     +    ndel: number of topics to delete
47781     +
47782     +    prefix: topic variable name prefix, these add a suffix that are 1..N.
47783     +    kpTmp: variable that will cause temporary (work) datasets used internally to be retained
47784     +
47785     + * outputs
47786     +    out: output dataset--will contain factorI variables representing distinct topic;
47787     +    any user topics will persist in factor1-factorM; also, any non-prefix variables will
47788     +    be copied directly to out
47789     +
47790     +    topicds/termtopicds: data sets which will have the _topicid variable updated according to the
47791     +       new index
47792     + *
47793     + * Purpose:
47794     + *
47795     + * History:
47796     + * 18Oct10 Initial Coding
47797     + *
47798     + * Notes:
47799     + *
47800     + * Last Modified By:
47801     + * Last Modified On: Tue Aug 23 15:37:30 2011
47802     + *
47803     + * End
47804     + * ************************************************************** */
47805     +%macro tmt_remove_dups(in=, N=, M=, m1=, ndel=1, prefix=factor,
47806     +                       out=outTops, outN=outN, topicds=,
47807     +                       termtopicds=, kpTmp=);
47808     +  /* %let M1=%eval(&M+1); */
47809     +
47810     +  proc corr noprint outp=tm_tmpcorr data=&in;
47811     +   var &prefix.1-&prefix.&M;
47812     +   with &prefix.&M1-&prefix.&N;
47813     +   run;
47814     +
47815     +  /* proc print data=tm_tmpcorr (where=(_type_="CORR")); run; */
47816     +
47817     +  data _null_;
47818     +   length oldvar_str newvar_str $1000;
47819     +   array corrs{*} &prefix.1-&prefix.&M;
47820     +   dcl hash topcorrs(ordered: "d");
47821     +   topcorrs.defineKey("maxcorr","topicnum");
47822     +   topcorrs.defineData("maxcorr","topicnum");
47823     +   topcorrs.defineDone();
47824     +   topicnum=&M1;
47825     +   do until(eof);
47826     +      set tm_tmpcorr(where=(_type_="CORR")) end=eof;
47827     +      maxcorr=-1;
47828     +      do i=1 to &M;
47829     +         if corrs{i}>maxcorr then maxcorr=corrs{i};
47830     +         end;
47831     +      topcorrs.add();
47832     +      topicnum+1;
47833     +      end;
47834     +   topcorrs.output(dataset: 'corrs');
47835     +   dcl hash remove_vars(ordered: "d");
47836     +   remove_vars.defineKey("topicnum");
47837     +   remove_vars.defineData("maxcorr","topicnum");
47838     +   remove_vars.defineDone();
47839     +
47840     +   dcl hiter corr_it('topcorrs');
47841     +   rc=corr_it.first();
47842     +   do i=1 to &ndel;
47843     +      remove_vars.add();
47844     +      rc=corr_it.next();
47845     +      end;
47846     +   remove_vars.output(dataset: 'rem_corrs');
47847     +
47848     +   oldvar_str="";
47849     +   newvar_str="";
47850     +   dcl hiter var_it('remove_vars');
47851     +   i=&N;
47852     +   rc=var_it.first();
47853     +   do while(rc=0);
47854     +      do while( remove_vars.check(key: i) = 0); i=i-1; /* put i= topicnum=;*/ end;
47855     +      if topicnum<&N-&ndel+1 then do;
47856     +         oldvar_str=ktrim(kleft(put(topicnum,5.))) || " " || oldvar_str;
47857     +         newvar_str=ktrim(kleft(put(i,5.))) || " " || newvar_str;
47858     +         i=i-1;
47859     +         end;
47860     +      else do;
47861     +         oldvar_str=ktrim(kleft(put(topicnum,5.))) || " " || oldvar_str;
47862     +         newvar_str=ktrim(kleft(put(topicnum,5.))) || " " || newvar_str;
47863     +         end;
47864     +
47865     +      rc=var_it.next();
47866     +      end;
47867     +
47868     +   /* oldvar_str contains the topics to be replaced by the topics in the newvar_str */
47869     +   /* put oldvar_str= newvar_str=; */
47870     +
47871     +   call symput('tmt_oldvar_str', oldvar_str);
47872     +   call symput('tmt_newvar_str', newvar_str);
47873     +
47874     +   run;
47875     +
47876     +/* proc print data=corrs; run;  */
47877     +
47878     +
47879     +data &out (drop=&prefix.%eval(&N-&ndel+1)-&prefix.&N);
47880     +   set &in;
47881     +
47882     +   %let index=1;
47883     +   %let source=%scan(&tmt_oldvar_str,&index);
47884     +   %do %while(&source ne);
47885     +      %let dest=%scan(&tmt_newvar_str,&index);
47886     +      &prefix.&source=&prefix.&dest;
47887     +      %let index=%eval(&index+1);
47888     +      %let source=%scan(&tmt_oldvar_str,&index);
47889     +      %end;
47890     +
47891     +data &topicds;
47892     +   set &topicds;
47893     +   %let index=1;
47894     +   %let source=%scan(&tmt_oldvar_str,&index);
47895     +   %if &source ne %then %do;
47896     +      if
47897     +         %do %while(&source ne);
47898     +            %let dest=%scan(&tmt_newvar_str,&index);
47899     +            _topicid=&source then delete;
47900     +            else if _topicid=&dest then _topicid=&source;
47901     +            %let index=%eval(&index+1);
47902     +            %let source=%scan(&tmt_oldvar_str,&index);
47903     +            %if &source ne %then else if;
47904     +               %else %do;
47905     +                  else if _topicid > %eval(&N-&ndel) then delete;
47906     +                  %end;
47907     +            %end;
47908     +      %end;
47909     +   run;
47910     +
47911     +data &termtopicds;
47912     +   set &termtopicds;
47913     +   %let index=1;
47914     +   %let source=%scan(&tmt_oldvar_str,&index);
47915     +   %if &source ne %then %do;
47916     +      if
47917     +         %do %while(&source ne);
47918     +            %let dest=%scan(&tmt_newvar_str,&index);
47919     +            _topicid=&source then delete;
47920     +            else if _topicid=&dest then _topicid=&source;
47921     +            %let index=%eval(&index+1);
47922     +            %let source=%scan(&tmt_oldvar_str,&index);
47923     +            %if &source ne %then else if;
47924     +               %else %do;
47925     +                  else if _topicid > %eval(&N-&ndel) then delete;
47926     +                  %end;
47927     +            %end;
47928     +      %end;
47929     +   run;
47930     +
47931     +%mend;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TRAIN):   * get input data sets ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   set EMWS5.TextTopic2_VariableSet(where=(ROLE='TARGET' and USE in('Y' 'D') and LEVEL ne 'INTERVAL'));
MPRINT(TRAIN):   if _N_=1 then call symput('targetvar', strip(NAME));
MPRINT(TRAIN):   run;
 
NOTE: 0개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_VARIABLESET.에서 읽었습니다.
      WHERE (ROLE='TARGET') and USE in ('D', 'Y') and (LEVEL not = 'INTERVAL');
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
 
 
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   cellwgt="LOG";
MPRINT(TRAIN):   set EMWS5.TextFilter2_tmconfig;
MPRINT(TRAIN):   call symput('cellwgt',cellwgt);
MPRINT(TRAIN):   run;
 
NOTE: 1개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_TMCONFIG.에서 읽었습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
 
 
MPRINT(TRAIN):   proc tmutil data=EMWS5.TextFilter2_tmout key=EMWS5.TextFilter2_terms;
MPRINT(TRAIN):   control init memloc='tmutil_memloc';
 
NOTE: 5643개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_TMOUT.에서 읽었습니다.
NOTE: 2346개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_TERMS_DATA.에서 읽었습니다.
      WHERE KEEP='Y';
NOTE: 2037개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_TERM_STRINGS.에서 읽었습니다.
NOTE: 프로시저 TMUTIL 실행(총 프로세스 시간):
      실행 시간           0.15 초
      cpu 시간            0.17 초
 
 
MPRINT(TRAIN):   proc tmutil;
MPRINT(TRAIN):   control release memloc='tmutil_memloc';
MPRINT(TRAIN):   weight cellwgt=LOG in_weight=EMWS5.TextFilter2_terms_data(keep=key weight);
MPRINT(TRAIN):   output keeponly keyformat=tmscore out=EMWS5.TextTopic2_weightedtmout;
MPRINT(TRAIN):   run;
 
NOTE: 2473개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_TERMS_DATA.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_WEIGHTEDTMOUT은(는) 5620개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 TMUTIL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
 
 
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   drop view EMWS5.TextTopic2_weightedterms;
WARNING: 파일 'EMWS5.TEXTTOPIC2_WEIGHTEDTERMS.VIEW'이(가) 존재하지 않습니다.
WARNING: View EMWS5.TEXTTOPIC2_WEIGHTEDTERMS 을(를) 삭제했습니다.
MPRINT(TRAIN):   create table EMWS5.TextTopic2_weightedterms as select * from EMWS5.TextFilter2_terms where _ispar ne '.' order by key;
NOTE: Table EMWS5.TEXTTOPIC2_WEIGHTEDTERMS created, with 1721 rows and 13 columns.
 
MPRINT(TRAIN):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.04 초
 
 
MPRINT(ROW_PIVOT_NORMALIZE):   proc summary nway data=EMWS5.TextTopic2_weightedtmout;
MPRINT(ROW_PIVOT_NORMALIZE):   class _document_;
MPRINT(ROW_PIVOT_NORMALIZE):   var _count_;
MPRINT(ROW_PIVOT_NORMALIZE):   output out=_sqrowvals uss=;
MPRINT(ROW_PIVOT_NORMALIZE):   run;
 
NOTE: 5620개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_WEIGHTEDTMOUT.에서 읽었습니다.
NOTE: 데이터셋 WORK._SQROWVALS은(는) 487개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.06 초
 
 
MPRINT(ROW_PIVOT_NORMALIZE):   proc sql noprint;
MPRINT(ROW_PIVOT_NORMALIZE):   select mean(sqrt(_count_)) into :meaneuclen from _sqrowvals;
MPRINT(ROW_PIVOT_NORMALIZE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
 
 
MPRINT(ROW_PIVOT_NORMALIZE):   *populate the config file with the mean value;
MPRINT(ROW_PIVOT_NORMALIZE):   data EMWS5.TextFilter2_tmconfig;
MPRINT(ROW_PIVOT_NORMALIZE):   set EMWS5.TextFilter2_tmconfig;
MPRINT(ROW_PIVOT_NORMALIZE):   TextTopic2_meaneuclen= symget('meaneuclen');
MPRINT(ROW_PIVOT_NORMALIZE):   run;
 
NOTE: 1개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_TMCONFIG.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTFILTER2_TMCONFIG은(는) 1개의 관측값과 30개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(ROW_PIVOT_NORMALIZE):   data _sqrowvals;
MPRINT(ROW_PIVOT_NORMALIZE):   set _sqrowvals;
MPRINT(ROW_PIVOT_NORMALIZE):   meaneuclen=symget('meaneuclen');
MPRINT(ROW_PIVOT_NORMALIZE):   divisor = meaneuclen + (sqrt(_count_) - meaneuclen)*0.7;
MPRINT(ROW_PIVOT_NORMALIZE):   drop meaneuclen;
MPRINT(ROW_PIVOT_NORMALIZE):   run;
 
NOTE: 다음의 위치에서 문자형 값이 숫자형 값으로 변환되었습니다. (행):(칼럼)
      53:109   53:138
NOTE: 487개의 관측값을 데이터셋 WORK._SQROWVALS.에서 읽었습니다.
NOTE: 데이터셋 WORK._SQROWVALS은(는) 487개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
 
 
MPRINT(ROW_PIVOT_NORMALIZE):   proc sql noprint;
MPRINT(ROW_PIVOT_NORMALIZE):   create table EMWS5.TextTopic2_tmout_normalized as select a._document_,a._termnum_,a._count_ / divisor as _count_ from EMWS5.TextTopic2_weightedtmout as a,_sqrowvals as b where a._document_=b._document_;
NOTE: Table EMWS5.TEXTTOPIC2_TMOUT_NORMALIZED created, with 5620 rows and 3 columns.
 
MPRINT(ROW_PIVOT_NORMALIZE):   drop table _sqrowvals;
NOTE: 테이블 WORK._SQROWVALS 을(를) 삭제했습니다.
MPRINT(ROW_PIVOT_NORMALIZE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.03 초
 
 
MPRINT(ROW_PIVOT_NORMALIZE):   proc summary nway data=EMWS5.TextTopic2_tmout_normalized;
MPRINT(ROW_PIVOT_NORMALIZE):   class _termnum_;
MPRINT(ROW_PIVOT_NORMALIZE):   var _count_;
MPRINT(ROW_PIVOT_NORMALIZE):   output out=EMWS5.TextTopic2_term_sums mean=;
MPRINT(ROW_PIVOT_NORMALIZE):   run;
 
NOTE: 5620개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TMOUT_NORMALIZED.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TERM_SUMS은(는) 1721개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.07 초
      cpu 시간            0.06 초
 
 
MPRINT(TRAIN):  ;
MPRINT(TMT_TOPIFY):   data _tmptop (keep=_topic_ _term_ _role_ _weight_);
MPRINT(TMT_TOPIFY):   set EMWS5.TextTopic2_initTopics;
MPRINT(TMT_TOPIFY):   _term_=klowcase(_term_);
MPRINT(TMT_TOPIFY):   if propcase(_role_) in ("Adj","Adv","Aux","Conj","Det","Noun","Num","Part", "Prep", "Pron","Prop", "Verb") then _role_=propcase(_role_);
MPRINT(TMT_TOPIFY):   if (_term_ ne ' ' or _role_ ne ' ') and _weight_ ne 0 and _weight_ ne . then output _tmpTop;
MPRINT(TMT_TOPIFY):   run;
 
NOTE: 0개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_INITTOPICS.에서 읽었습니다.
NOTE: 데이터셋 WORK._TMPTOP은(는) 0개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
 
 
MPRINT(TMT_TOPIFY):   proc summary nway data=EMWS5.TextTopic2_topic_Cutoffs;
MPRINT(TMT_TOPIFY):   class _name;
MPRINT(TMT_TOPIFY):   var _docCutoff _termCutoff;
MPRINT(TMT_TOPIFY):   output out=EMWS5.TextTopic2_topic_Cutoffs mean=;
 
NOTE: 데이터셋 'EMWS5.TEXTTOPIC2_TOPIC_CUTOFFS'에 관측값이 없습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TOPIC_CUTOFFS은(는) 0개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
 
 
MPRINT(TMT_TOPIFY):   proc sql noprint;
MPRINT(TMT_TOPIFY):   create table _tmptop as select a.*, b._doccutoff, b._termcutoff from _tmptop as a left join EMWS5.TextTopic2_topic_Cutoffs as b on upcase(a._topic_)=upcase(b._name);
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table WORK._TMPTOP created, with 0 rows and 6 columns.
 
MPRINT(TMT_TOPIFY):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.07 초
      cpu 시간            0.07 초
 
 
MPRINT(TMT_TOPIFY):   proc sql noprint;
MPRINT(TMT_TOPIFY):   create table _termtop1 as select a._topic_, case when b.parent=. then b.key else b.parent end as _termid, a._weight_ as _weight, a._doccutoff, a._termcutoff from EMWS5.TextTopic2_weightedterms as b,_tmpTop as a where (b.key ne
b.parent) and (a._term_= ' ' and a._role_=b.role);
NOTE: Table WORK._TERMTOP1 created, with 0 rows and 5 columns.
 
MPRINT(TMT_TOPIFY):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TMT_TOPIFY):   proc sql noprint;
MPRINT(TMT_TOPIFY):   create table _termtop2 as select a._topic_, case when b.parent=. then b.key else b.parent end as _termid, a._weight_ as _weight, a._doccutoff, a._termcutoff from EMWS5.TextTopic2_weightedterms as b,_tmpTop as a where (b.key ne
b.parent) and (a._term_ ne ' ' and a._role_ = ' ' and a._term_=b.term);
NOTE: Table WORK._TERMTOP2 created, with 0 rows and 5 columns.
 
MPRINT(TMT_TOPIFY):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TMT_TOPIFY):   proc sql noprint;
MPRINT(TMT_TOPIFY):   create table _termtop3 as select a._topic_, case when b.parent=. then b.key else b.parent end as _termid, a._weight_ as _weight, a._doccutoff, a._termcutoff from EMWS5.TextTopic2_weightedterms as b,_tmpTop as a where (b.key ne
b.parent) and (a._term_ ne ' ' and a._role_ ne ' ' and a._term_=b.term and (a._role_=b.role or b.role=' '));
NOTE: Table WORK._TERMTOP3 created, with 0 rows and 5 columns.
 
MPRINT(TMT_TOPIFY):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TMT_TOPIFY):   data EMWS5.TextTopic2_termtopics;
MPRINT(TMT_TOPIFY):   set _termtop1 _termtop2 _termtop3;
MPRINT(TMT_TOPIFY):   run;
 
NOTE: 0개의 관측값을 데이터셋 WORK._TERMTOP1.에서 읽었습니다.
NOTE: 0개의 관측값을 데이터셋 WORK._TERMTOP2.에서 읽었습니다.
NOTE: 0개의 관측값을 데이터셋 WORK._TERMTOP3.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TERMTOPICS은(는) 0개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TMT_TOPIFY):   proc sort data=EMWS5.TextTopic2_termtopics;
MPRINT(TMT_TOPIFY):   by _topic_;
 
NOTE: 입력 데이터셋이 비어 있습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TERMTOPICS은(는) 0개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
 
 
MPRINT(TMT_TOPIFY):   data EMWS5.TextTopic2_topics (keep=_topicid _name _displayCat _cat _docCutoff _termCutoff _numterms _numdocs) EMWS5.TextTopic2_termtopics (keep=_topicid _termid _weight);
MPRINT(TMT_TOPIFY):   retain _topicid;
MPRINT(TMT_TOPIFY):   format _docCutoff _termCutoff _weight 5.3;
MPRINT(TMT_TOPIFY):   set EMWS5.TextTopic2_termtopics;
MPRINT(TMT_TOPIFY):   by _topic_;
MPRINT(TMT_TOPIFY):   if _n_=1 then _topicid=1;
MPRINT(TMT_TOPIFY):   output EMWS5.TextTopic2_termtopics;
MPRINT(TMT_TOPIFY):   if last._topic_ then do;
MPRINT(TMT_TOPIFY):   _name=_topic_;
MPRINT(TMT_TOPIFY):   _cat="User";
MPRINT(TMT_TOPIFY):   _displayCat="사용자";
MPRINT(TMT_TOPIFY):   if _doccutoff=. then _docCutoff=0.001;
MPRINT(TMT_TOPIFY):   if _termcutoff=. then _termcutoff=0.001;
MPRINT(TMT_TOPIFY):   _numterms=.;
MPRINT(TMT_TOPIFY):   _numdocs=.;
MPRINT(TMT_TOPIFY):   output EMWS5.TextTopic2_topics;
MPRINT(TMT_TOPIFY):   _topicid=_topicid+1;
MPRINT(TMT_TOPIFY):   end;
MPRINT(TMT_TOPIFY):   run;
 
NOTE: 0개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TERMTOPICS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TOPICS은(는) 0개의 관측값과 8개의 변수를 가지고 있습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TERMTOPICS은(는) 0개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.07 초
      cpu 시간            0.06 초
 
 
MPRINT(TMT_TOPIFY):   proc summary nway data=EMWS5.TextTopic2_termtopics;
MPRINT(TMT_TOPIFY):   class _topicid _termid;
MPRINT(TMT_TOPIFY):   var _weight;
MPRINT(TMT_TOPIFY):   output out=EMWS5.TextTopic2_termtopics mean=;
MPRINT(TMT_TOPIFY):   run;
 
NOTE: 데이터셋 'EMWS5.TEXTTOPIC2_TERMTOPICS'에 관측값이 없습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TERMTOPICS은(는) 0개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.03 초
 
 
MPRINT(TMT_TOPIFY):   data EMWS5.TextTopic2_termtopics;
MPRINT(TMT_TOPIFY):   set EMWS5.TextTopic2_termtopics(drop=_type_ _freq_);
MPRINT(TMT_TOPIFY):   run;
 
NOTE: 0개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TERMTOPICS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TERMTOPICS은(는) 0개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   select count(*) into :ntopics from EMWS5.TextTopic2_topics;
MPRINT(TRAIN):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
 
 
MPRINT(TRAIN):   *check for eliminated init topics;
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   select count(distinct _topic_) into :user_ntopics from EMWS5.TextTopic2_initTopics;
MPRINT(TRAIN):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TMT_DOC_SCORE):   proc sort data=EMWS5.TextTopic2_topics nodupkey;
MPRINT(TMT_DOC_SCORE):   by _topicid;
 
NOTE: 입력 데이터셋이 비어 있습니다.
NOTE: 중복 키값을 가지고 있는 0개의 관측값이 삭제되었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TOPICS은(는) 0개의 관측값과 8개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TMT_DOC_SCORE):   proc sort data=EMWS5.TextTopic2_termtopics nodupkey;
MPRINT(TMT_DOC_SCORE):   by _termid _topicid;
MPRINT(TMT_DOC_SCORE):   run;
 
NOTE: 입력 데이터셋이 비어 있습니다.
NOTE: 중복 키값을 가지고 있는 0개의 관측값이 삭제되었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TERMTOPICS은(는) 0개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TMT_DOC_SCORE):   proc sql noprint;
MPRINT(TMT_DOC_SCORE):   select max(_topicid), min(_topicid) into :_maxtopic, :_mintopic from EMWS5.TextTopic2_topics;
MPRINT(TMT_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
 
 
MPRINT(TMT_DOC_SCORE):   data _userdocs;
MPRINT(TMT_DOC_SCORE):   set EMWS5.TextFilter2_TRAIN;
MPRINT(TMT_DOC_SCORE):   run;
 
NOTE: 499개의 관측값을 데이터셋 EMWS5.TEXTPARSING2_TRAIN.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_DOC_IDS.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_TRAIN.에서 읽었습니다.
NOTE: 데이터셋 WORK._USERDOCS은(는) 499개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.12 초
      cpu 시간            0.12 초
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS5.TextTopic2_docDs;
MPRINT(TRAIN):   set _userdocs;
MPRINT(TRAIN):   run;
 
NOTE: 499개의 관측값을 데이터셋 WORK._USERDOCS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_DOCDS은(는) 499개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tmt_multi_terms.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TMT_MULTI_TERMS.SOURCE입니다.
47932     +/* ****************************************************************
47933     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
47934     + *
47935     + * Name:             tmt_multi_terms.sas
47936     + * Support:          cox  James A. Cox
47937     + * Product:          SAS Text Miner
47938     + * Language:         Sas
47939     + * Script:
47940     + *
47941     + * Usage:
47942     + *
47943     + * Purpose:          Computes an svd of a term by document matrix and
47944     + *                   then rotates the U matrix corresponding to term wgts.
47945     +
47946     + *
47947     + * History:
47948     + * 30Apr09 Initial Coding [cox]
47949     + *
47950     + * Notes:
47951     + *
47952     + * Last Modified By:
47953     + * Last Modified On: Thu Jun 05 16:00:11 2014
47954     + *
47955     + * End
47956     + * ************************************************************** */
47957     +
47958     +%macro tmt_multi_terms(outds=, termds=, num_terms=, num_topics=20,
47959     +                       rotation=varimax,scaleword=,normword=,termtopicds=,
47960     +                       startnum=1,termcutoff=,topicds=multtopics,
47961     +                       prefix=_topic, tmptable=out_u, doccutoff=.1,
47962     +                       termcutoff_multiple=1,rotate_matrix=_termmrg,
47963     +                       svdu=,svd_index=index);
47964     +%if &svdu eq %then %do;
47965     +/*make sure requested topics do not exceed matrix dimensions or spsvd will return an error*/
47966     +%let k_margin=15;
47967     +%let minpertopic=5;
47968     +
47969     +proc sql noprint;
47970     +select count(distinct _termnum_), count(distinct _document_)
47971     +        into :n_termnum_, :n_document_ from &outds;
47972     +quit;
47973     +%if &n_document_ <= &n_termnum_ %then %let k_cutoff=%ktrim(&n_document_);
47974     +%else %let k_cutoff=%ktrim(&n_termnum_);
47975     +
47976     +/* Check for too few documents and two few terms for topic discovery */
47977     +
47978     +%if %eval(&n_termnum_) < &k_margin %then %do;
47979     +   %let EMEXCEPTIONSTRING = EMTOOL.TOPIC_TERMS_SMALL,&n_termnum_;
47980     +   %goto end_multi_terms;
47981     +%end;
47982     +
47983     +%if %eval(&n_document_) < &k_margin %then %do;
47984     +   %let EMEXCEPTIONSTRING = EMTOOL.TOPIC_DATA_SMALL,&n_document_;
47985     +   %goto end_multi_terms;
47986     +%end;
47987     +
47988     +/* Now check to see if data requires fewer topics to be specified than requested.
47989     +     Must be 5 documents and terms per topic */
47990     +%let max_topics= %eval(&k_cutoff/&minpertopic);
47991     +
47992     +
47993     +%if &num_topics>&max_topics %then %do;
47994     +   %put %sysfunc(SASMSG(sashelp.tmine,EMTOOL.TOPIC_DATA_SMALL_WARN,NOQUOTE,&n_document_,&n_termnum_,&max_topics));
47995     +   %let num_topics=&max_topics;
47996     +   %end;
47997     +
47998     +
47999     +proc sort data=&outds; by _termnum_ _document_;
48000     +proc spsvd data=&outds k=&num_topics;
48001     +   row _termnum_;
48002     +   col _document_;
48003     +   entry _count_;
48004     +   output u=&tmptable
48005     +   %if &scaleword ne %then scaleword;
48006     +   %if &normword ne %then normword;
48007     +      ;
48008     +   run;
48009     +
48010     +/*try sampling if out of memory occurred*/
48011     +%if(&syscc eq 1111) %then %do;
48012     +    %let syscc=0; /*reset syscc*/
48013     +    proc spsvd data=&outds k=&num_topics;
48014     +        row _termnum_;
48015     +        col _document_;
48016     +        entry _count_;
48017     +        output v = _sampV u=&tmptable;
48018     +        sample allow;
48019     +    run;
48020     +%end;
48021     +
48022     +%if &syscc > 4 %then %do;
48023     +%let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
48024     +%goto end_multi_terms;
48025     +%end;
48026     +
48027     +%end;
48028     + %else %do;
48029     +   %let tmptable=&svdu;
48030     +    %put tmptable= &tmptable;
48031     +    %end;
48032     +
48033     +proc transpose data=&tmptable (drop=&svd_index) out=_factors(drop=_NAME_);
48034     +   run;
48035     +
48036     +/*get actual number of topics produced*/
48037     +proc sql noprint; select count(*) into :num_topics from _factors; quit;
48038     +%let num_topics=%ktrim(&num_topics);
48039     +
48040     +data _factors(type=factor);
48041     +   set _factors;
48042     +   _TYPE_='PATTERN';
48043     +   _NAME_='factor'|| kleft(put(_N_,4.));
48044     +   run;
48045     +
48046     +proc factor noprint data=_factors method=pattern n=&num_topics
48047     +      rotate=&rotation
48048     +      nocorr outstat=_factrot;
48049     +   run;
48050     +
48051     +/*
48052     +data _factrot (drop=num);
48053     +   length _name_ $15;
48054     +   set _factrot;
48055     +   if _type_='PATTERN' then do;
48056     +      _name_=ktrim(_name_)|| "    ";
48057     +      num=input(substr(_name_,7),4.);
48058     +      _name_="&prefix"|| ktrim(kleft(put(num+&startnum-1,4.)));
48059     +      output;
48060     +      end;
48061     +   run;
48062     + */
48063     +proc transpose data=_factrot(where=(_type_='PATTERN')) out=&rotate_matrix; run;
48064     +      /* proc corr data=&rotate_matrix; run; */
48065     +/*
48066     +proc summary data=&rotate_matrix;
48067     +    var factor1-factor&num_topics;
48068     +   output out=_tmpsums mean=;
48069     +proc print data=_tmpsums; run;
48070     +*/
48071     +proc sort data=&termds(where=(_ispar ne '.')) out=_sortterm; by key;
48072     +data &rotate_matrix;
48073     +   merge _sortterm &rotate_matrix;
48074     +   run;
48075     +/* proc print data=&rotate_matrix(obs=50); id key; var factor1-factor10; run; */
48076     +
48077     +data &termtopicds (keep=_topicid _termid _weight term);
48078     +   array topics{*} factor1-factor&num_topics;
48079     +   set &rotate_matrix;
48080     +   _termid=key;
48081     +   if _ispar='+' then term='+'||term;
48082     +   do i=1 to &num_topics;
48083     +      _topicid=i+&startnum-1;
48084     +      /* Round off weight to be exact in third decimal place */
48085     +      _weight=round(topics{i},0.001);
48086     +      output;
48087     +      end;
48088     +   run;
48089     +
48090     +/* Create temporary view that includes abs_weight */
48091     +proc sql noprint;
48092     +   create view _tmp_top_weights as select *, abs(_weight) as abs_weight
48093     +      from &termtopicds;
48094     +      quit;
48095     +
48096     +proc summary nway data=_tmp_top_weights;
48097     +   class _topicid;
48098     +   var _weight abs_weight;
48099     +   output out=_termtmpsums
48100     +      mean(abs_weight)=abs_weight_mean
48101     +      std(abs_weight)=abs_weight_std
48102     +      idgroup( max(_weight) out[5] (term)=)
48103     +      /autolabel autoname;
48104     +   run;
48105     +data &topicds(keep=_topicid _name _cat _displayCat /* _apply */ _numterms _numdocs
48106     +               _docCutoff _termCutoff);
48107     +   set _termtmpsums;
48108     +   length _name $100;
48109     +   _name=ktrim(term_1)||','||ktrim(term_2)||','||ktrim(term_3)||','||
48110     +      ktrim(term_4)||','||ktrim(term_5);
48111     +   _cat="Mult";
48112     +   _displayCat="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicmult_value, NOQUOTE))";
48113     +    /*  _apply="Y"; */
48114     +   /* Change to use mean plus one standard deviation */
48115     +   /* _termCutoff=max(0.001, min(_weight_p99,max(_weight_Max*&termcutoff,_weight_P95))); */
48116     +   _termcutoff= %if &termCutoff ne %then &termcutoff;
48117     +             %else round(abs_weight_mean+abs_weight_std*&termcutoff_multiple,0.001);
48118     +   ;
48119     +   _docCutoff=.;
48120     +   _numterms=.;
48121     +   _numdocs=.;
48122     +
48123     +   run;
48124     +data &termtopicds;
48125     +   set &termtopicds(drop=term);
48126     +   run;
48127     +
48128     +/*post processing: eliminate topics with no terms above the cutoff*/
48129     +proc sql;
48130     +create table kpTops as
48131     +    select distinct a._topicid as _topicid0 from &topicds a, &termtopicds b
48132     +    where a._topicid=b._topicid and abs(b._weight) >= a._termcutoff and b._termid ne .;
48133     +
48134     +alter table kpTops add _topicid num;
48135     +update kpTops set _topicid=monotonic()+&startnum-1;
48136     +
48137     +create table &topicds(drop=_topicid0) as
48138     +    select b._topicid, a.* from &topicds(rename=(_topicid=_topicid0)) a, kpTops b where a._topicid0=b._topicid0;
48139     +
48140     +create table &termtopicds(drop=_topicid0) as
48141     +    select a._termid, b._topicid, a._weight from &termtopicds(rename=(_topicid=_topicid0)) a, kpTops b where a._topicid0=b._topicid0;
48142     +
48143     +drop table kpTops;
48144     +quit;
48145     +
48146     +
48147     + /*    filename temp catalog 'sashelp.emtxtext.svd_rotate.source';
48148     +    %include temp;
48149     +
48150     +    %svd_rotate(termds=&termds,
48151     +                outds=&outds, weight=,
48152     +                out_u=work.out_u, out_term=work.rotsvdmrg,
48153     +                nfactors=&num_terms, rotation=&topic_method,
48154     +                scaleword=,normword=);
48155     +
48156     +*/
48157     +
48158     +%end_multi_terms:
48159     +
48160     +%mend;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   select count(*) into: _numrepterms from EMWS5.TextTopic2_weightedterms;
MPRINT(TRAIN):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
 
 
MPRINT(TRAIN):  ;
MPRINT(TMT_MULTI_TERMS):   proc sql noprint;
MPRINT(TMT_MULTI_TERMS):   select count(distinct _termnum_), count(distinct _document_) into :n_termnum_, :n_document_ from EMWS5.TextTopic2_tmout_normalized;
MPRINT(TMT_MULTI_TERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
 
 
MPRINT(TMT_MULTI_TERMS):   proc sort data=EMWS5.TextTopic2_tmout_normalized;
MPRINT(TMT_MULTI_TERMS):   by _termnum_ _document_;
 
NOTE: 5620개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TMOUT_NORMALIZED.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TMOUT_NORMALIZED은(는) 5620개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TMT_MULTI_TERMS):   proc spsvd data=EMWS5.TextTopic2_tmout_normalized k=25;
MPRINT(TMT_MULTI_TERMS):   row _termnum_;
MPRINT(TMT_MULTI_TERMS):   col _document_;
MPRINT(TMT_MULTI_TERMS):   entry _count_;
MPRINT(TMT_MULTI_TERMS):   output u=EMWS5.TextTopic2_out_u ;
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: P has been set to 25.
NOTE: Restart 1, Converged 8
NOTE: Restart 2, Converged 14
NOTE: Restart 3, Converged 22
NOTE: Singular values have converged.  Creating data sets.
NOTE: Restarted 3 times.
NOTE: 5620개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TMOUT_NORMALIZED.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_OUT_U은(는) 1721개의 관측값과 26개의 변수를 가지고 있습니다.
NOTE: 프로시저 SPSVD 실행(총 프로세스 시간):
      실행 시간           0.07 초
      cpu 시간            0.07 초
 
 
MPRINT(TMT_MULTI_TERMS):   proc transpose data=EMWS5.TextTopic2_out_u (drop=index) out=_factors(drop=_NAME_);
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: 1721개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_OUT_U.에서 읽었습니다.
NOTE: 데이터셋 WORK._FACTORS은(는) 25개의 관측값과 1721개의 변수를 가지고 있습니다.
NOTE: 프로시저 TRANSPOSE 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.06 초
 
 
MPRINT(TMT_MULTI_TERMS):   proc sql noprint;
MPRINT(TMT_MULTI_TERMS):   select count(*) into :num_topics from _factors;
MPRINT(TMT_MULTI_TERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
 
 
MPRINT(TMT_MULTI_TERMS):   data _factors(type=factor);
MPRINT(TMT_MULTI_TERMS):   set _factors;
MPRINT(TMT_MULTI_TERMS):   _TYPE_='PATTERN';
MPRINT(TMT_MULTI_TERMS):   _NAME_='factor'|| kleft(put(_N_,4.));
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: 25개의 관측값을 데이터셋 WORK._FACTORS.에서 읽었습니다.
NOTE: 데이터셋 WORK._FACTORS은(는) 25개의 관측값과 1723개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
 
 
MPRINT(TMT_MULTI_TERMS):   proc factor noprint data=_factors method=pattern n=25 rotate=varimax nocorr outstat=_factrot;
MPRINT(TMT_MULTI_TERMS):   run;
 
WARNING: The data set WORK._FACTORS does not indicate how many observations were used to compute the  matrix. The number of observations has been set to 10000. Statistics that depend on the number of observations (such as p-values) are not interpretable.
NOTE: 데이터셋 WORK._FACTROT은(는) 54개의 관측값과 1723개의 변수를 가지고 있습니다.
NOTE: 프로시저 FACTOR 실행(총 프로세스 시간):
      실행 시간           2.46 초
      cpu 시간            2.43 초
 
 
MPRINT(TMT_MULTI_TERMS):   proc transpose data=_factrot(where=(_type_='PATTERN')) out=_termmrg;
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: 25개의 관측값을 데이터셋 WORK._FACTROT.에서 읽었습니다.
      WHERE _type_='PATTERN';
NOTE: 데이터셋 WORK._TERMMRG은(는) 1721개의 관측값과 26개의 변수를 가지고 있습니다.
NOTE: 프로시저 TRANSPOSE 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.06 초
 
 
MPRINT(TMT_MULTI_TERMS):   proc sort data=EMWS5.TextTopic2_weightedterms(where=(_ispar ne '.')) out=_sortterm;
MPRINT(TMT_MULTI_TERMS):   by key;
NOTE: 입력 데이터셋이 이미 정렬되어 있습니다; 출력 데이터셋에 복사되었습니다.
NOTE: 1721개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_WEIGHTEDTERMS.에서 읽었습니다.
      WHERE _ispar not = '.';
NOTE: 데이터셋 WORK._SORTTERM은(는) 1721개의 관측값과 13개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.00 초
 
 
MPRINT(TMT_MULTI_TERMS):   data _termmrg;
MPRINT(TMT_MULTI_TERMS):   merge _sortterm _termmrg;
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: 1721개의 관측값을 데이터셋 WORK._SORTTERM.에서 읽었습니다.
NOTE: 1721개의 관측값을 데이터셋 WORK._TERMMRG.에서 읽었습니다.
NOTE: 데이터셋 WORK._TERMMRG은(는) 1721개의 관측값과 39개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.04 초
 
 
MPRINT(TMT_MULTI_TERMS):   data mult_termtop (keep=_topicid _termid _weight term);
MPRINT(TMT_MULTI_TERMS):   array topics{*} factor1-factor25;
MPRINT(TMT_MULTI_TERMS):   set _termmrg;
MPRINT(TMT_MULTI_TERMS):   _termid=key;
MPRINT(TMT_MULTI_TERMS):   if _ispar='+' then term='+'||term;
MPRINT(TMT_MULTI_TERMS):   do i=1 to 25;
MPRINT(TMT_MULTI_TERMS):   _topicid=i+1-1;
MPRINT(TMT_MULTI_TERMS):   _weight=round(topics{i},0.001);
MPRINT(TMT_MULTI_TERMS):   output;
MPRINT(TMT_MULTI_TERMS):   end;
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: 1721개의 관측값을 데이터셋 WORK._TERMMRG.에서 읽었습니다.
NOTE: 데이터셋 WORK.MULT_TERMTOP은(는) 43025개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.09 초
      cpu 시간            0.07 초
 
 
MPRINT(TMT_MULTI_TERMS):   proc sql noprint;
MPRINT(TMT_MULTI_TERMS):   create view _tmp_top_weights as select *, abs(_weight) as abs_weight from mult_termtop;
NOTE: SQL view WORK._TMP_TOP_WEIGHTS has been defined.
MPRINT(TMT_MULTI_TERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
 
 
MPRINT(TMT_MULTI_TERMS):   proc summary nway data=_tmp_top_weights;
MPRINT(TMT_MULTI_TERMS):   class _topicid;
MPRINT(TMT_MULTI_TERMS):   var _weight abs_weight;
MPRINT(TMT_MULTI_TERMS):   output out=_termtmpsums mean(abs_weight)=abs_weight_mean std(abs_weight)=abs_weight_std idgroup( max(_weight) out[5] (term)=) /autolabel autoname;
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: 43025개의 관측값을 데이터셋 WORK.MULT_TERMTOP.에서 읽었습니다.
NOTE: 43025개의 관측값을 데이터셋 WORK._TMP_TOP_WEIGHTS.에서 읽었습니다.
NOTE: 데이터셋 WORK._TERMTMPSUMS은(는) 25개의 관측값과 10개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.11 초
      cpu 시간            0.17 초
 
 
MPRINT(TMT_MULTI_TERMS):   data mult_topics(keep=_topicid _name _cat _displayCat _numterms _numdocs _docCutoff _termCutoff);
MPRINT(TMT_MULTI_TERMS):   set _termtmpsums;
MPRINT(TMT_MULTI_TERMS):   length _name $100;
MPRINT(TMT_MULTI_TERMS):   _name=ktrim(term_1)||','||ktrim(term_2)||','||ktrim(term_3)||','|| ktrim(term_4)||','||ktrim(term_5);
MPRINT(TMT_MULTI_TERMS):   _cat="Mult";
MPRINT(TMT_MULTI_TERMS):   _displayCat="rpt_text_topicmult_value";
MPRINT(TMT_MULTI_TERMS):   _termcutoff= round(abs_weight_mean+abs_weight_std*1,0.001) ;
MPRINT(TMT_MULTI_TERMS):   _docCutoff=.;
MPRINT(TMT_MULTI_TERMS):   _numterms=.;
MPRINT(TMT_MULTI_TERMS):   _numdocs=.;
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: 25개의 관측값을 데이터셋 WORK._TERMTMPSUMS.에서 읽었습니다.
NOTE: 데이터셋 WORK.MULT_TOPICS은(는) 25개의 관측값과 8개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
 
 
MPRINT(TMT_MULTI_TERMS):   data mult_termtop;
MPRINT(TMT_MULTI_TERMS):   set mult_termtop(drop=term);
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: 43025개의 관측값을 데이터셋 WORK.MULT_TERMTOP.에서 읽었습니다.
NOTE: 데이터셋 WORK.MULT_TERMTOP은(는) 43025개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
 
 
MPRINT(TMT_MULTI_TERMS):   proc sql;
MPRINT(TMT_MULTI_TERMS):   create table kpTops as select distinct a._topicid as _topicid0 from mult_topics a, mult_termtop b where a._topicid=b._topicid and abs(b._weight) >= a._termcutoff and b._termid ne .;
NOTE: Table WORK.KPTOPS created, with 25 rows and 1 columns.
 
MPRINT(TMT_MULTI_TERMS):   alter table kpTops add _topicid num;
NOTE: Table WORK.KPTOPS has been modified, with 2 columns.
MPRINT(TMT_MULTI_TERMS):   update kpTops set _topicid=monotonic()+1-1;
NOTE: 25 rows were updated in WORK.KPTOPS.
 
MPRINT(TMT_MULTI_TERMS):   create table mult_topics(drop=_topicid0) as select b._topicid, a.* from mult_topics(rename=(_topicid=_topicid0)) a, kpTops b where a._topicid0=b._topicid0;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table WORK.MULT_TOPICS created, with 25 rows and 8 columns.
 
MPRINT(TMT_MULTI_TERMS):   create table mult_termtop(drop=_topicid0) as select a._termid, b._topicid, a._weight from mult_termtop(rename=(_topicid=_topicid0)) a, kpTops b where a._topicid0=b._topicid0;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: DROP, KEEP 또는 RENAME의 변수 _topicid0은(는) 참조되지 않습니다.
NOTE: Table WORK.MULT_TERMTOP created, with 43025 rows and 3 columns.
 
MPRINT(TMT_MULTI_TERMS):   drop table kpTops;
NOTE: 테이블 WORK.KPTOPS 을(를) 삭제했습니다.
MPRINT(TMT_MULTI_TERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.23 초
      cpu 시간            0.23 초
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   select count(*) into :tmt_act_multi from mult_topics;
MPRINT(TRAIN):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
 
 
MPRINT(TMT_DOC_SCORE):   proc sort data=mult_topics nodupkey;
MPRINT(TMT_DOC_SCORE):   by _topicid;
NOTE: 25개의 관측값을 데이터셋 WORK.MULT_TOPICS.에서 읽었습니다.
NOTE: 중복 키값을 가지고 있는 0개의 관측값이 삭제되었습니다.
NOTE: 데이터셋 WORK.MULT_TOPICS은(는) 25개의 관측값과 8개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TMT_DOC_SCORE):   proc sort data=mult_termtop nodupkey;
MPRINT(TMT_DOC_SCORE):   by _termid _topicid;
MPRINT(TMT_DOC_SCORE):   run;
 
NOTE: 43025개의 관측값을 데이터셋 WORK.MULT_TERMTOP.에서 읽었습니다.
NOTE: 중복 키값을 가지고 있는 0개의 관측값이 삭제되었습니다.
NOTE: 데이터셋 WORK.MULT_TERMTOP은(는) 43025개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.06 초
 
 
MPRINT(TMT_DOC_SCORE):   proc sql noprint;
MPRINT(TMT_DOC_SCORE):   select max(_topicid), min(_topicid) into :_maxtopic, :_mintopic from mult_topics;
MPRINT(TMT_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
 
 
MPRINT(TMT_DOC_SCORE):   proc sql noprint;
MPRINT(TMT_DOC_SCORE):   select _name into :_tmlab1 - :_tmlab25 from mult_topics;
MPRINT(TMT_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
 
 
MPRINT(TMT_DOC_SCORE):   data multdocs (drop=_topicid _doccutoff _termCutoff _name _cat _displaycat _numterms _numdocs _weight _termid rc _termnum_ i _count_) mult_topics (keep=_topicid _name _cat _displaycat _numterms _numdocs _docCutoff _termCutoff) ;
MPRINT(TMT_DOC_SCORE):   if 0 then set mult_topics mult_termtop;
MPRINT(TMT_DOC_SCORE):   dcl hash _topic_hash(dataset: "mult_topics", ordered: "a");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineKey("_topicid");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineData("_topicid","_docCutoff","_termCutoff","_name","_cat","_numterms", "_numdocs");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineDone();
MPRINT(TMT_DOC_SCORE):   dcl hiter _it_topic("_topic_hash");
MPRINT(TMT_DOC_SCORE):   rc=_it_topic.first();
MPRINT(TMT_DOC_SCORE):   do while(rc=0);
MPRINT(TMT_DOC_SCORE):   _numterms=0;
MPRINT(TMT_DOC_SCORE):   _numdocs=0;
MPRINT(TMT_DOC_SCORE):   _topic_hash.replace();
MPRINT(TMT_DOC_SCORE):   rc=_it_topic.next();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   dcl hash _termtopics(multidata: "Y");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineKey("_termid");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineData("_termid","_topicid", "_weight");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineDone();
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set mult_termtop end=eof;
MPRINT(TMT_DOC_SCORE):   if _topic_hash.find() ne 0 then do;
MPRINT(TMT_DOC_SCORE):   put "topic " _topicid " not found in topic data set";
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   else if abs(_weight)>= _termCutoff then do;
MPRINT(TMT_DOC_SCORE):   _numterms+1;
MPRINT(TMT_DOC_SCORE):   _topic_hash.replace();
MPRINT(TMT_DOC_SCORE):   _termtopics.add();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   array _topic{1:25} TextTopic2_raw1-TextTopic2_raw25;
MPRINT(TMT_DOC_SCORE):   format TextTopic2_raw1-TextTopic2_raw25 5.3;
MPRINT(TMT_DOC_SCORE):   dcl hash _doc_hash(hashexp:16,ordered: 'a');
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineKey("_document_");
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineData("_document_" ,"TextTopic2_raw1" ,"TextTopic2_raw2" ,"TextTopic2_raw3" ,"TextTopic2_raw4" ,"TextTopic2_raw5" ,"TextTopic2_raw6" ,"TextTopic2_raw7" ,"TextTopic2_raw8" ,"TextTopic2_raw9" ,"TextTopic2_raw10"
,"TextTopic2_raw11" ,"TextTopic2_raw12" ,"TextTopic2_raw13" ,"TextTopic2_raw14" ,"TextTopic2_raw15" ,"TextTopic2_raw16" ,"TextTopic2_raw17" ,"TextTopic2_raw18" ,"TextTopic2_raw19" ,"TextTopic2_raw20" ,"TextTopic2_raw21" ,"TextTopic2_raw22"
,"TextTopic2_raw23" ,"TextTopic2_raw24" ,"TextTopic2_raw25" );
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineDone();
MPRINT(TMT_DOC_SCORE):   eof=0;
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set EMWS5.TextTopic2_tmout_normalized end=eof;
MPRINT(TMT_DOC_SCORE):   if _doc_hash.find() ne 0 then do;
MPRINT(TMT_DOC_SCORE):   do i=1 to 25;
MPRINT(TMT_DOC_SCORE):   _topic{i}=0;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.add();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _termid=_termnum_;
MPRINT(TMT_DOC_SCORE):   rc=_termtopics.find();
MPRINT(TMT_DOC_SCORE):   if rc = 0 then do;
MPRINT(TMT_DOC_SCORE):   do while(rc=0);
MPRINT(TMT_DOC_SCORE):   _topic{_topicid}= _topic{_topicid}+_weight*_count_;
MPRINT(TMT_DOC_SCORE):   rc=_termtopics.find_next();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.replace();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.output(dataset: "docds");
MPRINT(TMT_DOC_SCORE):   eof=0;
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set _userdocs end=eof;
MPRINT(TMT_DOC_SCORE):   rc=_doc_hash.find();
MPRINT(TMT_DOC_SCORE):   if rc ne 0 then do i=1 to 25;
MPRINT(TMT_DOC_SCORE):   _topic{i}=0;
MPRINT(TMT_DOC_SCORE):  ;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   else do _topicid=1 to 25;
MPRINT(TMT_DOC_SCORE):   _topic{_topicid}=round( _topic{_topicid},.001);
MPRINT(TMT_DOC_SCORE):   _topic_hash.find();
MPRINT(TMT_DOC_SCORE):   if _topic{_topicid} >= _doccutoff then do;
MPRINT(TMT_DOC_SCORE):   _numdocs=_numdocs+1;
MPRINT(TMT_DOC_SCORE):   _topic_hash.replace();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   output multdocs;
MPRINT(TMT_DOC_SCORE):  ;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   eof=0;
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set mult_topics end=eof;
MPRINT(TMT_DOC_SCORE):   rc=_topic_hash.find();
MPRINT(TMT_DOC_SCORE):   output mult_topics;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   * _termtopics.output(dataset: "&termtopds");
MPRINT(TMT_DOC_SCORE):   run;
 
NOTE: 25개의 관측값을 데이터셋 WORK.MULT_TOPICS.에서 읽었습니다.
NOTE: 데이터셋 WORK.DOCDS은(는) 487개의 관측값과 26개의 변수를 가지고 있습니다.
NOTE: 25개의 관측값을 데이터셋 WORK.MULT_TOPICS.에서 읽었습니다.
NOTE: 43025개의 관측값을 데이터셋 WORK.MULT_TERMTOP.에서 읽었습니다.
NOTE: 5620개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TMOUT_NORMALIZED.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 WORK._USERDOCS.에서 읽었습니다.
NOTE: 25개의 관측값을 데이터셋 WORK.MULT_TOPICS.에서 읽었습니다.
NOTE: 데이터셋 WORK.MULTDOCS은(는) 499개의 관측값과 28개의 변수를 가지고 있습니다.
NOTE: 데이터셋 WORK.MULT_TOPICS은(는) 25개의 관측값과 8개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.22 초
      cpu 시간            0.22 초
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _doc_tmp_sums (keep=_doccutoff _mean_ _std_ _ssi_ _ndoc_ _topicid);
MPRINT(TRAIN):   array vals{25} TextTopic2_raw1 -TextTopic2_raw25;
MPRINT(TRAIN):   array sums{25} _temporary_ (25*0);
MPRINT(TRAIN):   array ss{25} _temporary_ (25*0);
MPRINT(TRAIN):   _ndoc_=0;
MPRINT(TRAIN):   do until(eof);
MPRINT(TRAIN):   set multdocs end=eof;
MPRINT(TRAIN):   _ndoc_=_ndoc_+1;
MPRINT(TRAIN):   do i=1 to 25;
MPRINT(TRAIN):   sums{i}=sums{i}+abs(vals{i});
MPRINT(TRAIN):   ss{i}=ss{i}+abs(vals{i})**2;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   do i=1 to 25;
MPRINT(TRAIN):   _mean_=sums{i}/_ndoc_;
MPRINT(TRAIN):   _std_=sqrt((ss{i} - _ndoc_*_mean_*_mean_)/(_ndoc_-1));
MPRINT(TRAIN):   _doccutoff=round(_mean_+_std_,.001);
MPRINT(TRAIN):   _topicid=i+1-1;
MPRINT(TRAIN):   _ssi_=ss{i};
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   end;
 
NOTE: 499개의 관측값을 데이터셋 WORK.MULTDOCS.에서 읽었습니다.
NOTE: 데이터셋 WORK._DOC_TMP_SUMS은(는) 25개의 관측값과 6개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.06 초
 
 
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   create table mult_topics as select a._topicid, _name, _cat, _numterms, _numdocs, _termCutoff, b._doccutoff from mult_topics as a, _doc_tmp_sums as b where a._topicid=b._topicid;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table WORK.MULT_TOPICS created, with 25 rows and 7 columns.
 
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TMT_DOC_SCORE):   proc sort data=mult_topics nodupkey;
MPRINT(TMT_DOC_SCORE):   by _topicid;
 
NOTE: 25개의 관측값을 데이터셋 WORK.MULT_TOPICS.에서 읽었습니다.
NOTE: 중복 키값을 가지고 있는 0개의 관측값이 삭제되었습니다.
NOTE: 데이터셋 WORK.MULT_TOPICS은(는) 25개의 관측값과 7개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
 
 
MPRINT(TMT_DOC_SCORE):   proc sort data=mult_termtop nodupkey;
MPRINT(TMT_DOC_SCORE):   by _termid _topicid;
MPRINT(TMT_DOC_SCORE):   run;
 
NOTE: 입력 데이터셋이 이미 정렬되어 있어서, 정렬을 실행하지 않았습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
 
 
MPRINT(TMT_DOC_SCORE):   proc sql noprint;
MPRINT(TMT_DOC_SCORE):   select max(_topicid), min(_topicid) into :_maxtopic, :_mintopic from mult_topics;
MPRINT(TMT_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
 
 
MPRINT(TMT_DOC_SCORE):   proc sql noprint;
MPRINT(TMT_DOC_SCORE):   select _name into :_tmlab1 - :_tmlab25 from mult_topics;
MPRINT(TMT_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
 
 
MPRINT(TMT_DOC_SCORE):   data multdocs (drop=_topicid _doccutoff _termCutoff _name _cat _displaycat _numterms _numdocs _weight _termid rc _termnum_ i _count_) mult_topics (keep=_topicid _name _cat _displaycat _numterms _numdocs _docCutoff _termCutoff) ;
MPRINT(TMT_DOC_SCORE):   if 0 then set mult_topics mult_termtop;
MPRINT(TMT_DOC_SCORE):   dcl hash _topic_hash(dataset: "mult_topics", ordered: "a");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineKey("_topicid");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineData("_topicid","_docCutoff","_termCutoff","_name","_cat","_numterms", "_numdocs");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineDone();
MPRINT(TMT_DOC_SCORE):   dcl hiter _it_topic("_topic_hash");
MPRINT(TMT_DOC_SCORE):   rc=_it_topic.first();
MPRINT(TMT_DOC_SCORE):   do while(rc=0);
MPRINT(TMT_DOC_SCORE):   _numterms=0;
MPRINT(TMT_DOC_SCORE):   _numdocs=0;
MPRINT(TMT_DOC_SCORE):   _topic_hash.replace();
MPRINT(TMT_DOC_SCORE):   rc=_it_topic.next();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   dcl hash _termtopics(multidata: "Y");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineKey("_termid");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineData("_termid","_topicid", "_weight");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineDone();
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set mult_termtop end=eof;
MPRINT(TMT_DOC_SCORE):   if _topic_hash.find() ne 0 then do;
MPRINT(TMT_DOC_SCORE):   put "topic " _topicid " not found in topic data set";
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   else if abs(_weight)>= _termCutoff then do;
MPRINT(TMT_DOC_SCORE):   _numterms+1;
MPRINT(TMT_DOC_SCORE):   _topic_hash.replace();
MPRINT(TMT_DOC_SCORE):   _termtopics.add();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   array _topic{1:25} TextTopic2_raw1-TextTopic2_raw25;
MPRINT(TMT_DOC_SCORE):   format TextTopic2_raw1-TextTopic2_raw25 5.3;
MPRINT(TMT_DOC_SCORE):   dcl hash _doc_hash(hashexp:16,ordered: 'a');
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineKey("_document_");
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineData("_document_" ,"TextTopic2_raw1" ,"TextTopic2_raw2" ,"TextTopic2_raw3" ,"TextTopic2_raw4" ,"TextTopic2_raw5" ,"TextTopic2_raw6" ,"TextTopic2_raw7" ,"TextTopic2_raw8" ,"TextTopic2_raw9" ,"TextTopic2_raw10"
,"TextTopic2_raw11" ,"TextTopic2_raw12" ,"TextTopic2_raw13" ,"TextTopic2_raw14" ,"TextTopic2_raw15" ,"TextTopic2_raw16" ,"TextTopic2_raw17" ,"TextTopic2_raw18" ,"TextTopic2_raw19" ,"TextTopic2_raw20" ,"TextTopic2_raw21" ,"TextTopic2_raw22"
,"TextTopic2_raw23" ,"TextTopic2_raw24" ,"TextTopic2_raw25" );
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineDone();
MPRINT(TMT_DOC_SCORE):   eof=0;
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set EMWS5.TextTopic2_tmout_normalized end=eof;
MPRINT(TMT_DOC_SCORE):   if _doc_hash.find() ne 0 then do;
MPRINT(TMT_DOC_SCORE):   do i=1 to 25;
MPRINT(TMT_DOC_SCORE):   _topic{i}=0;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.add();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _termid=_termnum_;
MPRINT(TMT_DOC_SCORE):   rc=_termtopics.find();
MPRINT(TMT_DOC_SCORE):   if rc = 0 then do;
MPRINT(TMT_DOC_SCORE):   do while(rc=0);
MPRINT(TMT_DOC_SCORE):   _topic{_topicid}= _topic{_topicid}+_weight*_count_;
MPRINT(TMT_DOC_SCORE):   rc=_termtopics.find_next();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.replace();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.output(dataset: "docds");
MPRINT(TMT_DOC_SCORE):   eof=0;
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set _userdocs end=eof;
MPRINT(TMT_DOC_SCORE):   rc=_doc_hash.find();
MPRINT(TMT_DOC_SCORE):   if rc ne 0 then do i=1 to 25;
MPRINT(TMT_DOC_SCORE):   _topic{i}=0;
MPRINT(TMT_DOC_SCORE):  ;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   else do _topicid=1 to 25;
MPRINT(TMT_DOC_SCORE):   _topic{_topicid}=round( _topic{_topicid},.001);
MPRINT(TMT_DOC_SCORE):   _topic_hash.find();
MPRINT(TMT_DOC_SCORE):   if _topic{_topicid} >= _doccutoff then do;
MPRINT(TMT_DOC_SCORE):   _numdocs=_numdocs+1;
MPRINT(TMT_DOC_SCORE):   _topic_hash.replace();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   output multdocs;
MPRINT(TMT_DOC_SCORE):  ;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   eof=0;
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set mult_topics end=eof;
MPRINT(TMT_DOC_SCORE):   rc=_topic_hash.find();
MPRINT(TMT_DOC_SCORE):   output mult_topics;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   * _termtopics.output(dataset: "&termtopds");
MPRINT(TMT_DOC_SCORE):   run;
 
WARNING: DROP, KEEP 또는 RENAME의 변수 _displaycat은(는) 참조되지 않습니다.
WARNING: DROP, KEEP 또는 RENAME의 변수 _displaycat은(는) 참조되지 않습니다.
NOTE: 25개의 관측값을 데이터셋 WORK.MULT_TOPICS.에서 읽었습니다.
NOTE: 데이터셋 WORK.DOCDS은(는) 487개의 관측값과 26개의 변수를 가지고 있습니다.
NOTE: 25개의 관측값을 데이터셋 WORK.MULT_TOPICS.에서 읽었습니다.
NOTE: 43025개의 관측값을 데이터셋 WORK.MULT_TERMTOP.에서 읽었습니다.
NOTE: 5620개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TMOUT_NORMALIZED.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 WORK._USERDOCS.에서 읽었습니다.
NOTE: 25개의 관측값을 데이터셋 WORK.MULT_TOPICS.에서 읽었습니다.
NOTE: 데이터셋 WORK.MULTDOCS은(는) 499개의 관측값과 28개의 변수를 가지고 있습니다.
NOTE: 데이터셋 WORK.MULT_TOPICS은(는) 25개의 관측값과 7개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.19 초
      cpu 시간            0.18 초
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS5.TextTopic2_topics;
MPRINT(TRAIN):   set EMWS5.TextTopic2_topics mult_topics;
MPRINT(TRAIN):   run;
 
NOTE: 0개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TOPICS.에서 읽었습니다.
NOTE: 25개의 관측값을 데이터셋 WORK.MULT_TOPICS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TOPICS은(는) 25개의 관측값과 8개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TRAIN):   data EMWS5.TextTopic2_termtopics;
MPRINT(TRAIN):   set EMWS5.TextTopic2_termtopics mult_termtop;
MPRINT(TRAIN):   run;
 
NOTE: 0개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TERMTOPICS.에서 읽었습니다.
NOTE: 43025개의 관측값을 데이터셋 WORK.MULT_TERMTOP.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TERMTOPICS은(는) 43025개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
 
 
MPRINT(TRAIN):   proc sort data=EMWS5.TextTopic2_topics;
MPRINT(TRAIN):   by _topicid;
MPRINT(TRAIN):   run;
 
NOTE: 25개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TOPICS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TOPICS은(는) 25개의 관측값과 8개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TRAIN):   data EMWS5.TextTopic2_topics;
MPRINT(TRAIN):   length _displayCat $16;
MPRINT(TRAIN):   set EMWS5.TextTopic2_topics;
MPRINT(TRAIN):   label _topicid = "토픽 ID";
MPRINT(TRAIN):   label _name = "토픽";
MPRINT(TRAIN):   * label _apply = "%sysfunc(sasmsg(sashelp.tmine, rpt_text_apply_vlabel, NOQUOTE))";
MPRINT(TRAIN):   label _doccutoff = "문서 임계치";
MPRINT(TRAIN):   label _termcutoff = "용어 임계치";
MPRINT(TRAIN):   label _numterms = "용어 수";
MPRINT(TRAIN):   label _numdocs = "문서 수";
MPRINT(TRAIN):   label _displayCat = "범주";
MPRINT(TRAIN):   select(ksubstr(_cat,1,1));
MPRINT(TRAIN):   when('S') _displayCat = "단일";
MPRINT(TRAIN):   when('M') _displayCat = "다중";
MPRINT(TRAIN):   when('U') _displayCat = "사용자";
MPRINT(TRAIN):   otherwise;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;
 
NOTE: 25개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TOPICS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TOPICS은(는) 25개의 관측값과 8개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.20 초
      cpu 시간            0.21 초
 
 
MPRINT(TRAIN):   quit;
MPRINT(TRAIN):   * Set some of the data specific issues for TM_CLIENT_SETTINGS;
MPRINT(TRAIN):   * save out the metadata on the docs table ;
MPRINT(TRAIN):   proc contents data=EMWS5.TextTopic2_docDs out=work._docs_contents noprint;
MPRINT(TRAIN):   run;
 
NOTE: 데이터셋 WORK._DOCS_CONTENTS은(는) 3개의 관측값과 41개의 변수를 가지고 있습니다.
NOTE: 프로시저 CONTENTS 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
 
 
MPRINT(TRAIN):   * get a list of the variables ;
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   select name into :docs_view_variables separated by ' ' from work._docs_contents where name not like 'TextTopic%' and klowcase(name) ne "_document_" and kupcase(name) ne
MPRINT(TRAIN):   "REVIEW";
MPRINT(TRAIN):   * get a count of the variables ;
MPRINT(TRAIN):   select count(*) into :docs_nobs from EMWS5.TextTopic2_docDs;
MPRINT(TRAIN):   * delete our temp table ;
MPRINT(TRAIN):   drop table work._docs_contents;
NOTE: 테이블 WORK._DOCS_CONTENTS 을(를) 삭제했습니다.
MPRINT(TRAIN):   * get a count of the variables ;
MPRINT(TRAIN):   select count(*) into :terms_nobs from EMWS5.TextTopic2_weightedterms;
MPRINT(TRAIN):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
 
 
MPRINT(TRAIN):   * add the parseVar back in as the first field ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc sort data=EMWS5.TextTopic2_tm_client_settings;
MPRINT(TRAIN):   by VIEWER KEY;
MPRINT(TRAIN):   run;
 
NOTE: 9개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TM_CLIENT_SETTINGS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TM_CLIENT_SETTINGS은(는) 9개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
 
 
MPRINT(TRAIN):   data work.tm_client_settings;
MPRINT(TRAIN):   length viewer $80 key $80 value $32000;
MPRINT(TRAIN):   * document table ;
MPRINT(TRAIN):   viewer = "DOCUMENTS";
MPRINT(TRAIN):   key = "nobs";
MPRINT(TRAIN):   value = "     499";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   viewer = "DOCUMENTS";
MPRINT(TRAIN):   key = "viewvariables";
MPRINT(TRAIN):   value = "topic_weight review ID";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   viewer = "DOCUMENTS";
MPRINT(TRAIN):   key = "parseVariable";
MPRINT(TRAIN):   value="review                          ";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   * terms table ;
MPRINT(TRAIN):   viewer = "TERMS";
MPRINT(TRAIN):   key = "nobs";
MPRINT(TRAIN):   value = "    1721";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   * augTopics table ;
MPRINT(TRAIN):   viewer = "TOPICS";
MPRINT(TRAIN):   key = "nobs";
MPRINT(TRAIN):   value = "25";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   run;
 
NOTE: 데이터셋 WORK.TM_CLIENT_SETTINGS은(는) 5개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
 
 
MPRINT(TRAIN):   proc sort data=work.tm_client_settings;
MPRINT(TRAIN):   by VIEWER KEY;
MPRINT(TRAIN):   run;
 
NOTE: 5개의 관측값을 데이터셋 WORK.TM_CLIENT_SETTINGS.에서 읽었습니다.
NOTE: 데이터셋 WORK.TM_CLIENT_SETTINGS은(는) 5개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TRAIN):   data EMWS5.TextTopic2_tm_client_settings;
MPRINT(TRAIN):   merge EMWS5.TextTopic2_tm_client_settings work.tm_client_settings;
MPRINT(TRAIN):   by VIEWER KEY;
MPRINT(TRAIN):   run;
 
NOTE: 9개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TM_CLIENT_SETTINGS.에서 읽었습니다.
NOTE: 5개의 관측값을 데이터셋 WORK.TM_CLIENT_SETTINGS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TM_CLIENT_SETTINGS은(는) 13개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TRAIN):   proc datasets nolist nodetails lib=work;
MPRINT(TRAIN):   delete tm_client_settings;
MPRINT(TRAIN):   run;
 
NOTE: WORK.TM_CLIENT_SETTINGS(memtype=DATA)을(를) 삭제하는 중입니다.
MPRINT(TRAIN):   quit;
 
NOTE: 프로시저 DATASETS 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
 
 
MPRINT(TRAIN):   * add the info to EMINFO to forward on to other nodes ;
MPRINT(TRAIN):   data EMWS5.TextTopic2_EMINFO;
MPRINT(TRAIN):   length TARGET KEY $32 DATA $43;
MPRINT(TRAIN):   target = " ";
MPRINT(TRAIN):   key="LastTMNode";
MPRINT(TRAIN):   data="TextTopic2";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="LastTMNodeType";
MPRINT(TRAIN):   data="TextTopic";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="LastTopic";
MPRINT(TRAIN):   data="TextTopic2";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="tm_topic_dataset";
MPRINT(TRAIN):   data="";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="PRESCORECODE";
MPRINT(TRAIN):   data="TextTopic2";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   run;
 
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_EMINFO은(는) 5개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
 
 
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP을(를) 삭제했습니다.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: TextTopic2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48161      *------------------------------------------------------------*;
48162      * End TRAIN: TextTopic2;
48163      *------------------------------------------------------------*;
48164
 
48165      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
48166      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
48167      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48168      ;
MPRINT(EM_DIAGRAM):   ;
48169      ;
MPRINT(EM_DIAGRAM):   ;
48170      ;
MPRINT(EM_DIAGRAM):   ;
48171      ;
MPRINT(EM_DIAGRAM):   ;
48172      quit;
MPRINT(EM_DIAGRAM):   quit;
48173      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48174      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
48175      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48176      /*; *"; *'; */
48177      ;
MPRINT(EM_DIAGRAM):   ;
48178      run;
MPRINT(EM_DIAGRAM):   run;
48179      quit;
MPRINT(EM_DIAGRAM):   quit;
48180      /* Reset EM Options */
48181      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
48182      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
48183      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "2018년 11월 17일" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17시14분36초" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 스코어 로그";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* 스코어 로그
날짜:                2018년 11월 17일
시간:                17시14분36초
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1_R569A "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1_R569A new;
MPRINT(EM_DIAGRAM):   run;
48285      %let EMEXCEPTIONSTRING=;
48286      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
48287      * SCORE: TextTopic2;
MPRINT(EM_DIAGRAM):   * SCORE: TextTopic2;
48288      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48289      %let EM_ACTION = SCORE;
48290      %let syscc = 0;
48291      %macro main;
48292          %if %upcase(&EM_ACTION) = CREATE %then %do;
48293              filename temp catalog 'sashelp.emtxtext.topic_create.source';
48294              %include temp;
48295              %create;
48296          %end;
48297          %if %upcase(&EM_ACTION) = TRAIN %then %do;
48298              filename temp catalog 'sashelp.emtxtext.topic_train.source';
48299              %include temp;
48300              %train;
48301          %end;
48302         %if %upcase(&EM_ACTION) = SCORE %then %do;
48303              filename temp catalog 'sashelp.emtxtext.topic_score.source';
48304              %include temp;
48305              %score;
48306          %end;
48307          %if %upcase(&EM_ACTION) = REPORT %then %do;
48308              filename temp catalog 'sashelp.emtxtext.topic_report.source';
48309              %include temp;
48310              %report;
48311          %end;
48312      %mend main;
48313
48314      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emtxtext.topic_score.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TOPIC_SCORE.SOURCE입니다.
48315     +/* ****************************************************************
48316     + * Copyright (C) 1996 by SAS Institute Inc., Cary, NC 27513
48317     + *
48318     + * Name:             topic_score.sas
48319     + * Support:          cox  James A. Cox
48320     + * Product:          SAS Text Miner
48321     + * Language:         Sas
48322     + * Script:
48323     + *
48324     + * Usage:
48325     + *
48326     + * Purpose:  Implements Score action for Text Topic Node.
48327     + *
48328     + * History:
48329     + * 26May09 Initial Coding [cox]
48330     + *
48331     + * Notes:
48332     + *
48333     + * Last Modified By:
48334     + * Last Modified On: Thu Sep 11 15:28:20 2014
48335     + *
48336     + * End
48337     + * ************************************************************** */
48338     +%macro tmt_score(import=,export=,import_out=,termds=,weighttermds=,topics=,termtopics=,
48339     +                 export_out=, export_trans=,
48340     +                 config_ds=, parsevar=, em_norm_out=,col_sum_ds=&em_user_term_sums,
48341     +                 cellwgt=LOG);
48342     +   %if &import ne %then %do;
48343     +      %if &em_norm_out ne %then %do; data &export_out; set &em_norm_out; run; %end;
48344     +      %else %do;
48346     +         /* If no filter node input */
48347     +         %if &import_out =  %then %do;
48348     +            data _tmpdocs;
48349     +            set &import;
48350     +            _document_=_n_;
48351     +            rc=tgscore(&parsevar,"&config_ds","&termds","work.top_tmp_out",0,0);
48352     +            drop rc;
48353     +            run;
48354     +            %let import=_tmpdocs;
48355     +            %let import_out=work.top_tmp_out;
48356     +            %end;
48358     +         %let syscc=0;
48359     +         /* First, weight output data set */
48360     +         proc tmutil data=&import_out key=&termds;
48361     +         control init release;
48362     +         weight cellwgt=&cellwgt in_weight=&weighttermds(keep=key weight);
48363     +         output out=work._weighted_tmout;
48364     +         run;
48366     +       %if &tmm_norm_pivot ne 0 %then %do;
48367     +         %row_pivot_normalize(transds=work._weighted_tmout, outtransds=&export_out,
48368     +                              col_sumds=work._termsumds,
48369     +                              row=_document_,col=_termnum_,entry=_count_, pivot=&tmm_norm_pivot,
48370     +                              tmt_config=&config_ds,
48371     +                              tmt_train=0, prefix=&EM_NODEID.);
48372     +         %let col_sum_ds=work._termsumds;
48373     +          %end;
48374     +       %else %do;
48375     +          data &export_out; set work._weightedtmout; run;
48376     +          %end;
48377     +         %end;
48378     +      %tmt_doc_score(termtopds=&termtopics, docds=&import, outds=&export_out, topicds=&topics,
48379     +                    newdocds=&export, scoring=yes, termsumds=&col_sum_ds, prefix=&EM_NODEID._,
48380     +                    pivot=&tmm_norm_pivot);
48381     +      proc sql noprint;
48382     +      create view &export_trans as
48383     +       select ktrim(term) || '|' || role as _item_, b.*
48384     +       from &weighttermds as a, &em_user_weightedtmout as b /*S1120236:  use &em_user_weightedtmout including unormalized _count_ instead of &export_out including normalized _count_*/
48385     +       where b._termnum_=a.key and a._ispar ne '.'
48386     +       order by b._termnum_, b._document_ ;
48387     +            quit;
48389     +         %end;
48391     +%mend;
48393     +%macro score;
48394     +   %if ^%symexist(tm_debug) %then %let tm_debug=0;
48395     +    %global last_parse_node last_filter_node last_prescore_node server_err
48396     +      parsevar EM_SASMSG;
48397     +   %let EM_SASMSG=TMINE;
48398     +   %let syscc=0;
48402     +   /*use saved version of em_info in case macro is not populated*/
48403     +   %em_getname(key=last_tm_nodes, type=data);
48405     +    filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
48406     +    %include temp;
48407     +    %tm_get_last_filter(eminfo=&em_user_last_tm_nodes,em_lib=&em_lib,
48408     +                        em_variableset=&em_data_variableset);
48409     +    %if &EMEXCEPTIONSTRING ne %then %goto end_topic_score;
48410     +    %let lastparsenode=&last_parse_node;
48411     +    %let lastfilternode=&last_filter_node;
48412     +    %let lastprescore=&last_prescore_node;
48413     +    %let filt_node=;
48414     +    %if &lastfilternode ne &lastparsenode %then %do;
48415     +        %let filt_node=Y;
48416     +    %end;
48418     +   * options mstored sasmstore=sashelp;
48420     +    filename temp catalog 'sashelp.emtxtext.row_pivot_normalize.source';
48421     +    %include temp;
48423     +    filename temp catalog 'sashelp.emtxtext.tmt_doc_score.source';
48424     +    %include temp;
48425     +    filename temp catalog 'sashelp.emtxtext.tm_parse_score.source';
48426     +    %include temp;
48427     +    filename temp catalog 'sashelp.emtxtext.tm_data2code.source';
48428     +    %include temp;
48430     +    %em_getname(key=terms,            type=data);
48431     +    %em_getname(key=topics,           type=data);
48432     +    %em_getname(key=termtopics,       type=data);
48433     +    %em_getname(key=weightedterms,    type=data);
48434     +    %em_getname(key=weightedtmout,    type=data);
48435     +   %em_getname(key=tmout_normalized, type=data);
48436     +   %em_getname(key=term_sums,        type=data);
48437     +    %em_checkmacro(name=tmm_norm_pivot,      global=Y, value=.7);
48438     +  %if &tmm_norm_pivot<0 or &tmm_norm_pivot>1 %then %let tmm_norm_pivot=0.7;
48439     +   %em_getname(key=repTopics, type=data);
48441     +   /* Update topics to include translated cats */
48442     +   /* If old topic node that has reptopics as a view, delete it
48443     +      (em_report doesn't link views between tables and graphs)
48444     +    */
48445     +   %if %sysfunc(exist(&em_user_reptopics,VIEW)) %then %do;
48446     +      proc sql noprint; drop view &em_user_reptopics; quit;
48447     +      %end;
48449     +   /* Translate cat values to _displayCats for reptopics */
48450     +   data &em_user_reptopics(drop=_cat);
48451     +       set &em_user_topics;
48452     +       label _displayCat  = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_category_vlabel, NOQUOTE))";
48453     +       select(ksubstr(_cat,1,1));
48454     +          when('S') _displayCat = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicsingle_value, NOQUOTE))";
48455     +          when('M') _displayCat = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicmulti_value, NOQUOTE))";
48456     +          when('U') _displayCat = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicuser_value, NOQUOTE))";
48457     +          otherwise;
48458     +          end;
48459     +       run;
48461     +      /* Check to see if previous filter node had a weight for terms, or whether
48462     +          it had to be created in this node */
48463     +      %let isweight = 0;
48464     +      %let dsid=%sysfunc(open(%str(&em_lib..&lastfilternode._terms)));
48465     +      %if &dsid gt 0 %then %do;
48466     +         %let isweight =%sysfunc(varnum(&dsid, weight));
48467     +         %let rc=%sysfunc(close(&dsid));
48468     +         %end;
48470     +    data _null_;
48471     +         cellwgt="LOG";
48472     +         set &em_lib..&lastfilternode._tmconfig;
48473     +         call symput('cellwgt',cellwgt);
48474     +         run;
48476     +      /* If no weights passed in, create work._termview to contain weights, (commented
48477     +         out) */
48478     +      %if "&isweight" eq "0" %then %do;
48479     +         proc sql noprint;
48480     +         create table work._termview as
48481     +            select a.weight, b.*
48482     +            from &em_user_terms as a, &em_lib..&lastfilternode._terms as b
48483     +            where a.key=b.key and a.parent = b.parent;
48484     +               quit;
48485     +         proc datasets nolist nodetails;
48486     +               modify _termview;
48487     +               index create both=(term role);
48488     +               run;
48489     +               quit;
48490     +         %let score_terms=work._termview;
48491     +      %end;
48492     +      %else %let score_terms=&em_lib..&lastfilternode._terms;;
48493     +    %em_getname(key=weightedterms, type=data);
48495     +      /* Use only the termtopics rows that exceed the current _termcutoff */
48496     +         proc sql noprint;
48497     +         create table work._termtopics as
48498     +            select a.* from &em_user_termtopics as a, &em_user_topics as b
48499     +            where a._topicid=b._topicid and abs(_weight)>=_termCutoff
48500     +              /* and _apply='Y' */;
48501     +        select parsevar into :_tm_parseVar from &EM_LIB..&lastfilternode._tmconfig;
48502     +               quit;
48504     +           %em_getname(key=tmout, type=data);
48505     +           %em_getname(key=validout, type=data);
48506     +           %em_getname(key=testout, type=data);
48508     +           %em_getname(key=valid_trans, type=data);
48509     +           %em_getname(key=test_trans, type=data);
48511     +      /* Now do flow scoring for train, test, and validate tables, including exporting
48512     +       a transaction table for the training data */
48513     +      %tmt_score(import=&em_import_data,export=&em_export_train,
48514     +                 /* %if &filt_node ne %then */ import_out=&EM_LIB..&lastfilternode._tmout,
48515     +                 termds=&score_terms,topics=&em_user_topics,
48516     +                 weighttermds=&em_user_weightedterms,
48517     +                 config_ds=&EM_LIB..&lastfilternode._tmconfig,
48518     +                 termtopics=work._termtopics,
48519     +                 parsevar=&_tm_parsevar,
48520     +                 export_out=&em_user_tmout,export_trans=&em_export_transaction,
48521     +                 cellwgt=&cellwgt
48522     +                 , em_norm_out   = &em_user_tmout_normalized,
48523     +                 col_sum_ds=&em_user_term_sums);
48524     +      %tmt_score(import=&em_import_validate,export=&em_export_validate,
48525     +                 %if &filt_node ne %then import_out=&EM_LIB..&lastfilternode._validout,;
48526     +                 termds=&score_terms,topics=&em_user_topics,
48527     +                 weighttermds=&em_user_weightedterms,
48528     +                 config_ds=&EM_LIB..&lastfilternode._tmconfig,
48529     +                 termtopics=work._termtopics,
48530     +                 parsevar=&_tm_parsevar,
48531     +                 cellwgt=&cellwgt,
48532     +                 export_out=&EM_LIB..&EM_NODEID._validout,
48533     +                 export_trans=&em_user_valid_trans);
48534     +      %tmt_score(import=&em_import_test,export=&em_export_test,
48535     +                 %if &filt_node ne %then import_out=&EM_LIB..&lastfilternode._testout,;
48536     +                 termds=&score_terms,topics=&em_user_topics,
48537     +                 weighttermds=&em_user_weightedterms,
48538     +                 config_ds=&EM_LIB..&lastfilternode._tmconfig,
48539     +                 termtopics=work._termtopics,
48540     +                 parsevar=&_tm_parsevar,
48541     +                 cellwgt=&cellwgt,
48542     +                 export_out=&EM_LIB..&EM_NODEID._testout,
48543     +                 export_trans=&em_user_test_trans);
48545     +      /* Set up appropriate metadata of training table */
48546     +      filename _meta "&EM_FILE_CDELTA_TRAIN";
48547     +      data _null_;
48548     +         file _meta;
48549     +         put 'if CREATOR = "&EM_NODEID" and upcase(NAME) =: upcase("&EM_NODEID") then do;';
48550     +         put '   if upcase(NAME) =: upcase("&EM_NODEID._RAW") then do;';
48551     +         put '      ROLE="INPUT";';
48552     +         put '      LEVEL="INTERVAL";';
48553     +         put '      end;';
48554     +         put '   else do;';
48555     +         put '      ROLE="SEGMENT";';
48556     +         put '      LEVEL="BINARY";';
48557     +         put '      end;';
48558     +         put '   end;';
48559     +         put '   if upcase(NAME) = "_DOCUMENT_" then do;';
48560     +         put '      ROLE="ID";';
48561     +         put '      LEVEL="NOMINAL";';
48562     +         put '      end;';
48563     +      run;
48564     +      filename _meta;
48566     +      /* Set up appropriate metadata on output transaction table */
48567     +      filename _meta "&EM_FILE_CDELTA_TRANSACTION";
48568     +      data _null_;
48569     +         file _meta;
48570     +         put 'if upcase(NAME)="_DOCUMENT_" then do;';
48571     +         put '   ROLE="ID";';
48572     +         put '   LEVEL="NOMINAL";';
48573     +         put 'end;';
48574     +         put 'if upcase(NAME)="_ITEM_" then do;';
48575     +         put '   ROLE="TARGET";';
48576     +         put '   LEVEL="NOMINAL";';
48577     +         put 'end;';
48578     +         put 'if upcase(NAME) in ("_COUNT_","_TERMNUM_") then do;';
48579     +         put '   ROLE="REJECTED";';
48580     +         put 'end;';
48581     +      run;
48582     +      filename _meta;
48585     +      /* Retrieve path of Diagram */
48586     +      data _null_;
48587     +         call symput("emwspath", strip(pathname("&em_lib")));
48588     +      run;
48590     +     /* Following calculates all prescore code for Text Topic Node */
48591     +     /* Prescorecode of previous Text Mining Node */
48592     +     %em_getname(key=PRESCORECODE, type=file, extension=sas);
48594     +    filename topicpre "&EM_USER_prescorecode";
48595     +    data _null_;
48596     +           file topicpre;
48597     +           put 'filename temp catalog "sashelp.emtxtext.tmt_doc_score.source";';
48598     +           put '%include temp;';
48599     +           put 'filename temp catalog "sashelp.emtxtext.row_pivot_normalize.source";';
48600     +           put '%include temp;';
48601     +           put 'filename temp;';
48602     +           run;
48603     +     %if &lastprescore ne %then %do;
48604     +        %let tmprescoreFile = %bquote(&emwspath)&em_dsep&lastprescore&em_dsep.PRESCORECODE.sas;
48606     +        filename tmpre    "&tmprescoreFile";
48607     +        %em_copyfile(infref=tmpre, outfref=topicpre, append=Y);
48608     +        filename tmpre;
48609     +        %end;
48611     +    /* interactive view close
48612     +     %if %eval(&syscc)>4 %then %do;
48613     +         %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
48614     +         %goto end_topic_score;
48616     +     %end;*/
48619     +     %if not %symexist(em_term_loc) %then %do;
48620     +        /* If em_term_loc is not specified, we use existing datasets in EMWS project folder for scoring*/
48621     +       %let emtermloc_exists = 0;
48622     +       %let em_term_loc = %bquote(%sysfunc(pathname(&EM_LIB)));
48623     +       libname termloc "&em_term_loc";
48625     +       /* If no weights passed in, we copy work._termview to termloc.&EM_NODEID._termview that contain weights*/
48626     +       /* score_termds refer to terms data set used for the tm_parse_score macro in some cases (e.g., text filter was not previously used). scored_terms refer to a terms data set to score for this Text Topic node*/
48627     +       %if "&isweight" eq "0" %then %do;
48628     +           data termloc.&EM_NODEID._termview;
48629     +              set work._termview;
48630     +           run;
48631     +           %let score_termds =termloc.&EM_NODEID._termview;
48632     +       %end;
48633     +        %else %do;
48634     +              %if &lastfilternode = &lastparsenode %then %do;
48635     +               /* When _filtterms do not exist*/
48636     +              data termloc.&lastfilternode._filtterms;
48637     +              set &EM_LIB..&lastfilternode._terms;
48638     +             run;
48639     +            %end;
48640     +            %let score_termds =termloc.&lastfilternode._filtterms;
48641     +       %end;
48643     +       %let scored_config =  termloc.&lastfilternode._tmconfig;
48644     +       %let scored_multids = termloc.&lastparsenode._multiall;
48645     +       %let scored_topics = termloc.&EM_NODEID._topics;
48646     +       %let scored_termtopics = termloc.&EM_NODEID._termtopics  ;
48648     +   %end;
48650     +    %else %do;
48651     +     /* If em_term_loc is not specified, we write existing datasets in EMWS project folder to an external directory specified by em_term_loc location for scoring*/
48652     +       %let emtermloc_exists = 1;
48653     +       libname termloc "&em_term_loc";
48655     +        %if %sysfunc(libref(termloc)) ne 0 %then %do;
48656     +        %let  EMEXCEPTIONSTRING = EMTOOL.EMTERMLOC,&em_term_loc;
48657     +        %goto end_topic_score;
48658     +        %end;
48660     +       /* If no weights passed in, we copy work._termview to termloc.&EM_LIB._&EM_NODEID._termview that contain weights*/
48661     +      /* score_termds refer to terms data set used for the tm_parse_score macro in some cases (e.g., text filter was not previously used). scored_terms refer to a terms data set to score for this Text Topic node*/
48662     +        %if "&isweight" eq "0" %then %do;
48663     +           data termloc.&EM_LIB._&EM_NODEID._termview;
48664     +              set work._termview;
48665     +           run;
48666     +           %let score_termds =termloc.&EM_LIB._&EM_NODEID._termview;
48667     +        %end;
48668     +        %else %do;
48669     +             %if &lastfilternode = &lastparsenode %then %do;
48670     +               /* When _filtterms do not exist*/
48671     +              data termloc.&EM_LIB._&lastfilternode._filtterms;
48672     +              set &EM_LIB..&lastfilternode._terms;
48673     +             run;
48674     +            %end;
48675     +            %let score_termds =termloc.&EM_LIB._&lastfilternode._filtterms;
48676     +        %end;
48678     +       data termloc.&EM_LIB._&EM_NODEID._topics;
48679     +           set &em_user_topics;
48680     +       run;
48682     +       data termloc.&EM_LIB._&EM_NODEID._termtopics;
48683     +           set &em_user_termtopics;
48684     +       run;
48686     +       /* tmconfig needs to be updated with a new weight setting*/
48687     +       data termloc.&EM_LIB._&lastfilternode._tmconfig;
48688     +           set  &EM_LIB..&lastfilternode._tmconfig;
48689     +        run;
48691     +        %if &lastfilternode = &lastparsenode %then %do;
48692     +              %if %sysfunc(exist(&EM_LIB..&lastparsenode._multiall))  %then %do;
48693     +                 data termloc.&EM_LIB._&lastparsenode._multiall;
48694     +                   set &EM_LIB..&lastparsenode._multiall;
48695     +                 run;
48696     +            %end;
48697     +        %end;
48699     +       %let scored_config = termloc.&EM_LIB._&lastfilternode._tmconfig;
48700     +       %let scored_multids = termloc.&EM_LIB._&lastparsenode._multiall;
48701     +       %let scored_topics = termloc.&EM_LIB._&EM_NODEID._topics;
48702     +       %let scored_termtopics = termloc.&EM_LIB._&EM_NODEID._termtopics;
48704     +   %end;
48706     +      %if &lastfilternode = &lastparsenode %then %do;
48707     +        %tm_parse_score(nodeid=&EM_NODEID,termds=&score_termds,
48708     +                        configds=&scored_config,
48709     +                        multids=&scored_multids,
48710     +                        outds=&EM_NODEID._out,
48711     +                        prefile=&em_user_PRESCORECODE,
48712     +                        scorefile=&EM_FILE_EMPUBLISHSCORECODE);
48713     +              %let scored_terms = &score_termds;
48714     +              %let scored_out=&EM_NODEID._out;
48715     +              %let _score_append=mod;
48716     +        %end;
48717     +     %else %do;
48718     +              %if (&emtermloc_exists=0) %then %do;
48719     +                  %let scored_terms = termloc.&lastfilternode._filtterms;
48720     +              %end;
48721     +              %else %if (&emtermloc_exists=1) %then %do;
48722     +                  %let scored_terms = termloc.&EM_LIB._&lastfilternode._filtterms;
48723     +              %end;
48724     +              %let scored_out=work.&lastfilternode._out;
48725     +              %let _score_append=;
48726     +     %end;
48728     +     %let syscc=0;
48729     +     filename topicpre;
48731     +     filename _tpcscr "&EM_FILE_EMPUBLISHSCORECODE";
48732     +     data _null_;
48733     +        file _tpcscr &_score_append;
48735     +        %let tmoutweighted = TMOUT_WEIGHTED;
48736     +        put '/* First we create a Weighted TMOUT Data Set based on weighted terms*/';
48737     +        put "proc tmutil data=&scored_out key=&scored_terms;";
48738     +        put "control init release;";
48739     +        put  "weight cellwgt=&cellwgt in_weight=&scored_terms (keep=key weight);";
48740     +        put "output out=work._weighted_tmout;"/;
48742     +        put '%row_pivot_normalize(transds=work._weighted_tmout, outtransds=WORK.TMOUTNORM,';
48743     +        put '      col_sumds=work._termsumds,row=_document_,col=_termnum_,entry=_count_,';
48744     +        put "      pivot=&tmm_norm_pivot,tmt_config=&scored_config,tmt_train=0,prefix=&em_nodeid.);"/;
48746     +        put '/*initialize topics and termtopics datasets in case they do not exist (0 topics case)*/';
48747     +        put '%macro tmt_check_topics_exist;';
48748     +        put '%if(^%sysfunc(exist('"&scored_topics"'))) %then %do;';
48749     +        put '   proc sql noprint; create table '"&scored_topics";
48750     +        put '   (_topicid decimal, _docCutoff decimal, _termCutoff decimal, _name char(1024), _cat char(4), /* _apply char(1), */ _numterms decimal, _numdocs decimal, _displayCat char(200) );';
48751     +        put '   quit;';
48752     +        put '%end;';
48753     +        put '%if(^%sysfunc(exist('"&scored_termtopics"'))) %then %do;';
48754     +        put '   proc sql noprint; create table '"&scored_termtopics";
48755     +        put '   (_topicid decimal, _weight decimal, _termid decimal);';
48756     +        put '   quit;';
48757     +        put '%end;';
48758     +        put '%mend tmt_check_topics_exist;';
48759     +        put '%tmt_check_topics_exist;';
48761     +        put "data work.&EM_NODEID._termtopics; set &scored_termtopics; run;";
48762     +        put "data work.&EM_NODEID._topics; set &scored_topics; run;";
48764     +        put '%'"tmt_doc_score(termtopds=work.&EM_NODEID._termtopics"', docds=&em_score_output,';
48765     +        put "outds=WORK.TMOUTNORM, topicds=work.&EM_NODEID._topics, newdocds=work._newdocds, scoring=yes,";
48767     +        put "termsumds=work._termsumds, prefix=&em_nodeid._,pivot=&tmm_norm_pivot);";
48768     +        put 'data &em_score_output; set work._newdocds;'; ;
48769     +     run;
48770     +     filename _tpcscr;
48773     +     %if %eval(&syscc)>4 %then %do;
48774     +       %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
48775     +     %end;
48777     +  %end_topic_score:
48779     +%if &tm_debug =0 %then %do;
48780     +proc sql;
48781     +   drop table _tmpdocs;
48782     +   drop table _termview ;
48783     +   drop table _termtopics;
48784     +   drop table top_tmp_out;
48785     +   drop table _weighted_tmout;
48786     +   drop table _termsumds;
48787     +   * drop table &EM_NODEID._filterset;
48788     +   * drop table &EM_NODEID._terms;
48789     +   * drop table &EM_NODEID._termtopics;
48790     +   * drop table &EM_NODEID._topics;
48791     +   drop table _i;
48792     +   drop table tmutil_memloc_i;
48793     +quit;
48794     +%end;
48797     +%mend score;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TM_GET_LAST_FILTER.SOURCE입니다.
48798     +/* ****************************************************************
48799     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
48800     + *
48801     + * Name:             tm_get_last_filter.sas
48802     + * Product:          SAS Text Miner
48803     + * Language:         Sas
48804     + * Script:
48805     + *
48806     + * Usage:
48807     + *
48808     + * Purpose:  macro to get the last filter node and the last parse node in the
48809     + *   diagram that corresponds to the current parse variable.  If there is no filter
48810     + *   node, the filter node is set to the last parse node.
48811     + *
48812     + *
48813     + *
48814     + * History:
48815     + * 14Aug09 Initial Coding
48816     + *
48817     + * Notes:
48818     + *    Returns an error in the following cases:
48819     + *      1. There is no preceding parse node.
48820     + *      2. There is no parse node with the current parse variable.
48821     + *
48822     + * Last Modified By:
48823     + * Last Modified On: Wed Sep 23 15:35:04 2009
48824     + *
48825     + * End
48826     + * ************************************************************** */
48827     +%macro tm_get_last_filter(eminfo=,em_lib=, em_variableset=);
48828     +   %let last_parse_node=;
48829     +   %let last_filter_node=;
48830     +   %let last_prescore_node=;
48831     +   %let server_err=;
48832     +   %let EMEXCEPTIONSTRING=;
48833     +   %let syscc=0;
48834     +
48835     +    /* verify that setinit for SAS Text Miner is currently active */
48836     +    %if %sysfunc(sysprod(PRODNUM107)) ne 1 %then %do;
48837     +       %let EMEXCEPTIONSTRING = EMTOOL.NOTMLICENSE;
48838     +        %goto end_macro;
48839     +        %end;
48840     +
48841     +
48842     +    * find last filter or text parse node if no filter node. ;
48843     +   %if %sysfunc(exist(&eminfo)) %then %do;
48844     +      proc sql noprint;
48845     +      select data into :last_parse_node from &eminfo where key="LastTextParsing";
48846     +         select data into :last_filter_node from &eminfo where key="LastTextFilter";
48847     +         select data into :last_prescore_node from &eminfo where kupcase(key)="PRESCORECODE";
48848     +      quit;
48849     +
48850     +   %end;
48851     +
48852     +   %if &last_parse_node= %then %do;
48853     +      %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGNODE;
48854     +      %goto end_macro;
48855     +      %end;
48856     +
48857     +   %else %if &last_filter_node= %then %let last_filter_node = %ktrim(&last_parse_node);
48858     +   %else %let last_filter_node = %ktrim(&last_filter_node);
48859     +   %let last_parse_node = %ktrim(&last_parse_node);
48860     +
48861     +   * Check to make sure parse variable is present and still exists;
48862     +   %let parsevar = ;
48863     +   proc sql noprint;
48864     +    select parsevar into :parsevar
48865     +    from &em_lib..&last_filter_node._tmconfig;
48866     +    quit;
48867     +
48868     +    *check for dropped parsevar on input dataset;
48869     +       %let parsevarOK= ;
48870     +       %let parsevarN=%kupcase(%ktrim(&parsevar));
48871     +       data _null_;
48872     +         set &em_variableset(where=(kupcase(NAME)="&parsevarN" and USE in('Y' 'D')));
48873     +         if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
48874     +         run;
48875     +       %if(&parsevarOK eq ) %then %do;
48876     +          %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGVAR;
48877     +          %goto end_macro;
48878     +          %end;
48879     +%end_macro:
48880     +
48881     +%mend tm_get_last_filter;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TM_GET_LAST_FILTER):   * find last filter or text parse node if no filter node. ;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select data into :last_parse_node from EMWS5.TextTopic2_last_tm_nodes where key="LastTextParsing";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_filter_node from EMWS5.TextTopic2_last_tm_nodes where key="LastTextFilter";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_prescore_node from EMWS5.TextTopic2_last_tm_nodes where kupcase(key)="PRESCORECODE";
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
 
 
MPRINT(TM_GET_LAST_FILTER):   * Check to make sure parse variable is present and still exists;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select parsevar into :parsevar from EMWS5.TextFilter2_tmconfig;
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
 
 
MPRINT(TM_GET_LAST_FILTER):   *check for dropped parsevar on input dataset;
MPRINT(TM_GET_LAST_FILTER):   data _null_;
MPRINT(TM_GET_LAST_FILTER):   set EMWS5.TextTopic2_VariableSet(where=(kupcase(NAME)="REVIEW" and USE in('Y' 'D')));
MPRINT(TM_GET_LAST_FILTER):   if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
MPRINT(TM_GET_LAST_FILTER):   run;
 
NOTE: 1개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_VARIABLESET.에서 읽었습니다.
      WHERE (KUPCASE(NAME)='REVIEW') and USE in ('D', 'Y');
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   * options mstored sasmstore=sashelp;
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.row_pivot_normalize.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.ROW_PIVOT_NORMALIZE.SOURCE입니다.
48882     +/* ****************************************************************
48883     + * Copyright (C) 1996 by SAS Institute Inc., Cary, NC 27513
48884     + *
48885     + * Name:             row_pivot_normalize_docs.sas
48886     + * Product:          SAS/GRAPH
48887     + * Language:         Sas
48888     + * Script:
48889     + *
48890     + * Usage:
48891     + *
48892     + * Purpose:          To output a new out table that is normalized so that each
48893     + *  row is normalized so "on average" the sums of squares of the _count_ is 1.
48894     + *
48895     + * History:
48896     + * 05May09 Initial Coding
48897     + *
48898     + * Notes:
48899     + *
48900     + * Last Modified By:
48901     + * Last Modified On: Thu Jan 06 17:08:35 2011
48902     + *
48903     + * End
48904     + * ************************************************************** */
48905     +%macro row_pivot_normalize(transds=,outtransds=,row=,col=,entry=,
48906     +                           col_sumds=, pivot=.5, tmt_config= , tmt_train=1, prefix=);
48908     +   /* Calculate sum of the squared entries for each row */
48909     +proc summary nway data=&transds;
48910     +   class &row;
48911     +   var &entry;
48912     +   output out=_sqrowvals uss=;
48913     +   run;
48915     +   /* Put into &meandiv what the average euclidean length is across rows */
48918     +%if &tmt_train = 1  %then %do;
48919     +   proc sql noprint;
48920     +      select mean(sqrt(&entry)) into :meaneuclen
48921     +      from _sqrowvals;
48922     +   quit;
48923     +   %if &tmt_config ne %then %do;
48924     +      *populate the config file with the mean value;
48925     +      data &tmt_config;
48926     +         set &tmt_config;
48927     +         &prefix._meaneuclen= symget('meaneuclen');
48928     +      run;
48929     +   %end;
48930     +    data _sqrowvals;
48931     +      set _sqrowvals;
48932     +      meaneuclen=symget('meaneuclen');
48933     +      divisor = meaneuclen + (sqrt(&entry) - meaneuclen)*&pivot;
48934     +      drop meaneuclen;
48935     +   run;
48938     +%end;
48939     +%else %do;
48940     +      * grab the mean value from the config file  and put into meaneuclien;
48941     +   data _null_;
48942     +      set &tmt_config;
48943     +      call symput('meaneuclen',&prefix._meaneuclen);
48944     +   run;
48945     +    data _sqrowvals;
48946     +      set _sqrowvals;
48947     +      meaneuclen=symget('meaneuclen');
48948     +      divisor = meaneuclen + (sqrt(&entry) - meaneuclen)*&pivot;
48949     +   run;
48951     +%end;
48956     +proc sql noprint;
48957     +   create table &outtransds as
48958     +      select a.&row,a.&col,a.&entry / divisor as &entry
48959     +      from &transds as a,_sqrowvals as b
48960     +      where a.&row=b.&row;
48961     +   drop table _sqrowvals;
48962     +         quit;
48963     +%if &col_sumds ne %then %do;
48964     +   proc summary nway data=&outtransds;
48965     +   class &col;
48966     +   var &entry;
48967     +   output out=&col_sumds mean=;
48968     +   run;
48969     +%end;
48970     +%mend row_pivot_normalize;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tmt_doc_score.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TMT_DOC_SCORE.SOURCE입니다.
48971     +/* ****************************************************************
48972     + * Copyright (C) 2010 by SAS Institute Inc., Cary, NC 27513
48973     + *
48974     + * Name:             tmt_doc_score.sas
48975     + * Support:          cox  James A. Cox
48976     + * Product:          SAS Text Miner
48977     + * Language:         Sas
48978     + * Script:
48979     + *
48980     + * Usage:
48981     + *
48982     + * Purpose:  To score documents based on contents of a topic table (&topicds), a term-topic table
48983     + *      (&termtopds), and a weighted "out" table (&outds).  A topic weight is a weighted sum of the
48984     + *      term weights from the term-topic table  (_weight_) where such weight is above a minimum
48985     + *      _termcutoff,  multiplied by the weighted _count_ (_count_) from the weighted "out" table,
48986     + *      where such counts are the tfidf weighted counts.
48987     + *
48988     + *
48989     + * History:
48990     + * 01May09 Initial Coding [cox]
48991     + * 08Nov10 Changed to use hash tables [cox]
48992     + *
48993     + * Notes:
48994     + *   scoring=yes is passed in in topic_score.source for both flow and saved score code.
48995     + *       Otherwise, a blank value is passed in.
48996     + *   docds is blank only when called from the Topic Viewer, since the new document table does
48997     + *       not need to be recalculated until scoring time ( a view is actually displayed that joins
48998     + *        them in the Document table part).  So when scoring is nonblank, docds is
48999     + *       never non-blank.
49000     + *
49001     + *   This routine will score topics inclusive from the minimum topic number (computed internally as
49002     + *        &_mintopic) to the maximum topic number (computed as &_maxtopic) from the input topic data
49003     + *        set.
49004     + *
49005     + *
49006     + *   If &scoring is blank, then topic variables are created for each such topic as <nodename>_#.
49007     + *    For example, if the smallest topic number in topic table is 4 and the largest is 10, and the
49008     + *    nodename is "texttopic", then Texttopic_4-TextTopic10 will be created on the output &newdocds.
49009     + *    In this case, the topic table is updated for the variables _numterms and _numdocs to have the
49010     + *    number of terms and documents that exceed their "minimum" value as indicated on the topic ds.
49011     + *   If &scoring is nonblank, the same variables will contain either 1 (if the weighted sum >=
49012     + *    _docCutoff) or 0 (if it is not).  In this case, variables including a raw suffix will indicate
49013     + *   the raw values as calculated above (e.g. texttopic_raw4-texttopic_raw10).  Also, the topic ds
49014     + *    is NOT updated when scoring.
49015     + *
49016     + *   If docds is passed in, then all variables are added to existing variables on the docds.  In this
49017     + *     case, any documents that have no terms for any of the topics will have 0 for all topic variables.
49018     + *     If docds is not passed in, of course, no concatenation is done, and topics that have no terms
49019     + *     for any of the topics will not appear.
49020     + *
49021     + * Unit Tests:  These unit tests were performed satisfactorily from 11/05-11/23 on this code:
49022     + *   Used existing topic node results to work from... this involves using an existing Text Topic Node and
49023     + *   then rescoring the topics.  Unfortunately, it is not quite this easy since the current tmt_doc_score
49024     + *   also normalizes the topic weights each time it is called for all current topics.  This is incorrect, which
49025     + *   was part of the motivation for this rewrite.  I was able to verify same results using some transformations,
49026     + *   however.
49027     + *
49028     + *   1. Verify that when docds= valid value, that the newdocds contains the new variables, and set to the new
49029     + *       values when they differ from the old ones.  Also that it only has the
49030     + *      new variables when docds is not passed in.
49031     + *   2. Verify that when scoring=yes, the _numdocs and _numterms is not updated, but that the _# variables and
49032     + *      the raw_# variables ARE created, and that the number of 1s in each _# variable is correct based on the
49033     + *      document cutoffs specified.
49034     + *   3. Verify that when scoring=, _numdocs and _numterms IS updated, but that _numterms is the same as was
49035     + *      generated by tmt_doc_score before, and _numdocs is equal to the count of the # of 1s in each topic
49036     + *      variable as generated in the result from 2. above.
49037     + *   4. Verify that the results obtained using tmt_doc_score can be made equivalent to this by performing the
49038     + *      normalization before this code is called.  This was tried for scoring=,docds=, and for scoring=y,
49039     + *      docds=train ds, and scoring=,docds
49040     + *   5. Verify that subsetting topics from 4-10 generate same results for those topics as for topics 1-10.  This
49041     + *      was verified for both scoring=yes and scoring=no.
49042     + *   6. Show that documents that contain no terms for all topics appear and generate 0s for all topic scores when
49043     + *      docds is passed in, but don't appear when docds is not passed in.
49044     + *
49045     + *
49046     + * Last Modified By:
49047     + * Last Modified On: Tue Oct 22 15:19:28 2013
49048     + *
49049     + * End
49050     + * ************************************************************** */
49051     +%macro tmt_doc_score(termtopds=tmp_term_topics,outds=,docds=,newdocds=work.topdocs,
49052     +                     topicds=tmp_topics, termsumds=,scoring=,prefix=_topic,
49053     +                     pivot=.5,norm=,outpos=,topicpos=);
49054     +%let _mintopic=1;
49055     +
49056     +/* Remove any duplicate topic ids before scoring */
49057     +proc sort data=&topicds nodupkey; by _topicid;
49058     +proc sort data=&termtopds nodupkey; by _termid _topicid; run;
49059     +proc sql noprint;
49060     +    select max(_topicid), min(_topicid) into :_maxtopic, :_mintopic from &topicds;
49061     +       quit;
49062     +%if &_mintopic eq . %then %let _mintopic=1;
49063     +/*
49064     +%if &scoring ne %then %do;
49065     +    %let _mintopic=1;
49066     +%end;
49067     +*/
49068     +
49069     +%let _mintopic=%left(&_mintopic);
49070     +%let _maxtopic=%left(&_maxtopic);
49071     +
49072     +/* Do the following if there are any topics to be scored */
49073     +%if &_maxtopic >0 %then %do;
49074     +
49075     +%let _minlab=%ktrim(_tmlab)&_mintopic;
49076     +%let _maxlab=%ktrim(_tmlab)&_maxtopic;
49077     +proc sql noprint;
49078     +    select _name into :&_minlab - :&_maxlab from &topicds;
49079     +       quit;
49080     +
49081     +data &newdocds (drop=_topicid _doccutoff _termCutoff _name _cat _displaycat  _numterms _numdocs
49082     +                _weight _termid rc _termnum_ i _count_)
49083     +   %if &scoring= %then %do;
49084     +      &topicds (keep=_topicid _name _cat _displaycat _numterms _numdocs _docCutoff _termCutoff)
49085     +         %end;
49086     +   %if &outpos ne and &topicpos ne %then %do;
49087     +      &topicpos (keep=_topicid _document_ _offset_ _length_ _termnum_)
49088     +         %end;
49089     +   ;
49090     +   if 0 then set &topicds &termtopds;
49091     +
49092     +   /* Create topic hash table */
49093     +   dcl hash _topic_hash(dataset: "&topicds", ordered: "a");
49094     +   _topic_hash.defineKey("_topicid");
49095     +   _topic_hash.defineData("_topicid","_docCutoff","_termCutoff","_name","_cat","_numterms",
49096     +                     "_numdocs");
49097     +   _topic_hash.defineDone();
49098     +
49099     +   dcl hiter _it_topic("_topic_hash");
49100     +
49101     +   /* Unless we are scoring, zero out _numterms and _numdocs since we will recalculate based on
49102     +    currently specified cutoffs
49103     +    */
49104     +   %if &scoring= %then %do;
49105     +      rc=_it_topic.first();
49106     +      do while(rc=0);
49107     +         _numterms=0; _numdocs=0;
49108     +         _topic_hash.replace();
49109     +         rc=_it_topic.next();
49110     +         end;
49111     +      %end;
49112     +
49113     +   /* Create term-topic hash table */
49114     +   dcl hash _termtopics(multidata: "Y");
49115     +   _termtopics.defineKey("_termid");
49116     +   _termtopics.defineData("_termid","_topicid", "_weight");
49117     +   _termtopics.defineDone();
49118     +
49119     +   /* Now read in observations, and, for every one whose abs(weight) >= _termCutoff, add
49120     +    it to _termtopics hash table and increment the _numdocs count in the topics hash table
49121     +    */
49122     +   do until(eof);
49123     +      set &termtopds end=eof;
49124     +      if _topic_hash.find() ne 0 then do;
49125     +         put "topic " _topicid " not found in topic data set";
49126     +         end;
49127     +      else if abs(_weight)>= _termCutoff then do;
49128     +
49129     +         /* If we are not scoring, adjust the term counts */
49130     +         %if &scoring= %then %do;
49131     +            _numterms+1;
49132     +            _topic_hash.replace();
49133     +            %end;
49134     +
49135     +         /* Add to _termtopics */
49136     +         _termtopics.add();
49137     +         end;
49138     +      end;
49139     +
49140     +   /* Now create document hash table. This will have one row for each document, and contain the
49141     +      weighted topic values for each of the topics on that one row.
49142     +    */
49143     +   array _topic{&_mintopic:&_maxtopic} &prefix.raw&_mintopic-&prefix.raw&_maxtopic;
49144     +   format &prefix.raw&_mintopic-&prefix.raw&_maxtopic 5.3;
49145     +      %if &scoring ne %then %do;
49146     +         array trunc{&_mintopic:&_maxtopic} &prefix.&_mintopic-&prefix.&_maxtopic;
49147     +         array notrunc{&_mintopic:&_maxtopic} &prefix.raw&_mintopic-&prefix.raw&_maxtopic;
49148     +         /* %put "using superq"; */
49149     +         %do i=&_mintopic %to &_maxtopic;
49150     +            /* %put &_tm_tmp; */
49151     +            %let _tm_tmp=_1_0_%bquote(&&_tmlab&i);
49152     +            label &prefix.&i="&_tm_tmp";
49153     +            %let _tm_tmp=%bquote(&&_tmlab&i);
49154     +            label &prefix.raw&i="&_tm_tmp";
49155     +            %end;
49156     +
49157     +         %end;
49158     +
49159     +   dcl hash _doc_hash(hashexp:16,ordered: 'a');
49160     +   _doc_hash.defineKey("_document_");
49161     +   _doc_hash.defineData("_document_"
49162     +                    %do i=&_mintopic %to &_maxtopic; ,"&prefix.raw&i" %end;
49163     +                    );
49164     +   _doc_hash.defineDone();
49165     +
49166     +   /* Now read in out data set */
49167     +   eof=0;
49168     +   do until(eof);
49169     +      set &outds end=eof;
49170     +
49171     +      /* If we haven't seen this document yet, set all topic weights to zero */
49172     +      if _doc_hash.find() ne 0 then do;
49173     +         do i=&_mintopic to &_maxtopic;
49174     +            _topic{i}=0;
49175     +            end;
49176     +         _doc_hash.add();
49177     +         end;
49178     +
49179     +      /* Check to see if this term has significant weights on any topics */
49180     +      _termid=_termnum_;
49181     +      rc=_termtopics.find();
49182     +      if rc = 0 then do;
49183     +         do while(rc=0);
49184     +            _topic{_topicid}= _topic{_topicid}+_weight*_count_;
49185     +            rc=_termtopics.find_next();
49186     +            end;
49187     +         _doc_hash.replace();
49188     +         end;
49189     +      end;
49190     +   _doc_hash.output(dataset: "docds");
49191     +
49192     +   /****************************************************************************
49193     +    * Following is new code for tmt_doc_score_new.  Should be moved into %tmt_doc_score
49194     +    * for 9.4
49195     +    ****************************************************************************/
49196     +
49197     +   %if &outpos ne and &topicpos ne %then %do;
49198     +   /* Now read in outpos data set */
49199     +   eof=0;
49200     +   do until(eof);
49201     +      set &outpos end=eof;
49202     +      if _doc_hash.find() = 0 then do;
49203     +         /* Check to see if this term and document are both in the topic.  If so, output */
49204     +         _termid=_termnum_;
49205     +         rc=_termtopics.find();
49206     +         do while(rc=0);
49207     +            if _topic_hash.find()=0 then
49208     +               if round( _topic{_topicid},.001) >= _doccutoff then output &topicpos;
49209     +            rc=_termtopics.find_next();
49210     +            end;
49211     +         end;
49212     +               else put 'document ' _document_ ' not found.';
49213     +      end;
49214     +
49215     +
49216     +    %end;
49217     +
49218     +   /****************************************************************************
49219     +    * end of new code
49220     +    ****************************************************************************/
49221     +
49222     +   /* Now we have info in the docds hash table for cumulative weights.  Prepare for output and
49223     +      create numdocs for the topics hash table */
49224     +
49225     +   /* Note: If a docds was passed in, we load it here... this accounts for documents that have no
49226     +      positive topic weights.  Otherwise, we process docds hash table iteratively
49227     +    */
49228     +   %if &docds= %then %do;
49229     +      dcl hiter _doc_it("_doc_hash");
49230     +      rc=_doc_itfirst();
49231     +      do while(rc=0);
49232     +         %end;
49233     +      %else %do;
49234     +         eof=0;
49235     +         do until(eof);
49236     +            set &docds end=eof;
49237     +            rc=_doc_hash.find();
49238     +            %end;
49239     +         if rc ne 0 then
49240     +            do i=&_mintopic to &_maxtopic;
49241     +               _topic{i}=0; %if &scoring ne %then trunc{i} = 0;;
49242     +               end;
49243     +         else do _topicid=&_mintopic to &_maxtopic;
49244     +            /* Round value to nearest thousandth */
49245     +            _topic{_topicid}=round( _topic{_topicid},.001);
49246     +            _topic_hash.find();
49247     +            if _topic{_topicid} >= _doccutoff then do;
49248     +               %if &scoring= %then %do;
49249     +                  _numdocs=_numdocs+1;
49250     +                  _topic_hash.replace();
49251     +                  end;
49252     +                  %end;
49253     +               %else %do;
49254     +                  trunc{_topicid} = 1;
49255     +                  end;
49256     +            else trunc{_topicid} = 0;
49257     +            %end;
49258     +         end;
49259     +         output &newdocds;
49260     +       %if &docds= %then rc=_doc_itnext();;
49261     +       end;
49262     +
49263     +   %if &scoring= %then %do;
49264     +      eof=0;
49265     +      do until(eof);
49266     +         set &topicds end=eof;
49267     +         rc=_topic_hash.find();
49268     +         output &topicds;
49269     +         end;
49270     +      %end;
49271     +   * _termtopics.output(dataset: "&termtopds");
49272     +   run;
49273     +
49274     +/* proc sort data=&termtopds; by _topicid _termid; run; */
49275     +%end;
49276     +%else %if &docds ne %then %do;
49277     +    /* If there were no documents,set the new document table to contain the old documents */
49278     +    data &newdocds;
49279     +        set &docds;
49280     +    run;
49281     +
49282     +%end;
49283     +
49284     +%mend;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tm_parse_score.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TM_PARSE_SCORE.SOURCE입니다.
49285     +/* ****************************************************************
49286     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
49287     + *
49288     + * Name:             tm_parse_score.sas
49289     + * Product:          SAS Text Miner
49290     + * Language:         Sas
49291     + * Script:
49292     + *
49293     + * Usage:
49294     + *
49295     + * Purpose:  Used to score new documents.
49296     + *
49297     + * History:
49298     + * 11Jun09 Initial Coding
49299     + *
49300     + * Notes:
49301     + *
49302     + * Last Modified By:
49303     + * Last Modified On: Tue May 12 15:06:35 2015
49304     + *
49305     + * End
49306     + * ************************************************************** */
49307     +* options mstored sasmstore=sashelp;
MPRINT(SCORE):   * options mstored sasmstore=sashelp;
49308     +
49309     +%macro tm_parse_score(nodeid=,termds=,multids=,configds=,outds=,prefile=,scorefile=,
49310     +                      where_phrase=,need_search=0);
49311     +proc sql noprint;
49312     +   select parsevar into :_tm_parseVar from &configds;
49313     +   quit;
49314     +
49315     +
49316     +%let _hasmultitermdata=0;
49317     +data _config;
49318     +   set &configds;
49319     +run;
49320     +%if %sysfunc(exist(&multids))  %then %do;
49321     +    proc sql noprint;
49322     +       select count(*) into: _numMultis
49323     +       from &multids;
49324     +    quit;
49325     +   %if &_numMultis >0 %then %do;
49326     +      %let _hasmultitermdata =1;
49327     +   %end;
49328     +   %else %do;
49329     +      data _config;
49330     +         length multiterm $ 1;
49331     +         set _config;
49332     +         multiterm="";
49333     +      run;
49334     +      /* update &configds, which may change configds*/
49335     +      data  &configds;
49336     +        set _config;
49337     +      run;
49338     +   %end;
49339     +
49340     +%end;
49341     +
49342     +
49343     +   %if %eval(&syscc)>4 %then %do;
49344     +      %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
49345     +      %return;
49346     +   %end;
49347     +
49348     +filename _tmcode "&prefile";
49349     +
49350     +data _null_;
49351     +   length string $256 string2 $256 string3 $256;
49352     +   file _tmcode mod;
49353     +   put;
49354     +     %if &lastprescore eq %then %do;
49355     +      put 'libname termloc "' "&em_term_loc" '";';
49356     +      put;
49357     +     %end;
49358     +
49359     +   %if &_hasmultitermdata > 0 %then %do;
49360     +
49361     +      string='%let _multifile=' || '%SYSFUNC(PATHNAME(work))'||'/'||"&NODEID._multi.txt;";
49362     +      put string;
49363     +      string='%let _multiSLength='||' %klength(&_multifile);';
49364     +      put string;
49365     +      put;
49366     +
49367     +      put "data &configds;";
49368     +      put 'length multiterm $ &_multiSLength;';
49369     +      put "set &configds;";
49370     +      string ='multiterm='|| 'ktrim(symget('||"'"||'_multifile'||"'));";
49371     +      put string;
49372     +      put 'run;';
49373     +      put;
49374     +
49375     +      put 'proc sql noprint;';
49376     +      put     'select multiencoding into: _tmmultiencoding';
49377     +      put     "from &configds;";
49378     +      put 'quit;';
49379     +
49380     +      put;
49381     +
49382     +      string= 'filename _multout '||'"'|| '&_multifile'||'";';
49383     +      put string;
49384     +      put 'data _NULL_;';
49385     +      string= "set &multids;";
49386     +      put string;
49387     +      string= 'file _multout encoding= '||'"'|| '%trim(&_tmmultiencoding)'||'";';
49388     +      put string;
49389     +      string = 'put term '||"'"|| ":3:"||"'"||' role;';
49390     +      put string;
49391     +      put 'run;';
49392     +
49393     +   %end;
49394     +
49395     + run;
49396     +
49397     +
49398     + filename _tmcode "&scorefile";
49399     +    data _NULL_;
49400     +        file _tmcode;
49401     +        length string $200;
49402     +
49403     +          /*Fix for S1155404: data step between tgscore functions*/
49404     +        %if %symexist(last_prescore_node) %then %do;
49405     +          %if (&last_filter_node eq &last_prescore_node and &last_filter_node ne &last_parse_node) %then %do;
49406     +             put;
49407     +             put 'data &em_score_output; set &em_score_output;';
49408     +             put;
49409     +          %end;
49410     +        %end;
49411     +
49412     +        %if &where_phrase ne %then %do; put "where &where_phrase;"; %end;
49413     +        put '_document_ = _n_;';
49414     +        string='rc=tgscore(' || "%trim(&_tm_parseVar)" || ',"' || "&configds" ||
49415     +           '", "' || "&termds" || '", "' || "&outds" || '", "' || '&_multifile' || '", ' ||
49416     +
49417     +           "&need_search);";
49418     +        put string;
49419     +        put 'drop rc;';
49420     +    run;
49421     +filename _tmcode;
49422     +
49423     +
49424     +%mend;
49425     +
49426     +/*
49427     + filename temp catalog 'sashelp.emutil.em_copyfile.source';
49428     + %include temp;
49429     + %tm_parse_score(nodeid=node1,termds=unittest.textparsing_terms,
49430     +configds=unittest.textparsing_tmconfig,
49431     + outds=work._tmout, prefile=c:\pre.sas,scorefile=c:\score.sas,
49432     + need_search=1);
49433     +%include "c:\pre.sas";
49434     + data work._scored;
49435     +%include "c:\score.sas";
49436     + run;
49437     +
49438     + */
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tm_data2code.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TM_DATA2CODE.SOURCE입니다.
49439     +/* ****************************************************************
49440     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
49441     + *
49442     + * Name:             tm_data2code.sas
49443     + * Product:          SAS Text Miner
49444     + * Language:         Sas
49445     + * Script:
49446     + *
49447     + * Usage:  %tm_data2code(data=, outdata=WORK.DATA);
49448     + *
49449     + * Purpose:          To do a data2code (like %em_data2code()) but allow the input data
49450     + *  to be view or data.
49451     + *
49452     + *    PARAMETERS:
49453     + *        DATA        = data set
49454     + *        OUTDATA     = out data set
49455     + *        OUTFILE     = file where to saved the code
49456     + *        APPEND      = append (Y/N)
49457     + * History:
49458     + * 11Jun09 Initial Coding
49459     + *
49460     + * Notes:
49461     + *
49462     + * Last Modified By:
49463     + * Last Modified On: Thu Jul 23 11:00:06 2009
49464     + *
49465     + * End
49466     + * ************************************************************** */
49467     +%macro tm_data2code(data=, outdata=WORK.DATA, outfile=, append=N);
49468     +%if &data eq %then %do;
49469     +   %put ERROR: Data set not defined;
49470     +   %end;
49471     +%else %do;
49472     +   %if (^%sysfunc(exist(&data)) and ^%sysfunc(exist(&data, view))) %then %do;
49473     +       %put ERROR: Data set does not exist;
49474     +       %end;
49475     +   %else %do;
49476     +      %global em_data em_outdata em_codefile em_append;
49477     +      %let em_data=&data;
49478     +      %let em_outdata=&outdata;
49479     +      %let em_codefile=&outfile;
49480     +      %let em_append=&append;
49481     +      proc display c=sashelp.emutil.data2code.scl; run;
49482     +      %end;
49483     +   %end;
49484     +%mend;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   data EMWS5.TextTopic2_repTopics(drop=_cat);
MPRINT(SCORE):   set EMWS5.TextTopic2_topics;
MPRINT(SCORE):   label _displayCat = "범주";
MPRINT(SCORE):   select(ksubstr(_cat,1,1));
MPRINT(SCORE):   when('S') _displayCat = "단일";
MPRINT(SCORE):   when('M') _displayCat = "다중";
MPRINT(SCORE):   when('U') _displayCat = "사용자";
MPRINT(SCORE):   otherwise;
MPRINT(SCORE):   end;
MPRINT(SCORE):   run;
 
NOTE: 25개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TOPICS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_REPTOPICS은(는) 25개의 관측값과 7개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.14 초
      cpu 시간            0.11 초
 
 
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   cellwgt="LOG";
MPRINT(SCORE):   set EMWS5.TextFilter2_tmconfig;
MPRINT(SCORE):   call symput('cellwgt',cellwgt);
MPRINT(SCORE):   run;
 
NOTE: 1개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_TMCONFIG.에서 읽었습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   proc sql noprint;
MPRINT(SCORE):   create table work._termtopics as select a.* from EMWS5.TextTopic2_termtopics as a, EMWS5.TextTopic2_topics as b where a._topicid=b._topicid and abs(_weight)>=_termCutoff ;
NOTE: Table WORK._TERMTOPICS created, with 2844 rows and 3 columns.
 
MPRINT(SCORE):   select parsevar into :_tm_parseVar from EMWS5.TextFilter2_tmconfig;
MPRINT(SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.07 초
      cpu 시간            0.07 초
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(TMT_SCORE):   data EMWS5.TextTopic2_tmout;
MPRINT(TMT_SCORE):   set EMWS5.TextTopic2_tmout_normalized;
MPRINT(TMT_SCORE):   run;
 
NOTE: 5620개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TMOUT_NORMALIZED.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TMOUT은(는) 5620개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
 
 
MPRINT(TMT_DOC_SCORE):   proc sort data=EMWS5.TextTopic2_topics nodupkey;
MPRINT(TMT_DOC_SCORE):   by _topicid;
NOTE: 25개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TOPICS.에서 읽었습니다.
NOTE: 중복 키값을 가지고 있는 0개의 관측값이 삭제되었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TOPICS은(는) 25개의 관측값과 8개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TMT_DOC_SCORE):   proc sort data=work._termtopics nodupkey;
MPRINT(TMT_DOC_SCORE):   by _termid _topicid;
MPRINT(TMT_DOC_SCORE):   run;
 
NOTE: 2844개의 관측값을 데이터셋 WORK._TERMTOPICS.에서 읽었습니다.
NOTE: 중복 키값을 가지고 있는 0개의 관측값이 삭제되었습니다.
NOTE: 데이터셋 WORK._TERMTOPICS은(는) 2844개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
MPRINT(TMT_DOC_SCORE):   proc sql noprint;
MPRINT(TMT_DOC_SCORE):   select max(_topicid), min(_topicid) into :_maxtopic, :_mintopic from EMWS5.TextTopic2_topics;
MPRINT(TMT_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
 
 
MPRINT(TMT_DOC_SCORE):   proc sql noprint;
MPRINT(TMT_DOC_SCORE):   select _name into :_tmlab1 - :_tmlab25 from EMWS5.TextTopic2_topics;
MPRINT(TMT_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
 
 
MPRINT(TMT_DOC_SCORE):   data EMWS5.TextTopic2_TRAIN (drop=_topicid _doccutoff _termCutoff _name _cat _displaycat _numterms _numdocs _weight _termid rc _termnum_ i _count_) ;
MPRINT(TMT_DOC_SCORE):   if 0 then set EMWS5.TextTopic2_topics work._termtopics;
MPRINT(TMT_DOC_SCORE):   dcl hash _topic_hash(dataset: "EMWS5.TextTopic2_topics", ordered: "a");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineKey("_topicid");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineData("_topicid","_docCutoff","_termCutoff","_name","_cat","_numterms", "_numdocs");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineDone();
MPRINT(TMT_DOC_SCORE):   dcl hiter _it_topic("_topic_hash");
MPRINT(TMT_DOC_SCORE):   dcl hash _termtopics(multidata: "Y");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineKey("_termid");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineData("_termid","_topicid", "_weight");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineDone();
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set work._termtopics end=eof;
MPRINT(TMT_DOC_SCORE):   if _topic_hash.find() ne 0 then do;
MPRINT(TMT_DOC_SCORE):   put "topic " _topicid " not found in topic data set";
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   else if abs(_weight)>= _termCutoff then do;
MPRINT(TMT_DOC_SCORE):   _termtopics.add();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   array _topic{1:25} TextTopic2_raw1-TextTopic2_raw25;
MPRINT(TMT_DOC_SCORE):   format TextTopic2_raw1-TextTopic2_raw25 5.3;
MPRINT(TMT_DOC_SCORE):   array trunc{1:25} TextTopic2_1-TextTopic2_25;
MPRINT(TMT_DOC_SCORE):   array notrunc{1:25} TextTopic2_raw1-TextTopic2_raw25;
MPRINT(TMT_DOC_SCORE):   label TextTopic2_1= "_1_0_helpful,helpful staff,friendly,+building,+staff";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw1= "helpful,helpful staff,friendly,+building,+staff";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_2= "_1_0_+subway,gorgeous,’,clean,+location";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw2= "+subway,gorgeous,’,clean,+location";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_3= "_1_0_+service,excellent service,excellent,atmosphere,+bed";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw3= "+service,excellent service,excellent,atmosphere,+bed";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_4= "_1_0_great location,+location,+great,decor,friendly staff";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw4= "great location,+location,+great,decor,friendly staff";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_5= "_1_0_+beautiful hotel,beautiful,+hotel,super,+large";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw5= "+beautiful hotel,beautiful,+hotel,super,+large";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_6= "_1_0_+good,+restaurant,+building,+location,good location";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw6= "+good,+restaurant,+building,+location,good location";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_7= "_1_0_comfy,super,+bed,spacious,+building";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw7= "comfy,super,+bed,spacious,+building";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_8= "_1_0_desk,front,front desk,exceptional,+concierge";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw8= "desk,front,front desk,exceptional,+concierge";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_9= "_1_0_design,fantastic,vibe,atmosphere,lovely";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw9= "design,fantastic,vibe,atmosphere,lovely";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_10= "_1_0_decor,+nice,excellent,clean,lounge";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw10= "decor,+nice,excellent,clean,lounge";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_11= "_1_0_breakfast,+nice,value,real,great value";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw11= "breakfast,+nice,value,real,great value";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_12= "_1_0_excellent,+bathroom,stunning,well,+good";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw12= "excellent,+bathroom,stunning,well,+good";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_13= "_1_0_+restaurant,spacious,gorgeous,+room,excellent";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw13= "+restaurant,spacious,gorgeous,+room,excellent";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_14= "_1_0_great staff,+great,lovely,+restaurant,+bar";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw14= "great staff,+great,lovely,+restaurant,+bar";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_15= "_1_0_beautifully,+view,access,+building,+easy";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw15= "beautifully,+view,access,+building,+easy";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_16= "_1_0_architecture,well,+interior,atrium,interior design";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw16= "architecture,well,+interior,atrium,interior design";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_17= "_1_0_comfortable,quiet,clean,+room,+bed";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw17= "comfortable,quiet,clean,+room,+bed";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_18= "_1_0_+building,+bar,lobby,absolutely,gorgeous";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw18= "+building,+bar,lobby,absolutely,gorgeous";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_19= "_1_0_food,back,+drink,history,+service";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw19= "food,back,+drink,history,+service";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_20= "_1_0_stay,+good,always,friendly,+hotel";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw20= "stay,+good,always,friendly,+hotel";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_21= "_1_0_+bar,absolutely,+drink,+bed,food";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw21= "+bar,absolutely,+drink,+bed,food";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_22= "_1_0_fantastic,+restaurant,property,incredible,fantastic location";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw22= "fantastic,+restaurant,property,incredible,fantastic location";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_23= "_1_0_amazing,property,absolutely,amazing property,beautiful";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw23= "amazing,property,absolutely,amazing property,beautiful";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_24= "_1_0_wonderful,notch,top notch,top,water";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw24= "wonderful,notch,top notch,top,water";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_25= "_1_0_atmosphere,excellent,courteous,+nice,manhattan";
MPRINT(TMT_DOC_SCORE):   label TextTopic2_raw25= "atmosphere,excellent,courteous,+nice,manhattan";
MPRINT(TMT_DOC_SCORE):   dcl hash _doc_hash(hashexp:16,ordered: 'a');
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineKey("_document_");
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineData("_document_" ,"TextTopic2_raw1" ,"TextTopic2_raw2" ,"TextTopic2_raw3" ,"TextTopic2_raw4" ,"TextTopic2_raw5" ,"TextTopic2_raw6" ,"TextTopic2_raw7" ,"TextTopic2_raw8" ,"TextTopic2_raw9" ,"TextTopic2_raw10"
,"TextTopic2_raw11" ,"TextTopic2_raw12" ,"TextTopic2_raw13" ,"TextTopic2_raw14" ,"TextTopic2_raw15" ,"TextTopic2_raw16" ,"TextTopic2_raw17" ,"TextTopic2_raw18" ,"TextTopic2_raw19" ,"TextTopic2_raw20" ,"TextTopic2_raw21" ,"TextTopic2_raw22"
,"TextTopic2_raw23" ,"TextTopic2_raw24" ,"TextTopic2_raw25" );
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineDone();
MPRINT(TMT_DOC_SCORE):   eof=0;
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set EMWS5.TextTopic2_tmout end=eof;
MPRINT(TMT_DOC_SCORE):   if _doc_hash.find() ne 0 then do;
MPRINT(TMT_DOC_SCORE):   do i=1 to 25;
MPRINT(TMT_DOC_SCORE):   _topic{i}=0;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.add();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _termid=_termnum_;
MPRINT(TMT_DOC_SCORE):   rc=_termtopics.find();
MPRINT(TMT_DOC_SCORE):   if rc = 0 then do;
MPRINT(TMT_DOC_SCORE):   do while(rc=0);
MPRINT(TMT_DOC_SCORE):   _topic{_topicid}= _topic{_topicid}+_weight*_count_;
MPRINT(TMT_DOC_SCORE):   rc=_termtopics.find_next();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.replace();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.output(dataset: "docds");
MPRINT(TMT_DOC_SCORE):   eof=0;
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set EMWS5.TextFilter2_TRAIN end=eof;
MPRINT(TMT_DOC_SCORE):   rc=_doc_hash.find();
MPRINT(TMT_DOC_SCORE):   if rc ne 0 then do i=1 to 25;
MPRINT(TMT_DOC_SCORE):   _topic{i}=0;
MPRINT(TMT_DOC_SCORE):   trunc{i} = 0;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   else do _topicid=1 to 25;
MPRINT(TMT_DOC_SCORE):   _topic{_topicid}=round( _topic{_topicid},.001);
MPRINT(TMT_DOC_SCORE):   _topic_hash.find();
MPRINT(TMT_DOC_SCORE):   if _topic{_topicid} >= _doccutoff then do;
MPRINT(TMT_DOC_SCORE):   trunc{_topicid} = 1;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   else trunc{_topicid} = 0;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   output EMWS5.TextTopic2_TRAIN;
MPRINT(TMT_DOC_SCORE):  ;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   * _termtopics.output(dataset: "&termtopds");
MPRINT(TMT_DOC_SCORE):   run;
 
NOTE: 25개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TOPICS.에서 읽었습니다.
NOTE: 데이터셋 WORK.DOCDS은(는) 487개의 관측값과 26개의 변수를 가지고 있습니다.
NOTE: 25개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TOPICS.에서 읽었습니다.
NOTE: 2844개의 관측값을 데이터셋 WORK._TERMTOPICS.에서 읽었습니다.
NOTE: 5620개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TMOUT.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 EMWS5.TEXTPARSING2_TRAIN.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_DOC_IDS.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_TRAIN.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TRAIN은(는) 499개의 관측값과 53개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.23 초
      cpu 시간            0.23 초
 
 
MPRINT(TMT_SCORE):  ;
MPRINT(TMT_SCORE):   proc sql noprint;
MPRINT(TMT_SCORE):   create view EMWS5.TextTopic2_TRANSACTION as select ktrim(term) || '|' || role as _item_, b.* from EMWS5.TextTopic2_weightedterms as a, EMWS5.TextTopic2_weightedtmout as b where b._termnum_=a.key and a._ispar ne '.' order by
b._termnum_, b._document_ ;
NOTE: SQL view EMWS5.TEXTTOPIC2_TRANSACTION has been defined.
MPRINT(TMT_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename _meta "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\CDELTA_TRAIN.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   file _meta;
MPRINT(SCORE):   put 'if CREATOR = "&EM_NODEID" and upcase(NAME) =: upcase("&EM_NODEID") then do;';
MPRINT(SCORE):   put '   if upcase(NAME) =: upcase("&EM_NODEID._RAW") then do;';
MPRINT(SCORE):   put '      ROLE="INPUT";';
MPRINT(SCORE):   put '      LEVEL="INTERVAL";';
MPRINT(SCORE):   put '      end;';
MPRINT(SCORE):   put '   else do;';
MPRINT(SCORE):   put '      ROLE="SEGMENT";';
MPRINT(SCORE):   put '      LEVEL="BINARY";';
MPRINT(SCORE):   put '      end;';
MPRINT(SCORE):   put '   end;';
MPRINT(SCORE):   put '   if upcase(NAME) = "_DOCUMENT_" then do;';
MPRINT(SCORE):   put '      ROLE="ID";';
MPRINT(SCORE):   put '      LEVEL="NOMINAL";';
MPRINT(SCORE):   put '      end;';
MPRINT(SCORE):   run;
 
NOTE: 파일 _META:
      파일 이름=C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,파일 크기 (바이트)=0,
      마지막 수정일=2018년 11월 17일 17시14분36초,
      생성 시간=2018년 11월 17일 17시12분14초
 
NOTE: 14개의 레코드를 파일 _META에 기록했습니다.
      최소 레코드 길이는 7입니다.
      최대 레코드 길이는 75입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
 
 
MPRINT(SCORE):   filename _meta;
NOTE: Fileref _META을(를) 삭제했습니다.
MPRINT(SCORE):   filename _meta "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\CDELTA_TRANSACTION.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   file _meta;
MPRINT(SCORE):   put 'if upcase(NAME)="_DOCUMENT_" then do;';
MPRINT(SCORE):   put '   ROLE="ID";';
MPRINT(SCORE):   put '   LEVEL="NOMINAL";';
MPRINT(SCORE):   put 'end;';
MPRINT(SCORE):   put 'if upcase(NAME)="_ITEM_" then do;';
MPRINT(SCORE):   put '   ROLE="TARGET";';
MPRINT(SCORE):   put '   LEVEL="NOMINAL";';
MPRINT(SCORE):   put 'end;';
MPRINT(SCORE):   put 'if upcase(NAME) in ("_COUNT_","_TERMNUM_") then do;';
MPRINT(SCORE):   put '   ROLE="REJECTED";';
MPRINT(SCORE):   put 'end;';
MPRINT(SCORE):   run;
 
NOTE: 파일 _META:
      파일 이름=C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\CDELTA_TRANSACTION.sas,
      RECFM=V,LRECL=32767,파일 크기 (바이트)=0,
      마지막 수정일=2018년 11월 17일 17시14분36초,
      생성 시간=2018년 11월 17일 17시14분36초
 
NOTE: 11개의 레코드를 파일 _META에 기록했습니다.
      최소 레코드 길이는 4입니다.
      최대 레코드 길이는 51입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
 
 
MPRINT(SCORE):   filename _meta;
NOTE: Fileref _META을(를) 삭제했습니다.
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   call symput("emwspath", strip(pathname("EMWS5")));
MPRINT(SCORE):   run;
 
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename topicpre "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\PRESCORECODE.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   file topicpre;
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtxtext.tmt_doc_score.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtxtext.row_pivot_normalize.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp;';
MPRINT(SCORE):   run;
 
NOTE: 파일 TOPICPRE:
      파일 이름=C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\PRESCORECODE.sas,
      RECFM=V,LRECL=32767,파일 크기 (바이트)=0,
      마지막 수정일=2018년 11월 17일 17시14분36초,
      생성 시간=2018년 11월 17일 17시14분36초
 
NOTE: 5개의 레코드를 파일 TOPICPRE에 기록했습니다.
      최소 레코드 길이는 14입니다.
      최대 레코드 길이는 68입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
 
 
MPRINT(SCORE):   filename tmpre "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextFilter2\PRESCORECODE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file topicpre MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("tmpre",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: 파일 TOPICPRE:
      파일 이름=C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\PRESCORECODE.sas,
      RECFM=V,LRECL=20000,파일 크기 (바이트)=182,
      마지막 수정일=2018년 11월 17일 17시14분36초,
      생성 시간=2018년 11월 17일 17시14분36초
 
NOTE: 23개의 레코드를 파일 TOPICPRE에 기록했습니다.
      최소 레코드 길이는 1입니다.
      최대 레코드 길이는 81입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename tmpre;
NOTE: Fileref TMPRE을(를) 삭제했습니다.
MPRINT(SCORE):   libname termloc "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5";
NOTE: 라이브러리 참조 TERMLOC은(는) EMWS5과(와) 같은 물리적 라이브러리를 참조합니다.
NOTE: 라이브러리 참조 'TERMLOC'이(가) 다음과 같이 할당되었습니다.
      엔진:        V9
      물리적 경로: C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5
MPRINT(SCORE):   filename topicpre;
NOTE: Fileref TOPICPRE을(를) 삭제했습니다.
MPRINT(SCORE):   filename _tpcscr "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\EMPUBLISHSCORE.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   file _tpcscr ;
MPRINT(SCORE):   put '/* First we create a Weighted TMOUT Data Set based on weighted terms*/';
MPRINT(SCORE):   put "proc tmutil data=work.TextFilter2_out key=termloc.TextFilter2_filtterms;";
MPRINT(SCORE):   put "control init release;";
MPRINT(SCORE):   put "weight cellwgt=LOG in_weight=termloc.TextFilter2_filtterms (keep=key weight);";
MPRINT(SCORE):   put "output out=work._weighted_tmout;"/;
MPRINT(SCORE):   put '%row_pivot_normalize(transds=work._weighted_tmout, outtransds=WORK.TMOUTNORM,';
MPRINT(SCORE):   put '      col_sumds=work._termsumds,row=_document_,col=_termnum_,entry=_count_,';
MPRINT(SCORE):   put "      pivot=0.7,tmt_config=termloc.TextFilter2_tmconfig,tmt_train=0,prefix=TextTopic2);"/;
MPRINT(SCORE):   put '/*initialize topics and termtopics datasets in case they do not exist (0 topics case)*/';
MPRINT(SCORE):   put '%macro tmt_check_topics_exist;';
MPRINT(SCORE):   put '%if(^%sysfunc(exist('"termloc.TextTopic2_topics"'))) %then %do;';
MPRINT(SCORE):   put '   proc sql noprint; create table '"termloc.TextTopic2_topics";
MPRINT(SCORE):   put '   (_topicid decimal, _docCutoff decimal, _termCutoff decimal, _name char(1024), _cat char(4), /* _apply char(1), */ _numterms decimal, _numdocs decimal, _displayCat char(200) );';
MPRINT(SCORE):   put '   quit;';
MPRINT(SCORE):   put '%end;';
MPRINT(SCORE):   put '%if(^%sysfunc(exist('"termloc.TextTopic2_termtopics"'))) %then %do;';
MPRINT(SCORE):   put '   proc sql noprint; create table '"termloc.TextTopic2_termtopics";
MPRINT(SCORE):   put '   (_topicid decimal, _weight decimal, _termid decimal);';
MPRINT(SCORE):   put '   quit;';
MPRINT(SCORE):   put '%end;';
MPRINT(SCORE):   put '%mend tmt_check_topics_exist;';
MPRINT(SCORE):   put '%tmt_check_topics_exist;';
MPRINT(SCORE):   put "data work.TextTopic2_termtopics; set termloc.TextTopic2_termtopics; run;";
MPRINT(SCORE):   put "data work.TextTopic2_topics; set termloc.TextTopic2_topics; run;";
MPRINT(SCORE):   put '%'"tmt_doc_score(termtopds=work.TextTopic2_termtopics"', docds=&em_score_output,';
MPRINT(SCORE):   put "outds=WORK.TMOUTNORM, topicds=work.TextTopic2_topics, newdocds=work._newdocds, scoring=yes,";
MPRINT(SCORE):   put "termsumds=work._termsumds, prefix=TextTopic2_,pivot=0.7);";
MPRINT(SCORE):   put 'data &em_score_output; set work._newdocds;';
MPRINT(SCORE):   ;
MPRINT(SCORE):   run;
 
NOTE: 파일 _TPCSCR:
      파일 이름=C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,파일 크기 (바이트)=0,
      마지막 수정일=2018년 11월 17일 17시14분36초,
      생성 시간=2018년 11월 17일 17시12분14초
 
NOTE: 30개의 레코드를 파일 _TPCSCR에 기록했습니다.
      최소 레코드 길이는 0입니다.
      최대 레코드 길이는 178입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
 
 
MPRINT(SCORE):   filename _tpcscr;
NOTE: Fileref _TPCSCR을(를) 삭제했습니다.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: TextTopic2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
49485      *------------------------------------------------------------*;
49486      * End SCORE: TextTopic2;
49487      *------------------------------------------------------------*;
49488
 
49490      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
49491      * TextTopic2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * TextTopic2: Computing metadata for TRAIN data;
49492      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS5.TextTopic2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS5.TextTopic2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS5.TextTopic2_TRAIN;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS5.TextTopic2_TRAIN out=WORK.M2XDDH5B noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2XDDH5B;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2XDDH5B(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2XDDH5B;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2XDDH5B;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M15G5Z1P NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M15G5Z1P;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M15G5Z1P;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0FJNT1V(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M15G5Z1P;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M15G5Z1P;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M15G5Z1P;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M15G5Z1P;
MPRINT(EMADVISECOLUMNS):   set WORK.M15G5Z1P;
MPRINT(EMADVISECOLUMNS):   label NAME = "변수 이름" TYPE = "유형" ROLE = "역할" LEVEL= "측도 레벨" ORDER= "순서" CREATOR= "생성자" FORMATTYPE= "출력형식 유형" FAMILY= "군" DISTRIBUTION= "분포" PRICE= "가격" LOWERLIMIT= "하한" UPPERLIMIT= "상한" REPORT=
"리 포트" COMMENT= "주석" INDEX= "인덱스" INDEXTYPE= "인덱스 유형" LABEL= "레이블" LENGTH= "길이";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS5.TextFilter2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS5.TextFilter2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS5.TextTopic2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "TextTopic2";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextTopic2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if CREATOR = "TextTopic2" and upcase(NAME) =: upcase("TextTopic2") then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) =: upcase("TextTopic2_RAW") then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE="SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "_DOCUMENT_" then do;
MPRINT(EM_DIAGRAM):   ROLE="ID";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
49852      proc sort data = EMWS5.TextFilter2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS5.TextFilter2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
49853      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
49854      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: 6개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 WORK.SORTEDEMINFO은(는) 6개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
49855      proc sort data = EMWS5.TextTopic2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS5.TextTopic2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
49856      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
49857      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: 5개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 WORK.TEMP_INFO은(는) 5개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
 
 
49858      data EMWS5.TextTopic2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS5.TextTopic2_EMINFO;
49859      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
49860      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
49861      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: 6개의 관측값을 데이터셋 WORK.SORTEDEMINFO.에서 읽었습니다.
NOTE: 5개의 관측값을 데이터셋 WORK.TEMP_INFO.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_EMINFO은(는) 8개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
 
 
49862      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
49863      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
49864      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: WORK.TEMP_INFO(memtype=DATA)을(를) 삭제하는 중입니다.
NOTE: WORK.SORTEDEMINFO(memtype=DATA)을(를) 삭제하는 중입니다.
49865      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: 프로시저 DATASETS 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.06 초
 
 
49866      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
49867      * TextTopic2: Computing metadata for TRANSACTION data;
MPRINT(EM_DIAGRAM):   * TextTopic2: Computing metadata for TRANSACTION data;
49868      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRANSACTION data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\CDELTA_TRANSACTION.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS5.TextTopic2_TRANSACTION out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS5.TextTopic2_TRANSACTION');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS5.TextTopic2_TRANSACTION out=WORK.M0YHU26O noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0YHU26O;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0YHU26O(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0YHU26O;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0YHU26O;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1VD8TUU NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1VD8TUU;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1VD8TUU;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0BK83OR(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1VD8TUU;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1VD8TUU;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1VD8TUU;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1VD8TUU;
MPRINT(EMADVISECOLUMNS):   set WORK.M1VD8TUU;
MPRINT(EMADVISECOLUMNS):   label NAME = "변수 이름" TYPE = "유형" ROLE = "역할" LEVEL= "측도 레벨" ORDER= "순서" CREATOR= "생성자" FORMATTYPE= "출력형식 유형" FAMILY= "군" DISTRIBUTION= "분포" PRICE= "가격" LOWERLIMIT= "하한" UPPERLIMIT= "상한" REPORT=
"리 포트" COMMENT= "주석" INDEX= "인덱스" INDEXTYPE= "인덱스 유형" LABEL= "레이블" LENGTH= "길이";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS5.TextFilter2_TRANSACTION noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS5.TextFilter2_CMeta_TRANSACTION out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS5.TextTopic2_CMeta_TRANSACTION;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "TextTopic2";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextTopic2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME)="_DOCUMENT_" then do;
MPRINT(EM_DIAGRAM):   ROLE="ID";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if upcase(NAME)="_ITEM_" then do;
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in ("_COUNT_","_TERMNUM_") then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
50217      proc sort data = EMWS5.TextFilter2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS5.TextFilter2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
50218      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
50219      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: 6개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 WORK.SORTEDEMINFO은(는) 6개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
50220      proc sort data = EMWS5.TextTopic2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS5.TextTopic2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
50221      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
50222      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 WORK.TEMP_INFO은(는) 8개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
 
 
50223      data EMWS5.TextTopic2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS5.TextTopic2_EMINFO;
50224      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
50225      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
50226      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: 6개의 관측값을 데이터셋 WORK.SORTEDEMINFO.에서 읽었습니다.
NOTE: 8개의 관측값을 데이터셋 WORK.TEMP_INFO.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_EMINFO은(는) 8개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
 
 
50227      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
50228      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
50229      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: WORK.TEMP_INFO(memtype=DATA)을(를) 삭제하는 중입니다.
NOTE: WORK.SORTEDEMINFO(memtype=DATA)을(를) 삭제하는 중입니다.
50230      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: 프로시저 DATASETS 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "2018년 11월 17일" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17시14분40초" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 리포트 로그";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* 리포트 로그
날짜:                2018년 11월 17일
시간:                17시14분40초
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O01TC7JL "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextTopic2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O01TC7JL new;
MPRINT(EM_DIAGRAM):   run;
50254      %let EMEXCEPTIONSTRING=;
50255      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
50256      * REPORT: TextTopic2;
MPRINT(EM_DIAGRAM):   * REPORT: TextTopic2;
50257      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
50258      %let EM_ACTION = REPORT;
50259      %let syscc = 0;
50260      %macro main;
50261          %if %upcase(&EM_ACTION) = CREATE %then %do;
50262              filename temp catalog 'sashelp.emtxtext.topic_create.source';
50263              %include temp;
50264              %create;
50265          %end;
50266          %if %upcase(&EM_ACTION) = TRAIN %then %do;
50267              filename temp catalog 'sashelp.emtxtext.topic_train.source';
50268              %include temp;
50269              %train;
50270          %end;
50271         %if %upcase(&EM_ACTION) = SCORE %then %do;
50272              filename temp catalog 'sashelp.emtxtext.topic_score.source';
50273              %include temp;
50274              %score;
50275          %end;
50276          %if %upcase(&EM_ACTION) = REPORT %then %do;
50277              filename temp catalog 'sashelp.emtxtext.topic_report.source';
50278              %include temp;
50279              %report;
50280          %end;
50281      %mend main;
50282
50283      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emtxtext.topic_report.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TOPIC_REPORT.SOURCE입니다.
50284     +/* ****************************************************************
50285     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
50286     + *
50287     + * Name:             topic_report.sas
50288     + * Support:          cox  James A. Cox
50289     + * Product:          SAS/GRAPH
50290     + * Language:         Sas
50291     + * Script:
50292     + *
50293     + * Usage:
50294     + *
50295     + * Purpose:
50296     + *
50297     + * History:
50298     + * 03Jun09 Initial Coding [cox]
50299     + *
50300     + * Notes:
50301     + *
50302     + * Last Modified By:
50303     + * Last Modified On: Thu Oct 10 15:14:23 2013
50304     + *
50305     + * End
50306     + * ************************************************************** */
50307     +%macro report();
50309     +   /* drop _cat from display table; */
50310     +   %em_getname(key=repTopics, type=data);
50311     +   %EM_GETNAME(KEY=GRAPH_TABLE, TYPE=DATA);
50313     +   /* Generate reports for terms with term weights */
50314     +   %em_checkmacro(name=tmm_num_display_terms,      global=Y, value=20000);
50316     +   %EM_GETNAME(KEY=GRAPH_TABLE, TYPE=DATA);
50317     +   %EM_GETNAME(KEY=TOPICS, TYPE=DATA);
50318     +   %EM_GETNAME(KEY=SVDU, TYPE=DATA);
50319     +   %em_getname(key=termtopics,       type=data);
50320     +   %EM_GETNAME(KEY=weightedterms, TYPE=DATA);
50321     +  /* Get number of topics */
50322     +   proc sql noprint; select count(*) into :_n_topics from &em_user_topics; quit;
50323     +      %let _n_topics=%kleft(&_n_topics);
50324     +   proc sort data=&em_user_termtopics; by _termid _topicid;
50325     +   data &em_user_svdu(drop=_i _topicid _weight);
50326     +     retain topic1-topic&_n_topics;
50327     +     array _topics{*} topic1-topic&_n_topics;
50328     +     set &em_user_termtopics; by _termid;
50329     +      if first._termid then do;
50330     +         do _i=1 to &_n_topics; _topics{_i}=0; end;
50331     +         end;
50332     +      _topics{_topicid}=_weight;
50333     +      if last._termid then output;
50334     +      run;
50335     +   filename temp catalog "sashelp.emtxtext.apply_labels.source";
50336     +   %include temp;
50337     +   %apply_labels(&EM_USER_SVDU,&EM_USER_TOPICS,prefix=topic);
50339     +  /* include graphing macros */
50340     +   FILENAME TEMP CATALOG 'SASHELP.EMTXTEXT.TM_GRAPHS.SOURCE';
50341     +   %INCLUDE TEMP;
50342     +   /* get the top level terms */
50343     +   %GRAPH_TOP_TERMS(KEY=GRAPH_TABLE, MAXTERMS=20000, KEEPKEY=Y,
50344     +                 termds=&em_user_weightedterms);
50345     +   /* merge terms table with col values */
50346     +    proc sql noprint;
50347     +        create table &em_user_graph_table(drop=key _id_) as
50348     +            select a.*, b.* from &em_user_graph_table(drop=_ispar parent_id) a
50349     +            left join &em_user_svdu b on a.key=b._termid order by numdocs desc,
50350     +           term, rolestring;
50351     +    quit;
50353     +    /* can have 2+ SVD values to create matrix with */
50354     +    %let Yvars=Y1=topic1, Y2=topic2;
50355     +    %do i=3 %to %sysfunc(MIN(&_n_topics, 5));
50356     +        %let Yvars=&Yvars , Y&i=topic&i;
50357     +    %end;
50359     +    %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_topicterms_title, NOQUOTE));
50360     +    %EM_REPORT(KEY=GRAPH_TABLE, VIEWTYPE=MATRIXPLOT, DESCRIPTION= %nrbquote(&desc), AUTODISPLAY=Y,
50361     +        &Yvars. , COLOR=RANK, TIP=TERM);
50363     +   %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_topics_title, NOQUOTE));
50364     +   %em_report(key=reptopics, viewtype=DATA,
50365     +              description=%nrbquote(&desc), autodisplay=Y);
50367     +   %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_termsbytopic_title, NOQUOTE));
50368     +   %em_report(key=reptopics, viewtype=BAR, x=_topicid, freq=_numterms, tiptext=_name,
50369     +              group=_displayCat, sortorder=desc, description=%nrbquote(&desc),
50370     +              autodisplay=Y);
50372     +   %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_docsbytopic_title, NOQUOTE));
50373     +   %em_report(key=reptopics, viewtype=BAR, x=_topicid, freq=_numdocs, tiptext=_name,
50374     +              group=_displayCat,  sortorder=desc, description=%nrbquote(&desc),
50375     +              autodisplay=Y);
50377     +   %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_prescore_title, NOQUOTE));
50378     +   %EM_REPORT(KEY=PRESCORECODE, VIEWTYPE=SOURCE, DESCRIPTION=%nrbquote(&desc),
50379     +              BLOCK=Scoring, AUTODISPLAY=N);
50381     +%mend report;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc sql noprint;
MPRINT(REPORT):   select count(*) into :_n_topics from EMWS5.TextTopic2_TOPICS;
MPRINT(REPORT):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
 
 
MPRINT(REPORT):   proc sort data=EMWS5.TextTopic2_termtopics;
MPRINT(REPORT):   by _termid _topicid;
 
NOTE: 43025개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TERMTOPICS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_TERMTOPICS은(는) 43025개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.06 초
 
 
MPRINT(REPORT):   data EMWS5.TextTopic2_SVDU(drop=_i _topicid _weight);
MPRINT(REPORT):   retain topic1-topic25;
MPRINT(REPORT):   array _topics{*} topic1-topic25;
MPRINT(REPORT):   set EMWS5.TextTopic2_termtopics;
MPRINT(REPORT):   by _termid;
MPRINT(REPORT):   if first._termid then do;
MPRINT(REPORT):   do _i=1 to 25;
MPRINT(REPORT):   _topics{_i}=0;
MPRINT(REPORT):   end;
MPRINT(REPORT):   end;
MPRINT(REPORT):   _topics{_topicid}=_weight;
MPRINT(REPORT):   if last._termid then output;
MPRINT(REPORT):   run;
 
NOTE: 43025개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_TERMTOPICS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_SVDU은(는) 1721개의 관측값과 26개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.06 초
 
 
MPRINT(REPORT):   filename temp catalog "sashelp.emtxtext.apply_labels.source";
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.APPLY_LABELS.SOURCE입니다.
50382     +/* ****************************************************************
50383     + * Copyright (C) 2013 by SAS Institute Inc., Cary, NC 27513
50384     + *
50385     + * Name:             apply_labels.sas
50386     + * Support:          cox  James A. Cox
50387     + * Product:          SAS Text Miner
50388     + * Language:         Sas
50389     + * Script:
50390     + *
50391     + * Usage:
50392     + *
50393     + * Purpose: to apply descriptions from one data set as labels to a list of
50394     + *        variables in another
50395     + *
50396     + * History:
50397     + * 07Aug13 Initial Coding [cox]
50398     + *
50399     + * Notes:
50400     + *
50401     + * Last Modified By:
50402     + * Last Modified On: Fri Aug 30 16:22:02 2013
50403     + *
50404     + * End
50405     + * ************************************************************** */
50406     +%macro apply_labels(inds,labelds,label_col=_name,col_id=_topicid,prefix=COL,outds=);
50407     +%if &outds= %then %let outds=&inds;
50408     +proc sql noprint;
50409     +    select max(&col_id), min(&col_id) into :_maxvar, :_minvar from &labelds;
50410     +       quit;
50411     +%if &_minvar eq . %then %let _minvar=1;
50412     +%let _minvar=%left(&_minvar);
50413     +%let _maxvar=%left(&_maxvar);
50414     +
50415     +/* Do the following if there are any vars to be scored */
50416     +%if &_maxvar >0 %then %do;
50417     +
50418     +%let _minlab=%ktrim(_tmlab)&_minvar;
50419     +%let _maxlab=%ktrim(_tmlab)&_maxvar;
50420     +proc sql noprint;
50421     +    select &label_col into :&_minlab - :&_maxlab from &labelds;
50422     +       quit;
50423     +data &outds;
50424     +   set &inds;
50425     +   array vars{&_minvar:&_maxvar} &prefix.&_minvar-&prefix.&_maxvar;
50426     +         %do i=&_minvar %to &_maxvar;
50427     +            %let _tm_tmp=%bquote(&&_tmlab&i);
50428     +            label &prefix.&i="&_tm_tmp";
50429     +            %end;
50430     +
50431     +         %end;
50432     +run;
50433     +
50434     +%mend;
50435     +/*
50436     + * Example code;
50437     +
50438     +%let num_vars=20;
50439     + data vars(drop=j);
50440     +   array cols{&num_vars} col1-col&num_vars;
50441     +   do i=1 to 10;
50442     +      do j=1 to &num_vars;
50443     +         cols{j}=ranuni(0);
50444     +         end;
50445     +      output;
50446     +      end;
50447     +   run;
50448     + data labels;
50449     +    do i=1 to 20;
50450     +       label = "a"||put(i,2.);
50451     +       output;
50452     +       end;
50453     +run;
50454     +
50455     +   filename temp catalog "sashelp.emtxtext.apply_labels.source";
50456     +   %include temp;
50457     +%apply_labels(vars,labels,label_col=label,col_id=i,prefix=col);
50458     +
50459     +*/
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(APPLY_LABELS):   proc sql noprint;
MPRINT(APPLY_LABELS):   select max(_topicid), min(_topicid) into :_maxvar, :_minvar from EMWS5.TextTopic2_TOPICS;
MPRINT(APPLY_LABELS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
 
 
MPRINT(APPLY_LABELS):   proc sql noprint;
MPRINT(APPLY_LABELS):   select _name into :_tmlab1 - :_tmlab25 from EMWS5.TextTopic2_TOPICS;
MPRINT(APPLY_LABELS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
 
 
MPRINT(APPLY_LABELS):   data EMWS5.TextTopic2_SVDU;
MPRINT(APPLY_LABELS):   set EMWS5.TextTopic2_SVDU;
MPRINT(APPLY_LABELS):   array vars{1:25} topic1-topic25;
MPRINT(APPLY_LABELS):   label topic1= "helpful,helpful staff,friendly,+building,+staff";
MPRINT(APPLY_LABELS):   label topic2= "+subway,gorgeous,’,clean,+location";
MPRINT(APPLY_LABELS):   label topic3= "+service,excellent service,excellent,atmosphere,+bed";
MPRINT(APPLY_LABELS):   label topic4= "great location,+location,+great,decor,friendly staff";
MPRINT(APPLY_LABELS):   label topic5= "+beautiful hotel,beautiful,+hotel,super,+large";
MPRINT(APPLY_LABELS):   label topic6= "+good,+restaurant,+building,+location,good location";
MPRINT(APPLY_LABELS):   label topic7= "comfy,super,+bed,spacious,+building";
MPRINT(APPLY_LABELS):   label topic8= "desk,front,front desk,exceptional,+concierge";
MPRINT(APPLY_LABELS):   label topic9= "design,fantastic,vibe,atmosphere,lovely";
MPRINT(APPLY_LABELS):   label topic10= "decor,+nice,excellent,clean,lounge";
MPRINT(APPLY_LABELS):   label topic11= "breakfast,+nice,value,real,great value";
MPRINT(APPLY_LABELS):   label topic12= "excellent,+bathroom,stunning,well,+good";
MPRINT(APPLY_LABELS):   label topic13= "+restaurant,spacious,gorgeous,+room,excellent";
MPRINT(APPLY_LABELS):   label topic14= "great staff,+great,lovely,+restaurant,+bar";
MPRINT(APPLY_LABELS):   label topic15= "beautifully,+view,access,+building,+easy";
MPRINT(APPLY_LABELS):   label topic16= "architecture,well,+interior,atrium,interior design";
MPRINT(APPLY_LABELS):   label topic17= "comfortable,quiet,clean,+room,+bed";
MPRINT(APPLY_LABELS):   label topic18= "+building,+bar,lobby,absolutely,gorgeous";
MPRINT(APPLY_LABELS):   label topic19= "food,back,+drink,history,+service";
MPRINT(APPLY_LABELS):   label topic20= "stay,+good,always,friendly,+hotel";
MPRINT(APPLY_LABELS):   label topic21= "+bar,absolutely,+drink,+bed,food";
MPRINT(APPLY_LABELS):   label topic22= "fantastic,+restaurant,property,incredible,fantastic location";
MPRINT(APPLY_LABELS):   label topic23= "amazing,property,absolutely,amazing property,beautiful";
MPRINT(APPLY_LABELS):   label topic24= "wonderful,notch,top notch,top,water";
MPRINT(APPLY_LABELS):   label topic25= "atmosphere,excellent,courteous,+nice,manhattan";
MPRINT(APPLY_LABELS):   run;
 
NOTE: 1721개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_SVDU.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_SVDU은(는) 1721개의 관측값과 26개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.01 초
 
 
MPRINT(REPORT):  ;
MPRINT(REPORT):   FILENAME TEMP CATALOG 'SASHELP.EMTXTEXT.TM_GRAPHS.SOURCE';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TM_GRAPHS.SOURCE입니다.
50460     +%MACRO GRAPH_TOP_TERMS(KEY=, MAXTERMS=ALL, FILTER=N, KEEPKEY=N, termds=);
50461     +/*
50462     + * A gtable of all "top-level" terms, that is, all terms that do not have a different term as a parent.  This
50463     + * table would be linked to all graphs in this window such that the rows in the table are selected when points
50464     + * representing those terms are selected in the graphs.
50465     + */
50466     +
50467     +   %em_getname(key=&key);
50468     +   %LOCAL GRAPH_DATA;
50469     +   %LET GRAPH_DATA = &&EM_USER_&KEY;
50470     +   %if ^%symexist(tm_debug) %then %let tm_debug=0;
50471     +   %if "&FILTER"="Y" %then %do;
50472     +       %em_getname(key=terms_tmf, type=data);
50473     +       * sort by freq for the reports graph ;
50474     +       proc sort data=&EM_USER_TERMS_tmf out=_sortedTerms;
50475     +          by descending numdocs;
50476     +       run;
50477     +   %end;
50478     +   %else %do;
50479     +      %if &termds= %then %do;
50480     +         %let termds=&em_user_terms;
50481     +         %em_getname(key=terms, type=data);
50482     +         %end;
50483     +
50484     +       * sort by freq for the reports graph ;
50485     +       proc sort data=&termds out=_sortedTerms;
50486     +          by descending numdocs;
50487     +       run;
50488     +   %end;
50489     +
50490     +
50491     +   data &GRAPH_DATA;
50492     +      FORMAT TERM $256.;
50493     +      SET _sortedTerms(drop=PARENT %IF &keepkey=N %THEN KEY; where=(_ISPAR ne '.'));
50494     +      LABEL ROLESTRING= "%sysfunc(sasmsg(sashelp.tmine, rpt_text_role_vlabel,NOQUOTE))"
50495     +            NUMDOCS=    "%sysfunc(sasmsg(sashelp.tmine, rpt_text_numdocs_vlabel,   NOQUOTE))"
50496     +            RANK= "%sysfunc(sasmsg(sashelp.tmine, rpt_text_rank_vlabel,   NOQUOTE))"
50497     +            FREQ=       "%sysfunc(sasmsg(sashelp.tmine, rpt_text_freq_vlabel,      NOQUOTE))"
50498     +            ATTRSTRING=  "%sysfunc(sasmsg(sashelp.tmine, rpt_text_attribute_vlabel, NOQUOTE))"
50499     +            %if "&FILTER"="Y" %then %do;
50500     +                WEIGHT          = "%sysfunc(sasmsg(sashelp.tmine, rpt_text_weight_vlabel,             NOQUOTE))"
50501     +           %end;
50502     +            KEEP=       "%sysfunc(sasmsg(sashelp.tmine, rpt_text_keep_vlabel,      NOQUOTE))"
50503     +            PARENT_ID=  "%sysfunc(sasmsg(sashelp.tmine, rpt_text_parentid_vlabel,  NOQUOTE))"
50504     +            _ISPAR=     "%sysfunc(sasmsg(sashelp.tmine, rpt_text_isparent_vlabel,  NOQUOTE))";
50505     +       drop ROLE ATTRIBUTE;
50506     +      /* mark the parents */
50507     +      IF _ISPAR = '+' THEN TERM = '+ ' || TERM;
50508     +       %if "%upcase(&MAXTERMS)" ne "ALL" %then %do;
50509     +           if _N_<=&maxterms then output;
50510     +       %end;
50511     +    run;
50512     +
50513     +
50514     +
50515     +    proc rank data=&graph_data out=&graph_data descending ties=low;
50516     +       var numdocs;
50517     +       ranks Rank;
50518     +    run;
50519     +
50520     +
50521     +
50522     +
50523     +
50524     +    %if &tm_debug =0 %then %do;
50525     +       proc datasets lib=work nolist;
50526     +          delete _sortedTerms ;
50527     +       run;
50528     +    %end;
50529     +
50530     +
50531     +    quit;
50532     +
50533     +
50534     +   %let block = %sysfunc(sasmsg(sashelp.tmine, rpt_text_terms_title, NOQUOTE));
50535     +
50536     +   %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_terms_title, NOQUOTE));
50537     +   %EM_REPORT(KEY=&KEY, VIEWTYPE=DATA, DESCRIPTION= %nrbquote(&desc), BLOCK= %nrbquote(&block), AUTODISPLAY=Y, where=%str(KEEP='Y'));
50538     +
50539     +%MEND GRAPH_TOP_TERMS;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(GRAPH_TOP_TERMS):  ;
MPRINT(GRAPH_TOP_TERMS):   * sort by freq for the reports graph ;
MPRINT(GRAPH_TOP_TERMS):   proc sort data=EMWS5.TextTopic2_weightedterms out=_sortedTerms;
MPRINT(GRAPH_TOP_TERMS):   by descending numdocs;
MPRINT(GRAPH_TOP_TERMS):   run;
 
NOTE: 1721개의 관측값을 데이터셋 EMWS5.TEXTTOPIC2_WEIGHTEDTERMS.에서 읽었습니다.
NOTE: 데이터셋 WORK._SORTEDTERMS은(는) 1721개의 관측값과 13개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.03 초
 
 
MPRINT(GRAPH_TOP_TERMS):   data EMWS5.TextTopic2_GRAPH_TABLE;
MPRINT(GRAPH_TOP_TERMS):   FORMAT TERM $256.;
MPRINT(GRAPH_TOP_TERMS):   SET _sortedTerms(drop=PARENT where=(_ISPAR ne '.'));
MPRINT(GRAPH_TOP_TERMS):   LABEL ROLESTRING= "역할" NUMDOCS= "문서 수" RANK= "순위" FREQ= "빈도" ATTRSTRING= "속성" KEEP= "유지" PARENT_ID= "상위 ID" _ISPAR= "상위/하위 상태";
MPRINT(GRAPH_TOP_TERMS):   drop ROLE ATTRIBUTE;
MPRINT(GRAPH_TOP_TERMS):   IF _ISPAR = '+' THEN TERM = '+ ' || TERM;
MPRINT(GRAPH_TOP_TERMS):   if _N_<=20000 then output;
MPRINT(GRAPH_TOP_TERMS):   run;
 
NOTE: 변수 RANK이(가) 초기화되지 않았습니다.
NOTE: 1721개의 관측값을 데이터셋 WORK._SORTEDTERMS.에서 읽었습니다.
      WHERE _ISPAR not = '.';
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_GRAPH_TABLE은(는) 1721개의 관측값과 10개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.17 초
      cpu 시간            0.17 초
 
 
MPRINT(GRAPH_TOP_TERMS):   proc rank data=EMWS5.TextTopic2_GRAPH_TABLE out=EMWS5.TextTopic2_GRAPH_TABLE descending ties=low;
MPRINT(GRAPH_TOP_TERMS):   var numdocs;
MPRINT(GRAPH_TOP_TERMS):   ranks Rank;
MPRINT(GRAPH_TOP_TERMS):   run;
 
NOTE: 데이터셋 EMWS5.TEXTTOPIC2_GRAPH_TABLE은(는) 1721개의 관측값과 11개의 변수를 가지고 있습니다.
NOTE: 프로시저 RANK 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
 
 
MPRINT(GRAPH_TOP_TERMS):   quit;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "GRAPH_TABLE";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "KEEP='Y'";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "용어";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "용어";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.267065001776;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: 데이터셋 WORK.EM_USER_REPORT은(는) 133개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.22 초
      cpu 시간            0.21 초
 
 
MPRINT(GRAPH_TOP_TERMS):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc sql noprint;
MPRINT(REPORT):   create table EMWS5.TextTopic2_GRAPH_TABLE(drop=key _id_) as select a.*, b.* from EMWS5.TextTopic2_GRAPH_TABLE(drop=_ispar parent_id) a left join EMWS5.TextTopic2_SVDU b on a.key=b._termid order by numdocs desc, term, rolestring;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: DROP, KEEP 또는 RENAME의 변수 _id_은(는) 참조되지 않습니다.
NOTE: Table EMWS5.TEXTTOPIC2_GRAPH_TABLE created, with 1721 rows and 34 columns.
 
MPRINT(REPORT):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.18 초
      cpu 시간            0.21 초
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "GRAPH_TABLE";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "MATRIXPLOT";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "토픽 용어";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "RANK";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "TERM";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "topic1";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "topic2";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "topic3";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "topic4";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "topic5";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06954706836005;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: 133개의 관측값을 데이터셋 WORK.EM_USER_REPORT.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_USER_REPORT은(는) 265개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.20 초
      cpu 시간            0.20 초
 
 
MPRINT(REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "reptopics";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "토픽";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27831000661398;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: 265개의 관측값을 데이터셋 WORK.EM_USER_REPORT.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_USER_REPORT은(는) 397개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.21 초
      cpu 시간            0.21 초
 
 
MPRINT(REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "reptopics";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "desc";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "토픽별 용어 수";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_topicid";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "_numterms";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "_displayCat";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_name";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02824291308794;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: 397개의 관측값을 데이터셋 WORK.EM_USER_REPORT.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_USER_REPORT은(는) 529개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.22 초
      cpu 시간            0.22 초
 
 
MPRINT(REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "reptopics";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "desc";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "토픽별 문서 수";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_topicid";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "_numdocs";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "_displayCat";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_name";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7050171665405;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: 529개의 관측값을 데이터셋 WORK.EM_USER_REPORT.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_USER_REPORT은(는) 661개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.18 초
      cpu 시간            0.18 초
 
 
MPRINT(REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "PRESCORECODE";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "SAS Prescore 코드";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Scoring";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89016654383864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: 661개의 관측값을 데이터셋 WORK.EM_USER_REPORT.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_USER_REPORT은(는) 793개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.17 초
      cpu 시간            0.17 초
 
 
MPRINT(REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: TextTopic2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
50540      *------------------------------------------------------------*;
50541      * End REPORT: TextTopic2;
50542      *------------------------------------------------------------*;
50543
 
50544      /* Reset EM Options */
50545      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
50546      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
50547      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
50548      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
50549      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
50550      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: 793개의 관측값을 데이터셋 WORK.EM_USER_REPORT.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_USER_REPORT은(는) 793개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
