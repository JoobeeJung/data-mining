MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "2018년 11월 17일" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17시35분09초" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 스코어 로그";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* 스코어 로그
날짜:                2018년 11월 17일
시간:                17시35분09초
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1LMLLLS "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1LMLLLS new;
MPRINT(EM_DIAGRAM):   run;
26173      %let EMEXCEPTIONSTRING=;
26174      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
26175      * SCORE: TextCluster2;
MPRINT(EM_DIAGRAM):   * SCORE: TextCluster2;
26176      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26177      %let EM_ACTION = SCORE;
26178      %let syscc = 0;
26179      %macro main();
26180      
26181         %if %upcase(&EM_ACTION) eq CREATE %then %do;
26182            filename temp catalog 'sashelp.emtxtext.cluster_create.source';
26183            %include temp;
26184            %create();
26185         %end;
26186         %if %upcase(&EM_ACTION) eq TRAIN %then %do;
26187            filename temp catalog 'sashelp.emtxtext.cluster_train.source';
26188            %include temp;
26189            %train();
26190         %end;
26191         %if %upcase(&EM_ACTION) eq REPORT %then %do;
26192            filename temp catalog 'sashelp.emtxtext.cluster_report.source';
26193            %include temp;
26194            %report();
26195         %end;
26196         %if %upcase(&EM_ACTION) eq SCORE %then %do;
26197            filename temp catalog 'sashelp.emtxtext.cluster_score.source';
26198            %include temp;
26199            %score();
26200         %end;
26201      %mend main;
26202      
26203      %main();
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emtxtext.cluster_score.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.CLUSTER_SCORE.SOURCE입니다.
26204     +%macro tmc_score(import_ds=,configdata=,export_ds=,term_ds=,export_out=,clusters_ds=,svdu=,svds=,
26205     +    import_out=,em_outstat=,prefixstring=,ocluster=,ndescterms=,ftmout=,fterms=,hier=);
26206     +  %if &import_ds ne %then %do;
26208     +    %let syscc=0;
26210     +    %tmc_doc_score(import=&import_ds,export=&export_ds,emoutstat=&em_outstat,
26211     +                termds=&term_ds,clusters=&clusters_ds,configds=&configdata,
26212     +                _scrout=&import_out, svd_u=&svdu, svd_s=&svds, prefix=&prefixstring,
26213     +                outclusters=&ocluster, descterms=&ndescterms, filterterms=&fterms,
26214     +                filtertmout=&ftmout, hierds=&hier);
26216     +  %end;
26218     +%mend tmc_score;
26219     +%macro score();
26221     +    %global last_parse_node last_filter_node last_prescore_node server_err
26222     +      parsevar EM_SASMSG ;
26223     +    %let syscc=0;
26224     +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
26225     +    /*use saved version of em_info in case macro is not populated*/
26226     +    %em_getname(key=last_tm_nodes, type=data);
26228     +    filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
26229     +    %include temp;
26230     +    %tm_get_last_filter(eminfo=&em_user_last_tm_nodes,em_lib=&em_lib,
26231     +                        em_variableset=&em_data_variableset);
26232     +    %if &EMEXCEPTIONSTRING ne %then %goto end_cluster_score;
26233     +    %let lastparsenode=&last_parse_node;
26234     +    %let lastfilternode=&last_filter_node;
26235     +    %let lastprescore=&last_prescore_node;
26236     +    %let filt_node=;
26238     +   %em_getname(key=terms, type=data);
26239     +   %em_getname(key=docs, type=data);
26240     +   %em_getname(key=clusters, type=data);
26241     +   %em_getname(key=svd_u, type=data);
26242     +   %em_getname(key=svd_s, type=data);
26243     +   %em_getname(key=emoutstat, type=data);
26244     +   %em_getname(key=tmconfig, type=data);
26246     +   %em_getname(key=tmout, type=data);
26247     +   %em_getname(key=validout, type=data);
26248     +   %em_getname(key=testout, type=data);
26249     +   %em_getname(key=scoreout, type=data);
26250     +   %em_getname(key=PRESCORECODE, type=file, extension=sas);
26251     +   %let systmutil=;
26253     +    filename temp catalog 'sashelp.emtxtext.tm_data2code.source';
26254     +    %include temp;
26255     +    filename temp catalog 'sashelp.emtext.tmemclus.source';
26256     +    %include temp;
26257     +    filename temp catalog 'sashelp.emtext.tmpred.source';
26258     +    %include temp;
26259     +    filename temp catalog 'sashelp.emtext.tmsort.source';
26260     +    %include temp;
26261     +    filename temp catalog 'sashelp.emtxtext.tmc_doc_score.source';
26262     +    %include temp;
26263     +    filename temp catalog 'sashelp.emtext.tmsvd.source';
26264     +    %include temp;
26265     +    filename temp catalog 'sashelp.emtext.tmfast.source';
26266     +    %include temp;
26268     +   %let EM_PUBLISHCODE = PUBLISH;
26269     +   %let EM_SCORECODEFORMAT = DATASTEP;
26270     +   %let overwrite_pre = ;
26272     +   %let lastprescore=%trim(%left(&lastprescore));
26274     +   /* Create indexed term table for writing out score code */
26275     +   proc sql noprint;
26276     +       select count(*) into :svdkeep
26277     +       from &em_user_svd_s
26278     +       where keep=1;
26279     +   create table _clusterms as
26280     +      select key, term, role, keep, freq, numdocs, parent, _ispar, weight from &em_user_terms;
26282     +   data _filter_tmout;
26283     +      set &EM_LIB..&lastfilternode._tmout;
26284     +   run;
26286     +   %tmc_score(import_ds=&em_import_data,export_ds=&em_export_train,
26287     +              import_out=_filter_tmout,
26288     +              export_out=&EM_export_transaction,
26289     +              term_ds=_clusterms,
26290     +              clusters_ds=&em_user_clusters,
26291     +              svdu=&em_user_svd_u,
26292     +              svds=&em_user_svd_s,
26293     +              em_outstat=&em_user_emoutstat,
26294     +              configdata=&em_user_tmconfig,
26295     +              prefixstring=&EM_NODEID,
26296     +              ocluster=&em_user_clusters,
26297     +              ndescterms=&em_property_ndescterms,
26298     +              fterms=&EM_LIB..&lastfilternode._terms,
26299     +              ftmout=&EM_LIB..&lastfilternode._tmout,
26300     +              hier=&em_user_hierds);
26302     +   %tmc_score(import_ds=&em_import_validate,export_ds=&em_export_validate,
26303     +              export_out=&EM_USER_validout,
26304     +              import_out=&EM_LIB..&lastfilternode._validout,
26305     +              term_ds=_clusterms,
26306     +              clusters_ds=&em_user_clusters,
26307     +              svdu=&em_user_svd_u,
26308     +              svds=&em_user_svd_s,
26309     +              em_outstat=&em_user_emoutstat,
26310     +              configdata=&em_user_tmconfig,
26311     +              prefixstring=&EM_NODEID);
26312     +   %tmc_score(import_ds=&em_import_test,export_ds=&em_export_test,
26313     +              export_out=&EM_USER_testout,
26314     +              import_out=&EM_LIB..&lastfilternode._testout,
26315     +              term_ds=_clusterms,
26316     +              clusters_ds=&em_user_clusters,
26317     +              svdu=&em_user_svd_u,
26318     +              svds=&em_user_svd_s,
26319     +              em_outstat=&em_user_emoutstat,
26320     +              configdata=&em_user_tmconfig,
26321     +              prefixstring=&EM_NODEID);
26323     +   %if &syscc>4 %then %do;
26324     +       %let syscc=0;
26325     +       %goto end_cluster_score;
26326     +   %end;
26328     +   * path of the diagram ;
26329     +   %let emwspath = ;
26330     +   data _null_;
26331     +      call symput("emwspath", strip(pathname("&EM_LIB")));
26332     +   run;
26334     +   filename pre "&EM_USER_PRESCORECODE";
26335     +   data _null_;
26336     +       file pre;
26337     +       put 'filename temp catalog "sashelp.emtext.tmemclus.source";';
26338     +       put '%include temp;';
26339     +       put 'filename temp catalog "sashelp.emtext.tmpred.source";';
26340     +       put '%include temp;';
26341     +       put 'filename temp catalog "sashelp.emtxtext.tmc_doc_score.source";';
26342     +       put '%include temp;';
26343     +       put 'filename temp catalog "sashelp.emtext.tmsort.source";';
26344     +       put '%include temp;';
26345     +       put 'filename temp catalog "sashelp.emtext.tmsvd.source";';
26346     +       put '%include temp;';
26347     +       put 'filename temp catalog "sashelp.emtext.tmfast.source";';
26348     +       put '%include temp;';
26349     +       put 'filename temp;';
26350     +   run;
26353     +   /* We need to use last prescore */
26354     +   %if &lastprescore ne %then %do;
26355     +      %let tmprescoreFile = %bquote(&emwspath)&em_dsep&lastprescore&em_dsep.PRESCORECODE.sas;
26356     +      filename tmpre "&tmprescoreFile";
26357     +      %em_copyfile(infref=tmpre, outfref=pre, append=Y);
26358     +      filename tmpre;
26359     +   %end;
26361     +   data _codeclusters;
26362     +        set &em_user_clusters (drop=clus_desc);
26363     +   run;
26365     +     %if not %symexist(em_term_loc) %then %do;
26366     +       %let em_term_loc = %bquote(%sysfunc(pathname(&EM_LIB)));
26367     +         libname termloc "&em_term_loc";
26369     +      %let scored_terms = termloc.&lastfilternode._filtterms;
26370     +       %let scored_clust = termloc.&EM_NODEID._clusters;
26371     +       %let scored_config = termloc.&EM_NODEID._tmconfig;
26372     +       %let scored_svd_u = termloc.&EM_NODEID._svd_u;
26373     +       %let scored_svd_s= termloc.&EM_NODEID._svd_s;
26375     +       %if &em_property_algorithm=1.0 %then  %do;
26376     +          %let scored_emoutstat= termloc.&EM_NODEID._emoutstat;
26377     +       %end;
26379     +   %end;
26380     +   %else %do; /* Write out data sets to external directory */
26381     +       libname termloc "&em_term_loc";
26382     +        %if %sysfunc(libref(termloc)) ne 0 %then %do;
26383     +           %let  EMEXCEPTIONSTRING = EMTOOL.EMTERMLOC,&em_term_loc;
26384     +           %goto end_cluster_score;
26385     +       %end;
26387     +      /* copy datasets to use for prescore code*/
26388     +       data termloc.&EM_LIB._&EM_NODEID._CLUSTERS;
26389     +         set _codeclusters;
26390     +       run;
26392     +       data termloc.&EM_LIB._&EM_NODEID._svd_u;
26393     +         set &em_user_svd_u;
26394     +       run;
26396     +       data termloc.&EM_LIB._&EM_NODEID._svd_s;
26397     +         set &em_user_svd_s;
26398     +       run;
26400     +       data termloc.&EM_LIB._&EM_NODEID._tmconfig;
26401     +         set &em_user_tmconfig;
26402     +       run;
26404     +       %let scored_terms = termloc.&EM_LIB._&lastfilternode._filtterms;
26405     +       %let scored_clust = termloc.&EM_LIB._&EM_NODEID._CLUSTERS;
26406     +       %let scored_config = termloc.&EM_LIB._&EM_NODEID._tmconfig;
26407     +       %let scored_svd_u = termloc.&EM_LIB._&EM_NODEID._svd_u;
26408     +       %let scored_svd_s= termloc.&EM_LIB._&EM_NODEID._svd_s;
26410     +       %if &em_property_algorithm=1.0 %then  %do;
26411     +         data termloc.&EM_LIB._&EM_NODEID._emoutstat;
26412     +         set &em_user_emoutstat;
26413     +         run;
26414     +           %let scored_emoutstat= termloc.&EM_LIB._&EM_NODEID._emoutstat;
26415     +       %end;
26416     +   %end;
26420     +   %let _score_append=;
26422     +   * Now save code, if necessary, for search phrase;
26423     +   filename _tmscore "&EM_FILE_EMPUBLISHSCORECODE";
26424     +   %if &em_property_algorithm=1.0 %then %do;
26425     +   data _NULL_;
26426     +     file _tmscore;
26427     +     length string $200;
26428     +     string ='%tmc_doc_score(import='||'&em_score_output'||",export=work._newexport,";
26429     +     put string;
26430     +     string="      termds=&scored_terms, configds=&scored_config,";
26431     +     put string;
26432     +     string= "      clusters=&scored_clust, emoutstat=&scored_emoutstat, ";
26433     +     put string;
26434     +     string = "      _scrout=work.&lastfilternode._out, svd_u=&scored_svd_u, svd_s=&scored_svd_s, prefix=&em_nodeid);";
26435     +     put string;
26436     +     string='data &em_score_output; set work._newexport;';
26437     +     put string;
26438     +    run;
26439     +    %end;
26440     +    %else %do;
26441     +    data _NULL_;
26442     +     file _tmscore;
26443     +     string= '%'||"tmc_doc_score(import="||'&em_score_output'||",export=work._newexport,";
26444     +     put string;
26445     +     put "      termds=&scored_terms,configds=&scored_config,";
26446     +     put "      clusters=&scored_clust, ";
26447     +     put "      _scrout=work.&lastfilternode._out, svd_u=&scored_svd_u, svd_s=&scored_svd_s, prefix=&em_nodeid);";
26448     +     put 'data &em_score_output; set work._newexport;';
26449     +    run;
26450     +    %end;
26451     +   filename _tmscore;
26453     +%end_cluster_score:
26454     +    filename temp;
26455     +    %if &tm_debug =0 %then %do;
26456     +    proc sql noprint;
26457     +        drop table _clusterms;
26458     +        drop table _filter_tmout;
26459     +        drop table _codeclusters;
26460     +    quit;
26461     +    %end;
26463     +%mend score;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TM_GET_LAST_FILTER.SOURCE입니다.
26465     +/* ****************************************************************
26466     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
26467     + *
26468     + * Name:             tm_get_last_filter.sas
26469     + * Product:          SAS Text Miner
26470     + * Language:         Sas
26471     + * Script:
26472     + *
26473     + * Usage:
26474     + *
26475     + * Purpose:  macro to get the last filter node and the last parse node in the
26476     + *   diagram that corresponds to the current parse variable.  If there is no filter
26477     + *   node, the filter node is set to the last parse node.
26478     + *
26479     + *
26480     + *
26481     + * History:
26482     + * 14Aug09 Initial Coding
26483     + *
26484     + * Notes:
26485     + *    Returns an error in the following cases:
26486     + *      1. There is no preceding parse node.
26487     + *      2. There is no parse node with the current parse variable.
26488     + *
26489     + * Last Modified By:
26490     + * Last Modified On: Wed Sep 23 15:35:04 2009
26491     + *
26492     + * End
26493     + * ************************************************************** */
26494     +%macro tm_get_last_filter(eminfo=,em_lib=, em_variableset=);
26495     +   %let last_parse_node=;
26496     +   %let last_filter_node=;
26497     +   %let last_prescore_node=;
26498     +   %let server_err=;
26499     +   %let EMEXCEPTIONSTRING=;
26500     +   %let syscc=0;
26501     +
26502     +    /* verify that setinit for SAS Text Miner is currently active */
26503     +    %if %sysfunc(sysprod(PRODNUM107)) ne 1 %then %do;
26504     +       %let EMEXCEPTIONSTRING = EMTOOL.NOTMLICENSE;
26505     +        %goto end_macro;
26506     +        %end;
26507     +
26508     +
26509     +    * find last filter or text parse node if no filter node. ;
26510     +   %if %sysfunc(exist(&eminfo)) %then %do;
26511     +      proc sql noprint;
26512     +      select data into :last_parse_node from &eminfo where key="LastTextParsing";
26513     +         select data into :last_filter_node from &eminfo where key="LastTextFilter";
26514     +         select data into :last_prescore_node from &eminfo where kupcase(key)="PRESCORECODE";
26515     +      quit;
26516     +
26517     +   %end;
26518     +
26519     +   %if &last_parse_node= %then %do;
26520     +      %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGNODE;
26521     +      %goto end_macro;
26522     +      %end;
26523     +
26524     +   %else %if &last_filter_node= %then %let last_filter_node = %ktrim(&last_parse_node);
26525     +   %else %let last_filter_node = %ktrim(&last_filter_node);
26526     +   %let last_parse_node = %ktrim(&last_parse_node);
26527     +
26528     +   * Check to make sure parse variable is present and still exists;
26529     +   %let parsevar = ;
26530     +   proc sql noprint;
26531     +    select parsevar into :parsevar
26532     +    from &em_lib..&last_filter_node._tmconfig;
26533     +    quit;
26534     +
26535     +    *check for dropped parsevar on input dataset;
26536     +       %let parsevarOK= ;
26537     +       %let parsevarN=%kupcase(%ktrim(&parsevar));
26538     +       data _null_;
26539     +         set &em_variableset(where=(kupcase(NAME)="&parsevarN" and USE in('Y' 'D')));
26540     +         if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
26541     +         run;
26542     +       %if(&parsevarOK eq ) %then %do;
26543     +          %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGVAR;
26544     +          %goto end_macro;
26545     +          %end;
26546     +%end_macro:
26547     +
26548     +%mend tm_get_last_filter;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TM_GET_LAST_FILTER):   * find last filter or text parse node if no filter node. ;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select data into :last_parse_node from EMWS5.TextCluster2_last_tm_nodes where key="LastTextParsing";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_filter_node from EMWS5.TextCluster2_last_tm_nodes where key="LastTextFilter";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_prescore_node from EMWS5.TextCluster2_last_tm_nodes where kupcase(key)="PRESCORECODE";
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_GET_LAST_FILTER):   * Check to make sure parse variable is present and still exists;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select parsevar into :parsevar from EMWS5.TextFilter2_tmconfig;
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TM_GET_LAST_FILTER):   *check for dropped parsevar on input dataset;
MPRINT(TM_GET_LAST_FILTER):   data _null_;
MPRINT(TM_GET_LAST_FILTER):   set EMWS5.TextCluster2_VariableSet(where=(kupcase(NAME)="REVIEW" and USE in('Y' 'D')));
MPRINT(TM_GET_LAST_FILTER):   if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
MPRINT(TM_GET_LAST_FILTER):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER2_VARIABLESET.에서 읽었습니다.
      WHERE (KUPCASE(NAME)='REVIEW') and USE in ('D', 'Y');
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tm_data2code.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TM_DATA2CODE.SOURCE입니다.
26549     +/* ****************************************************************
26550     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
26551     + *
26552     + * Name:             tm_data2code.sas
26553     + * Product:          SAS Text Miner
26554     + * Language:         Sas
26555     + * Script:
26556     + *
26557     + * Usage:  %tm_data2code(data=, outdata=WORK.DATA);
26558     + *
26559     + * Purpose:          To do a data2code (like %em_data2code()) but allow the input data
26560     + *  to be view or data.
26561     + *
26562     + *    PARAMETERS:
26563     + *        DATA        = data set
26564     + *        OUTDATA     = out data set
26565     + *        OUTFILE     = file where to saved the code
26566     + *        APPEND      = append (Y/N)
26567     + * History:
26568     + * 11Jun09 Initial Coding
26569     + *
26570     + * Notes:
26571     + *
26572     + * Last Modified By:
26573     + * Last Modified On: Thu Jul 23 11:00:06 2009
26574     + *
26575     + * End
26576     + * ************************************************************** */
26577     +%macro tm_data2code(data=, outdata=WORK.DATA, outfile=, append=N);
26578     +%if &data eq %then %do;
26579     +   %put ERROR: Data set not defined;
26580     +   %end;
26581     +%else %do;
26582     +   %if (^%sysfunc(exist(&data)) and ^%sysfunc(exist(&data, view))) %then %do;
26583     +       %put ERROR: Data set does not exist;
26584     +       %end;
26585     +   %else %do;
26586     +      %global em_data em_outdata em_codefile em_append;
26587     +      %let em_data=&data;
26588     +      %let em_outdata=&outdata;
26589     +      %let em_codefile=&outfile;
26590     +      %let em_append=&append;
26591     +      proc display c=sashelp.emutil.data2code.scl; run;
26592     +      %end;
26593     +   %end;
26594     +%mend;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtext.tmemclus.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTEXT.TMEMCLUS.SOURCE입니다.
26595     +
26596     + /*
26597     +
26598     +  Macro:   tmemclus.sas
26599     +  Purpose: Call proc emclus with given defaults and parameters.
26600     +  Syntax:  %tmemclus(data=, role=, clusters=, seed=,
26601     +                   outstat=, out=, vars=, cov=, iter=, secclus=,
26602     +                   seciter=, min=, method=, eps=, init=, print=,
26603     +                   p=, outliers=, decvar=, initstd=, dist=,
26604     +                   secstd=, nobs=, threads=);
26605     +  Required Parameters:  data=      The input data set.
26606     +                        role=      Train or score
26607     +                        clusters=  The number of primary clusters
26608     +
26609     +  Optional Parameters:  vars=      Variables to be used
26610     +                   cov=       Type of covariance matrix
26611     +                   iter=      Number of EM iterations
26612     +                   secclus    Number of secondary clusters
26613     +                   seciter    Number of k-means iterations
26614     +                   min=       Minimum number of obs in a cluster
26615     +                   method=    Standard or scaled
26616     +                   eps=       Stopping tolerance
26617     +                   init=      Random, Fastclus, or Emclus
26618     +                   print=     All, last, or none
26619     +                   p=
26620     +                   outliers=  Keep, cluster, or ignore
26621     +                   outstat=   Name of OUTSTAT data set
26622     +                   out=       Name of OUT data set
26623     +                   seed=      Name of SEED data set
26624     +                   decvar=    Proportion to decrease variances
26625     +                   initstd=   Initial standard deviation
26626     +                   dist=      Minimum distance between clusters
26627     +                   secstd=    Secondary cluster max std dev.
26628     +                   nobs=      Number of obs read in each iteration
26629     +  History:
26630     +  2001/01/16 - Bill Wheeler - Initial Coding.
26631     +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
26632     +*/
26633     +%MACRO tmemclus(data=, role=, clusters=, seed=,
26634     + outstat=, out=, vars=, cov=, iter=, secclus=,
26635     + seciter=, min=, method=, eps=, init=, print=,
26636     + p=, outliers=, decvar=, initstd=, dist=, secstd=, nobs=, threads=);
26637     +
26638     + %local saveout saveseed op1 op2 op3 op4;
26639     +
26640     + %LET saveout = &out;
26641     + %LET saveseed = &outstat;
26642     +
26643     + /* defaults */
26644     + %if &role= %then %let role = TRAIN;
26645     + %if &seed ne %then %let seed = seed=&seed;
26646     + %if &vars= %then %let var = ;
26647     + %else %let var = var &vars;
26648     + %if &cov ne %then %let cov = cov = &cov;
26649     + %if &iter ne %then %let iter = iter = &iter;
26650     + %if &init ne %then %let init = init = &init;
26651     + %if &eps ne  %then %let eps = eps = &eps;
26652     + %if &min ne %then %let min = min = &min;
26653     + %if &seciter ne %then %let seciter = seciter = &seciter;
26654     + %if &print ne %then %let print = print = &print;
26655     + %if &p ne %then %let p = p = &p;
26656     + %if &outliers ne %then %let outliers = outliers = &outliers;
26657     + %if &method ne %then %let method = method = &method;
26658     + %if &decvar ne %then %let decvar = decvar = &decvar;
26659     + %if &outstat ne %then %let outstat = outstat = &outstat;
26660     + %if &out ne %then %let out = out = &out;
26661     + %if (&threads >= 0)  %then %let threads = threads = &threads;
26662     + %else %let threads = ;
26663     +
26664     + %LET op1 = ;
26665     + %LET op2 = ;
26666     + %LET op3 = ;
26667     + %LET op4 = ;
26668     + %if ^(&initstd=) %then %let op1 = %str(initstd = &initstd);
26669     + %if ^(&dist=) %then %let op2 = %str(dist = &dist);
26670     + %if ^(&secstd=) %then %let op3 = %str(secstd = &secstd);
26671     + %if ^(&nobs=) %then %let op4 = %str(nobs = &nobs);
26672     +
26673     +
26674     + %IF &SYSVER < 9 %THEN %DO;
26675     +    %LET cov = ;
26676     +    %LET decvar = ;
26677     +    %LET outliers = ;
26678     +    %LET out = ;
26679     + %END;
26680     +
26681     +
26682     + %if %upcase(&role) = TRAIN %then
26683     + %do;
26684     +   proc emclus data = &data
26685     +   clusters = &clusters
26686     +   &seed
26687     +   &outstat
26688     +   &out
26689     +   &init
26690     +   &eps
26691     +   &method
26692     +   &secclus
26693     +   &min
26694     +   &print
26695     +   &outliers
26696     +   &iter
26697     +   &op1 &op2
26698     +   &op3 &op4
26699     +   &decvar
26700     +   &cov
26701     +   &threads
26702     +   ;
26703     +   &var;
26704     + %end;
26705     + %else
26706     +  %do;
26707     +    proc emclus data = &data
26708     +    role = score
26709     +    clusters = &clusters
26710     +    &seed
26711     +    &out
26712     +    &cov
26713     +    ;
26714     +    &var;
26715     +  %end;
26716     +
26717     + %IF &SYSVER < 9 and &saveout ^= %THEN %DO;
26718     +   proc emclus data = &data
26719     +   role = score
26720     +   clusters = &clusters
26721     +   seed = &saveseed
26722     +   &saveout
26723     +   ;
26724     +   &var;
26725     + %END;
26726     +
26727     +
26728     +%MEND tmemclus;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtext.tmpred.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTEXT.TMPRED.SOURCE입니다.
26729     +
26730     +/*
26731     +  Macro: tmpred(inds,outds,clusters,type=,ignore=,freqDS=)
26732     +
26733     +  Description: This macro will take output from
26734     +     emclus and generate predicted
26735     +      predicted clusters.
26736     +
26737     +  Parms: inds - input data set, produced by emclus.
26738     +   outds - data set with clusters created by this macro.
26739     +   clusters - number of clusters that should be on this data set
26740     +   type - valid values: 'max' or 'prob'.  Max will just take the
26741     +      cluster with the highest probability as the predicted cluster.
26742     +      In the case of a tie the first cluster with that value will
26743     +       selected.
26744     +      Prob will attempt to select multiple clusters based on
26745     +      how many clusters were requested.  That is if 3 clusters
26746     +      were requested, any cluster with prob>1/3 will be selected
26747     +      as the predicted cluster. THIS OPTION IS UNTESTED.
26748     +*/
26749     +
26750     +%macro tmpred(inds,outds,clusters,type=, ignore=0, freqDS=, compress=1);
26751     +
26752     +  %local _str newfreqDS _flag;
26753     +
26754     +  * set the optional arguments;
26755     +  %if &type= %then %let type=max;
26756     +  %if &ignore = 1 %then %let
26757     +    _str = if _CLUSTER_ = &clusters then _CLUSTER_ = .;
26758     +  %else %let _str = ;
26759     +  %if %str(&freqDS) ^= %str() %then %do;
26760     +   %let newfreqDS = &freqDS(keep=_c1-_c&clusters);
26761     +   %let _flag = 1;
26762     +  %end;
26763     +  %else %let _flag = 0;
26764     +
26765     +  %if &compress = 1 %then %let compress = compress=Y;
26766     +  %else %let compress = ;
26767     +
26768     +  data &outds(&compress drop=_c1-_c&clusters)
26769     +    %if &_flag = 1 %then %do;
26770     +    &newfreqDS
26771     +    %end;
26772     +    ;
26773     +    set &inds end=eof;
26774     +   * array for holding all probabilities;
26775     +    array _p prob1--prob&clusters;
26776     +    array _c(&clusters);
26777     +    retain _c 0;
26778     +   * get rid of working columns;
26779     +    drop _max_ _i /*prob1--prob&clusters*/ _WARN_;
26780     +    /* keep the largest probability and the cluster */
26781     +    _max_ = 0;
26782     +    do _i = 1 to &clusters;
26783     +      if _p(_i) > _max_ then do;
26784     +        _max_ = _p(_i);
26785     +        _CLUSTER_ = _i;
26786     +      end;
26787     +    end;
26788     +    if (_CLUSTER_ >= 1) and (_CLUSTER_ <= &clusters) then
26789     +      _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
26790     +    else _CLUSTER_ = .;
26791     +    &_str;
26792     +    %if &_flag = 1 %then %do;
26793     +      if eof then do;
26794     +        output &freqDS;
26795     +                output &outDS;
26796     +          end;
26797     +          else output &outDS;
26798     +        %end;
26799     +
26800     +    run;
26801     +%mend tmpred;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtext.tmsort.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTEXT.TMSORT.SOURCE입니다.
26802     + /*
26803     +PROC SORT macro
26804     +
26805     +%tmsort(data=, out=, by=);
26806     +
26807     +data=      - name of input data set (outtree data set from PROC CLUSTER)
26808     +out=       - name of the output data set
26809     +by=        - by statement
26810     +options=   - proc options
26811     +*/
26812     +
26813     +%macro tmsort(data=, out=, by=, options=, threads=THREADS);
26814     +  %if %BQUOTE(&out) ^= %then %let out = out =  &out;
26815     +  %if &SYSVER < 9 %then %let threads = ;
26816     +
26817     +  proc sort data = %STR(&data) &threads &options
26818     +    &out;
26819     +    by &by;
26820     +  run;
26821     +
26822     +%mend tmsort;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tmc_doc_score.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TMC_DOC_SCORE.SOURCE입니다.
26823     +/*****************************************************************************
26824     +*
26825     +* tmc_doc_score
26826     +*
26827     +*  import  =  the doc data set of _document_ ids's as input
26828     +*  export = the new doc dataset with the svd dimensions and cluster results as output
26829     +*  termds = the terms table as input
26830     +*  clusters = input dataset of clusters from train
26831     +*  emoutstat = input dataset of seeds from training
26832     +*  _scrout = input OUT data set to be scored, may be trimmed based on conent of termds
26833     +*  svd_u = input singular vectors
26834     +
26835     +
26836     +*  svd_s = input singular values
26837     +*  prefxi = variable prefix string identifier.
26838     +*
26839     +**************************************************************************************/
26840     +
26841     +%macro tmc_doc_score(import=,export=,termds=,export_out=,clusters=,emoutstat=,
26842     +                 _scrout=,svd_u=,svd_s=,configds=,prefix=, outclusters=,hierds=,
26843     +                filterterms=,filtertmout=, descterms=);
26844     +
26845     +   %if ^%symexist(tm_debug) %then %let tm_debug=0;
26846     +
26847     +    proc sql noprint;
26848     +        select cellwgt into: cellwgt
26849     +            from &configds;
26850     +        select clus_alg into: algorithm
26851     +            from &configds;
26852     +        select parseVar into :textvar
26853     +            from &configds;
26854     +        select count(*) into :nclus
26855     +            from &clusters;
26856     +        select count(*) into :svdkeep
26857     +            from &svd_s
26858     +            where keep=1;
26859     +    quit;
26860     +
26861     +    %let svdkeep=%left(&svdkeep);
26862     +    %let nclus=%left(&nclus);
26863     +    %let algorithm=%left(&algorithm);
26864     +    %Let cellwgt=%left(&cellwgt);
26865     +    data _import_ds;
26866     +        set &import;
26867     +    run;
26868     +
26869     +
26870     +    %tmsort(data=&termds(where=(keep='Y')), out=_terms(keep= KEY PARENT),
26871     +            by=KEY);
26872     +    %tmsort(data=&_scrout, out=&_scrout, by=_termnum_);
26873     +
26874     +    data _svdm1;
26875     +        merge _terms (where=(PARENT ne _termnum_) in=_b_ keep=KEY PARENT rename=(KEY=_TERMNUM_))
26876     +              &_scrout (in = _A_ rename=(_COUNT_=COUNT));
26877     +        by _termnum_;
26878     +        if _B_;
26879     +        if (_A_ and _B_ and (PARENT ne .))
26880     +          then _TERMNUM_ = PARENT;
26881     +
26882     +        keep _TERMNUM_ _DOCUMENT_ COUNT;
26883     +        if (_DOCUMENT_=.) or (COUNT=.) then delete;
26884     +    run;
26885     +
26886     +    proc sql ;
26887     +       create table _scrout as select distinct _TERMNUM_, _DOCUMENT_,
26888     +        sum(COUNT) as _COUNT_ from _svdm1
26889     +        group by _TERMNUM_, _DOCUMENT_;
26890     +
26891     +       drop table _svdm1;
26892     +       drop table _terms;
26893     +    quit;
26894     +
26895     +    %tmsort(data=&termds(where=(KEEP='Y' and PARENT=.)),
26896     +         out=_weights (rename=(KEY=INDEX WEIGHT=GWGT) keep=KEY WEIGHT),
26897     +         by=KEY, options=, threads=);
26898     +
26899     +
26900     +    %tmsort(data=_scrout, out=_scrout, by=_DOCUMENT_, options=, threads=);
26901     +      %let svdkeep=%left(&svdkeep);
26902     +      data &svd_u;
26903     +         set &svd_u(keep= index col1-col&svdkeep);
26904     +      run;
26905     +
26906     +      proc sql;
26907     +         create table  _inweights as
26908     +         select a.*
26909     +         from _weights a right join &svd_u b
26910     +         on a.index=b.index
26911     +         ;
26912     +       quit;
26913     +    %if %lowcase(&cellwgt) = bin %then %let cellwgt=BINARY;
26914     +    proc spsvd data=_scrout IN_U=&svd_u
26915     +        local = &cellwgt global = none in_global = _inweights ;
26916     +        row _TERMNUM_;
26917     +        col _DOCUMENT_;
26918     +        entry _COUNT_;
26919     +        output colpro=_COLPRO bigpro normcol prefix="&prefix._SVD";
26920     +    run;
26921     +    proc sort data=_import_ds;
26922     +    by _DOCUMENT_; run;
26923     +
26924     +    proc sort data=_colpro;
26925     +    by INDEX;
26926     +    run;
26927     +
26928     +    data &export;
26929     +        merge _import_ds (in=_C_ ) _colpro (rename=(INDEX=_DOCUMENT_));
26930     +        by _DOCUMENT_;
26931     +        if _C_;
26932     +    run;
26933     +
26934     +    data &export;
26935     +       set  &export;
26936     +       array svd_array &prefix._SVD1 - &prefix._SVD&svdkeep.;
26937     +       do i = 1 to dim(svd_array);
26938     +          if svd_array(i)=. then svd_array(i)=0;
26939     +       end;
26940     +       drop i;
26941     +    run;
26942     +
26943     +
26944     +    %tmsort(data=&export, out=, by=_document_, options=, threads=);
26945     +
26946     +    %if %left(&algorithm)=1.0 %then %do;
26947     +
26948     +        %tmemclus(data=&export,
26949     +            role=SCORE, clusters=&nclus,
26950     +            seed=&emoutstat,
26951     +            outstat=, out=&export,
26952     +            vars=%STR(&prefix._SVD1 - &prefix._SVD&SVDKEEP),
26953     +            cov=, iter=5, secclus=,
26954     +            seciter=, min=, method=, eps=.1, init=, print=,
26955     +            p=, outliers=, decvar=0,
26956     +            initstd=, dist=, secstd=, nobs=);
26957     +        run;
26958     +
26959     +        %tmpred(&export, &export, &nclus, type=, ignore=0,
26960     +                  freqDS=, compress=1);
26961     +
26962     +        data &export;
26963     +           set &export;
26964     +           rename prob1-prob&nClus = &prefix._prob1-&prefix._prob&nclus;
26965     +           rename _cluster_=&prefix._cluster_;
26966     +        run;
26967     +
26968     +        %if &outclusters ne %then %do;
26969     +              %let memloc = _tmmem;
26970     +              proc tmutil data=&_scrout key=&filterterms ;
26971     +                 control init memloc="&memloc" release;
26972     +                 output keeponly out=_outtmutil;
26973     +              run;
26974     +
26975     +              data _docdata;
26976     +                 set &export (rename=(&prefix._cluster_=cluster));
26977     +              run;
26978     +
26979     +              /* Recalculate desc terms */
26980     +              data _terms_;
26981     +               set &filterterms;
26982     +               by key _ispar;
26983     +               if first.key then
26984     +                output;
26985     +               else;
26986     +              run;
26987     +
26988     +              data _terms_;
26989     +               set _terms_;
26990     +               if _ispar='+' then
26991     +                  Term=_ispar || ' ' || term;
26992     +              run;
26993     +
26994     +             %tmsort(data=_outtmutil,
26995     +               out=_tmout_,
26996     +               by=_termnum_,
26997     +                  options=,
26998     +               threads=threads);
26999     +
27000     +
27001     +             data _tmout_;
27002     +               merge _tmout_ (in=_A_)
27003     +                  _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
27004     +               by _termnum_;
27005     +               if _A_;
27006     +             run;
27007     +
27008     +             data _docs_;
27009     +               set _docdata (rename=(cluster=_cluster_) keep=_document_ cluster);
27010     +               _SEGMNT_=_cluster_;
27011     +             run;
27012     +
27013     +             %tmterm1(DSN_TPARS=_tmout_,
27014     +              DSN_CLUS=_docs_,
27015     +              DSN_DESC=_desc_,
27016     +              N_DESC_TERMS=&descterms,
27017     +              N_CLUS=&nclus,
27018     +              top_freq=%eval(&descterms*2),
27019     +              key=);
27020     +
27021     +             %tmsort(data=_desc_,
27022     +               out=_desc_,
27023     +               by=_cluster_,
27024     +                  options=,
27025     +               threads=threads);
27026     +
27027     +             proc sql noprint;
27028     +               create table &outclusters as
27029     +                 select a.clus_desc, b.* from &outclusters b left join _desc_ a
27030     +                 on a._cluster_=b._cluster_;
27031     +             quit;
27032     +
27033     +       %end;
27034     +
27035     +    %end;
27036     +    %else %do;
27037     +
27038     +        data _clustermean;
27039     +            set &clusters(keep=_cluster_ _mean1-_mean&svdkeep. freq);
27040     +        run;
27041     +
27042     +        proc sql;
27043     +        create table _meandocs as
27044     +            select a.*, b.*
27045     +            from &export(keep=&prefix._SVD1 - &prefix._SVD&SVDKEEP _document_) a , _clustermean b;
27046     +        quit;
27047     +
27048     +
27049     +        proc sort data=_meandocs;
27050     +        by _document_;
27051     +        run;
27052     +
27053     +        %if (&syscc>4) %then %do;
27054     +            %let emexceptionstring=EMTOOL.INSUFFICIENTMEM;
27055     +            %goto end_tmc;
27056     +        %end;
27057     +
27058     +        %tmsort(data=_meandocs,out=,by=_document_);
27059     +
27060     +          data _docdata(drop=_mean1-_mean&svdkeep. j _CLUSTER_ _freq_ rename=(_cluster_=&prefix._cluster_ distance=&prefix._distance));
27061     +            set _meandocs;
27062     +            drop _minDist_ _dist_ j freq;
27063     +            label CLUSTER = 'Cluster ID';
27064     +            array _means(&svdkeep) _mean1-_mean&svdkeep.;
27065     +            array _cols(&svdkeep) &prefix._SVD1-&prefix._SVD&svdkeep.;
27066     +            by _document_;
27067     +            retain CLUSTER _mindist_;
27068     +            _dist_ = 0;
27069     +            /* innner product*/
27070     +            do j = 1 to &svdkeep;
27071     +                _dist_ = _dist_ + (_cols(j)-_means(j))*(_cols(j)-_means(j));
27072     +            end;
27073     +
27074     +            /* initialization*/
27075     +            if first._document_ then do;
27076     +                _minDist_ = _dist_;
27077     +                CLUSTER = _cluster_;
27078     +            end;
27079     +            /*optimization*/
27080     +            if (_dist_ < _minDist_) then do;
27081     +                _minDist_ = _dist_;
27082     +                CLUSTER = _cluster_;
27083     +            end;
27084     +            if last._document_ then do;
27085     +               output;
27086     +            end;
27087     +        run;
27088     +        proc sort data=_docdata;
27089     +           by _document_;
27090     +        proc sort data=&export;
27091     +           by _document_;
27092     +        run;
27093     +
27094     +        data &export;
27095     +           merge &export _docdata;
27096     +           by _document_;
27097     +           rename cluster=&prefix._cluster_;
27098     +        run;
27099     +    %end;
27100     +
27101     +    /* Reorder variables in exported data set */
27102     +    proc sql noprint;
27103     +        create table &export as
27104     +        select &textvar, &prefix._cluster_, *
27105     +        from &export;
27106     +    quit;
27107     +
27108     +
27109     +    %if &outclusters ne %then %do;
27110     +
27111     +        /* update freqencies in cluster table */
27112     +         proc freq data =_docdata ;
27113     +            tables cluster/out=_tempfreqtable;
27114     +         run;
27115     +
27116     +        proc sql noprint;
27117     +            create table &outclusters as
27118     +            select  a.*, b.count as freq, b.percent/100 as percent
27119     +            from &clusters (drop= freq percent _rmsstd_) a, _tempfreqtable b
27120     +           where a._cluster_=b.cluster;
27121     +
27122     +        quit;
27123     +
27124     +        %if %left(&algorithm)=2.0 %then %do;
27125     +
27126     +          proc sql noprint;
27127     +
27128     +             create table &hierds as select a.freq, b.*
27129     +                from &outclusters a right join &hierds b on a._cluster_=b._cluster_;
27130     +          quit;
27131     +
27132     +          /* Find descriptive terms for clusters & parents */
27133     +          filename temp catalog 'sashelp.emtxtext.tmgethierterms.source';
27134     +          %include temp;
27135     +          filename temp;
27136     +
27137     +          %tm_getHierTerms(hierds=&hierds,
27138     +                         docs=_docdata,
27139     +                         tmout=&filtertmout,
27140     +                         terms= &filterterms,
27141     +                         ndescterms=&descterms);
27142     +
27143     +          proc sql noprint;
27144     +             create table &outclusters as
27145     +                select a.clus_desc, b.* from &hierds a, &outclusters b
27146     +                where a._cluster_=b._cluster_;
27147     +
27148     +             update &hierds set freq=0 where clus_desc="" and _cluster_ ne 1;
27149     +          quit;
27150     +
27151     +          /* Add frequencies to ancestors */
27152     +          data _hd;
27153     +             set &hierds;
27154     +             cluster=_cluster_;
27155     +             drop _cluster_ parent;
27156     +          run;
27157     +
27158     +          %let empty=1;
27159     +
27160     +          %do %while (&empty);
27161     +
27162     +            proc sql noprint;
27163     +                update _hd set freq=
27164     +                    (select sum(freq) from &HIERDS
27165     +                    where parent=cluster)
27166     +                    where freq=. and cluster not in
27167     +                    (select parent from &hierds where freq=.);
27168     +                select count(*) into :empty from _hd
27169     +                    where freq=.;
27170     +                update &hierds set freq=(select freq from _hd where _cluster_=cluster);
27171     +            quit;
27172     +
27173     +          %end;
27174     +
27175     +          /* Set graphdesc variable for graph display */
27176     +          data &hierds(drop=plus pos sub);
27177     +            set &hierds;
27178     +            plus='';
27179     +            if substr(CLUS_DESC, 1, 1) = "+" then plus="+ ";
27180     +            if ktrim(clus_desc) ne "" then do;
27181     +              if(substr(CLUS_DESC, 1, 1)) = "'" then do;
27182     +                 pos = findc(CLUS_DESC, "'",2);
27183     +                 sub = substr(CLUS_DESC,1,pos);
27184     +              end;
27185     +              else sub = scan(CLUS_DESC, 1);
27186     +              graphdesc=_CLUSTER_ || ': ' || plus || sub;
27187     +            end;
27188     +            else graphdesc=_CLUSTER_;
27189     +          run;
27190     +        %end;
27191     +
27192     +         /*calculate residual for each doc */
27193     +
27194     +         proc sort data=_docdata (rename=(cluster=_cluster_));
27195     +            by _cluster_;
27196     +         run;
27197     +
27198     +         data _rmscalc;
27199     +            merge _docdata(in=inhere) &outclusters;
27200     +            array _means(&svdkeep) _mean1-_mean&svdkeep.;
27201     +            array _svds(&svdkeep) &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.;
27202     +            by _cluster_;
27203     +            error=0;
27204     +            do i = 1 to &svdkeep;
27205     +               error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
27206     +            end;
27207     +
27208     +            drop i ;
27209     +         run;
27210     +
27211     +          /*calc standardized residual for clusters*/
27212     +         proc summary data=_rmscalc nway;
27213     +            class _cluster_;
27214     +            var error;
27215     +            output out=_meanerr mean=meane sum=sume;
27216     +         run;
27217     +
27218     +         data _rmsse;
27219     +            set _meanerr;
27220     +            /* original code divides by number of svd dims*/
27221     +            if _freq_ gt 1 then do;
27222     +              _rmsstd_=sqrt(sume/((_freq_-1)*(&svdkeep.)));
27223     +            end;
27224     +            else do;
27225     +              _rmsstd_=0;
27226     +            end;
27227     +            keep _cluster_  _rmsstd_;
27228     +         run;
27229     +
27230     +
27231     +         proc sql noprint;
27232     +           create table _clusstat2 as
27233     +           select a.*,b.*
27234     +           from &outclusters a left join _rmsse b
27235     +           on a._cluster_=b._cluster_;
27236     +
27237     +           create table &outclusters as
27238     +           select * from _clusstat2;
27239     +         quit;
27240     +
27241     +
27242     +    %end;
27243     +
27244     +
27245     +%end_tmc:
27246     +    %if &tm_debug =0  %then %do;
27247     +    proc sql noprint;
27248     +        drop table _weights;
27249     +        drop table _colpro;
27250     +        drop table _scrout;
27251     +        drop table _svdm1;
27252     +        drop table _inweights;
27253     +        drop table _clustermean;
27254     +        drop table _clusstat2;
27255     +        drop table _outtmutil;
27256     +        drop table _rmscalc;
27257     +        drop table _rmsse;
27258     +        drop table _meanerr;
27259     +        drop table _meandocs;
27260     +        drop table _import_ds;
27261     +        drop table _hd;
27262     +        drop table _terms_;
27263     +        drop table _docs_;
27264     +        drop table _tmout_;
27265     +        drop table _desc_;
27266     +        drop table _docdata;
27267     +    quit;
27268     +    %end;
27269     +
27270     +%mend tmc_doc_score;
27271     +
27272     +
27273     +
27274     +
27275     +
27276     +
27277     +
27278     +
27279     +
27280     +
27281     +
27282     +
27283     +
27284     +
27285     +
27286     +
27287     +
27288     +
27289     +
27290     +
27291     +
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtext.tmsvd.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTEXT.TMSVD.SOURCE입니다.
27293     + /*
27295     +  Macro:     tmsvd.sas
27296     +  Purpose:  Call proc spsvd with given defaults and parameters.
27297     +  Syntax:   %tmsvd(in,k=,global=,local=,row=,col=,entry=,scaleOp=,normOp=,
27298     +            in_global=,in_u=,in_s=,in_v=,u=,s=,v=,wgt=,wordPro=,
27299     +           colPro=, p=, tol=, gwgt=, mink=, maxk=, res=, remote=, compact=,bigpro=0);
27301     +  Required Parameters:  in     The data= data set.
27302     +  Optional Parameters:  k= The number of dimensions to reduce to
27303     +                   global=  The global weight to use, defaults to IDF.
27304     +                   local=  The local weight to use, defaults to BINARY.
27305     +                   row=   Column in the input data set that represents
27306     +                          the matrix row,
27307     +                       defaults to _termnum_.
27308     +            col=   Column in the input data set that represents
27309     +                          the matrix column,
27310     +                         defaults to _document_.
27311     +            entry= Column in the input data set that represents the
27312     +                          value in the
27313     +                         given row,column cell.  Defaults to _count_.
27314     +             scaleOp= Scale options: scalerow scalecol scaleall
27315     +            normOp=  Normalization options: normrow normcol normall
27316     +            in_global= The gwgt= output data set from a prior spsvd run.
27317     +                   in_u=  The u= output from a prior spsvd run.
27318     +                   in_s=  The s= output from a prior spsvd run.
27319     +                   in_v=  The v= output from a prior spsvd run.
27320     +                   u=     matrix U data set
27321     +                   s=     matrix S data set
27322     +                   v=     matrix V data set
27323     +                  wgt=   weighted input matrix data set
27324     +                  wordPro= projections of rows of A onto columns of V
27325     +                  colPro=  projection of columns of A onto columns of U
27326     +                  p=   number of iterations
27327     +                  tol= convergence tolerance
27328     +                   gwgt= global weights data set
27329     +                  mink=
27330     +                  maxk=
27331     +                  res=
27332     +                  remote= name of file
27334     +  History:
27335     +  2001/01/16 - Kevin Daly - Initial coding.
27336     +  2001/01/19 - Kevin Daly - Fixed so that when global=NONE and local=NONE,
27337     +             no gwgt data set
27338     +               is requested.  This was causing an error and the proc
27339     +              would terminate.
27340     +  2001/02/21 - Bill Wheeler - Allowd all options to be specified
27341     +  2001/05/14 - Bill Wheeler - Added version 9 options min_k, max_k, resolution
27342     +  2001/08/14 - Bill Wheeler - Added remote option
27343     +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
27344     +*/
27346     +%macro tmsvd(in,k=,global=,local=,row=,col=,entry=,scaleOp=,normOp=,
27347     +             in_global=, in_u=, in_s=, in_v=, u=, s=, v=,
27348     +             wgt=, wordPro=, colPro=, p=, tol=, gwgt=, mink=, maxk=, res=,
27349     +             remote=, compact=,bigpro= );
27351     +  %put;
27352     +  /* Defaults */
27353     +  %if &k ^= %then %let k = k = &k;
27354     +  %if &global ^= %then %let global = global = &global;
27355     +  %if %lowcase(&local) = bin %then %let local=BINARY;
27356     +  %if &local ^= %then %let local=local=&local;
27357     +  %if &row= %then %let row=_termnum_;
27358     +  %if &col= %then %let col=_document_;
27359     +  %if &entry= %then %let entry=_count_;
27360     +  %if &scaleOp ^= %then %let scaleOp = scaledoc;
27361     +  %if &normOp ^= %then %let normOp = normdoc;
27362     +  %if &compact ^= %then %let compact = compact;
27363     +  %else %let compact = ;
27365     +  %if &in_global ^= %then %let in_global = in_global=&in_global;
27366     +  %if &in_u ^= %then %let in_u = in_u=&in_u;
27367     +  %if &in_s ^= %then %let in_s = in_s=&in_s;
27368     +  %if &in_v ^= %then %let in_v = in_v=&in_v;
27369     +  %if ((&p ^= ) and (&p ^= .)) %then %let p = p=&p;
27370     +  %else %let p = ;
27371     +  %if ((&tol ^= ) and (&tol ^= .)) %then %let tol = tol=&tol;
27372     +  %else %let tol = ;
27374     +  %IF &SYSVER < 9 %THEN %DO;
27375     +    %IF &k = %THEN %DO;
27376     +      %IF &maxk ^= %THEN %LET k = k = &maxk;
27377     +      %ELSE %LET k = k = 100;
27378     +    %END;
27379     +    %LET mink = ;
27380     +    %LET maxk = ;
27381     +    %LET res = ;
27382     +    %LET remote = ;
27383     +    %LET compact = ;
27384     +  %END;
27387     +  %if &colPro ^= %then %let colPro = COLPRO=&colPro;
27388     +  %if &gwgt ^= %then %let gwgt = GWGT=&gwgt;
27389     +  %if &s ^= %then %let s = S=&s;
27390     +  %if &u ^= %then %let u = U=&u;
27391     +  %if &v ^= %then %let v = V=&v;
27392     +  %if &wordPro ^= %then %let wordPro = WORDPRO=&wordPro;
27393     +  %if &wgt ^= %then %let wgt = WGT=&wgt;
27394     +  %if (&mink ^=  ) and (&mink ^= .) %then %let mink = min_k = &mink;
27395     +  %else %let mink = ;
27396     +  %if &maxk ^= %then %let maxk = max_k = &maxk;
27397     +  %if &res ^= %then %let res = res = &res;
27398     +  proc sort data=&in; by &col;
27399     +  /* Run the proc */
27400     +  proc spsvd data=&in
27401     +      &mink
27402     +      &maxk
27403     +      &res
27404     +      &k &compact
27405     +    &local &global &in_global
27406     +    &in_u &in_s &in_v &p &tol;
27407     +    row &row; col &col; entry &entry;
27408     +      output &colPro &gwgt &normOp &scaleOp &s &u &v
27409     +           &wordPro &wgt &bigpro;
27410     +    &remote;
27411     +  run;
27413     +%mend tmsvd;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtext.tmfast.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTEXT.TMFAST.SOURCE입니다.
27414     + /*
27415     +
27416     +  Macro:   tmfast.sas
27417     +  Purpose: Call proc fastclus with given defaults and parameters.
27418     +  Syntax:  %tmfast(data=, clusters=, outstat=, vars=);
27419     +
27420     +  Required Parameters:  data=      The input data set.
27421     +                        clusters=  The maximum number of clusters
27422     +
27423     +  Optional Parameters:  vars=      Variables to be used
27424     +                        outstat=   The name of the OUTSTAT data set
27425     +                        outseed=   The name of the OUTSEED data set
27426     +
27427     +  Either outstat or outseed mut be given, but not both.
27428     +  History:
27429     +  2001/01/16 - Bill Wheeler - Initial Coding.
27430     +
27431     +*/
27432     +%MACRO tmfast(data=, clusters=, outstat=, outseed=,
27433     +                 id=, out=, vars=);
27434     + /* defaults */
27435     + %if (&id ne ) %then %let id = id &id;
27436     + %if (&out ne ) %then %let out = out = &out;
27437     + %if (&vars ne ) %then %let var = var &vars;
27438     + %else %let var = ;
27439     +
27440     + %if &outseed= %then
27441     + %do;
27442     +   proc fastclus data = &data
27443     +   maxclusters = &clusters noprint
27444     +   outstat = &outstat &out;
27445     +   &var;
27446     +   &id;
27447     + %end;
27448     + %else
27449     + %do;
27450     +   proc fastclus data = &data
27451     +   maxclusters = &clusters noprint
27452     +   outseed = &outseed &out;
27453     +   &var;
27454     +   &id;
27455     + %end;
27456     +%MEND tmfast;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(SCORE):   proc sql noprint;
MPRINT(SCORE):   select count(*) into :svdkeep from EMWS5.TextCluster2_svd_s where keep=1;
MPRINT(SCORE):   create table _clusterms as select key, term, role, keep, freq, numdocs, parent, _ispar, weight from EMWS5.TextCluster2_terms;
NOTE: Table WORK._CLUSTERMS created, with 2346 rows and 9 columns.

NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(SCORE):   data _filter_tmout;
MPRINT(SCORE):   set EMWS5.TextFilter2_tmout;
MPRINT(SCORE):   run;

NOTE: 5643개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_TMOUT.에서 읽었습니다.
NOTE: 데이터셋 WORK._FILTER_TMOUT은(는) 5643개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   select cellwgt into: cellwgt from EMWS5.TextCluster2_tmconfig;
MPRINT(TMC_DOC_SCORE):   select clus_alg into: algorithm from EMWS5.TextCluster2_tmconfig;
MPRINT(TMC_DOC_SCORE):   select parseVar into :textvar from EMWS5.TextCluster2_tmconfig;
MPRINT(TMC_DOC_SCORE):   select count(*) into :nclus from EMWS5.TextCluster2_clusters;
MPRINT(TMC_DOC_SCORE):   select count(*) into :svdkeep from EMWS5.TextCluster2_svd_s where keep=1;
MPRINT(TMC_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMC_DOC_SCORE):   data _import_ds;
MPRINT(TMC_DOC_SCORE):   set EMWS5.TextFilter2_TRAIN;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 499개의 관측값을 데이터셋 EMWS5.TEXTPARSING2_TRAIN.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_DOC_IDS.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_TRAIN.에서 읽었습니다.
NOTE: 데이터셋 WORK._IMPORT_DS은(는) 499개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.09 초
      cpu 시간            0.07 초
      

MPRINT(TMSORT):   proc sort data = _clusterms(where=(keep='Y')) THREADS out = _terms(keep= KEY PARENT);
MPRINT(TMSORT):   by KEY;
MPRINT(TMSORT):   run;

NOTE: 입력 데이터셋이 이미 정렬되어 있습니다; 출력 데이터셋에 복사되었습니다.
NOTE: 2346개의 관측값을 데이터셋 WORK._CLUSTERMS.에서 읽었습니다.
      WHERE keep='Y';
NOTE: 데이터셋 WORK._TERMS은(는) 2346개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMSORT):   proc sort data = _filter_tmout THREADS out = _filter_tmout;
MPRINT(TMSORT):   by _termnum_;
MPRINT(TMSORT):   run;

NOTE: 5643개의 관측값을 데이터셋 WORK._FILTER_TMOUT.에서 읽었습니다.
NOTE: 데이터셋 WORK._FILTER_TMOUT은(는) 5643개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.06 초
      

MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   data _svdm1;
MPRINT(TMC_DOC_SCORE):   merge _terms (where=(PARENT ne _termnum_) in=_b_ keep=KEY PARENT rename=(KEY=_TERMNUM_)) _filter_tmout (in = _A_ rename=(_COUNT_=COUNT));
MPRINT(TMC_DOC_SCORE):   by _termnum_;
MPRINT(TMC_DOC_SCORE):   if _B_;
MPRINT(TMC_DOC_SCORE):   if (_A_ and _B_ and (PARENT ne .)) then _TERMNUM_ = PARENT;
MPRINT(TMC_DOC_SCORE):   keep _TERMNUM_ _DOCUMENT_ COUNT;
MPRINT(TMC_DOC_SCORE):   if (_DOCUMENT_=.) or (COUNT=.) then delete;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 2036개의 관측값을 데이터셋 WORK._TERMS.에서 읽었습니다.
      WHERE PARENT not = _termnum_;
NOTE: 5643개의 관측값을 데이터셋 WORK._FILTER_TMOUT.에서 읽었습니다.
NOTE: 데이터셋 WORK._SVDM1은(는) 5643개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMC_DOC_SCORE):   proc sql ;
MPRINT(TMC_DOC_SCORE):   create table _scrout as select distinct _TERMNUM_, _DOCUMENT_, sum(COUNT) as _COUNT_ from _svdm1 group by _TERMNUM_, _DOCUMENT_;
NOTE: Table WORK._SCROUT created, with 5620 rows and 3 columns.

MPRINT(TMC_DOC_SCORE):   drop table _svdm1;
NOTE: 테이블 WORK._SVDM1 을(를) 삭제했습니다.
MPRINT(TMC_DOC_SCORE):   drop table _terms;
NOTE: 테이블 WORK._TERMS 을(를) 삭제했습니다.
MPRINT(TMC_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMSORT):   proc sort data = _clusterms(where=(KEEP='Y' and PARENT=.)) out = _weights (rename=(KEY=INDEX WEIGHT=GWGT) keep=KEY WEIGHT);
MPRINT(TMSORT):   by KEY;
MPRINT(TMSORT):   run;

NOTE: 입력 데이터셋이 이미 정렬되어 있습니다; 출력 데이터셋에 복사되었습니다.
NOTE: 1721개의 관측값을 데이터셋 WORK._CLUSTERMS.에서 읽었습니다.
      WHERE (KEEP='Y') and (PARENT=.);
NOTE: 데이터셋 WORK._WEIGHTS은(는) 1721개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMSORT):   proc sort data = _scrout out = _scrout;
MPRINT(TMSORT):   by _DOCUMENT_;
MPRINT(TMSORT):   run;

NOTE: 5620개의 관측값을 데이터셋 WORK._SCROUT.에서 읽었습니다.
NOTE: 데이터셋 WORK._SCROUT은(는) 5620개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   data EMWS5.TextCluster2_svd_u;
MPRINT(TMC_DOC_SCORE):   set EMWS5.TextCluster2_svd_u(keep= index col1-col47);
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 522개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER2_SVD_U.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER2_SVD_U은(는) 522개의 관측값과 48개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMC_DOC_SCORE):   proc sql;
MPRINT(TMC_DOC_SCORE):   create table _inweights as select a.* from _weights a right join EMWS5.TextCluster2_svd_u b on a.index=b.index ;
NOTE: Table WORK._INWEIGHTS created, with 522 rows and 2 columns.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMC_DOC_SCORE):   proc spsvd data=_scrout IN_U=EMWS5.TextCluster2_svd_u local = LOG global = none in_global = _inweights ;
MPRINT(TMC_DOC_SCORE):   row _TERMNUM_;
MPRINT(TMC_DOC_SCORE):   col _DOCUMENT_;
MPRINT(TMC_DOC_SCORE):   entry _COUNT_;
MPRINT(TMC_DOC_SCORE):   output colpro=_COLPRO bigpro normcol prefix="TextCluster2_SVD";
MPRINT(TMC_DOC_SCORE):   run;

WARNING: There are entries to be projected that are not on the IN_U dataset.
NOTE: 5620개의 관측값을 데이터셋 WORK._SCROUT.에서 읽었습니다.
NOTE: 522개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER2_SVD_U.에서 읽었습니다.
NOTE: 522개의 관측값을 데이터셋 WORK._INWEIGHTS.에서 읽었습니다.
NOTE: 데이터셋 WORK._COLPRO은(는) 487개의 관측값과 48개의 변수를 가지고 있습니다.
NOTE: 프로시저 SPSVD 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMC_DOC_SCORE):   proc sort data=_import_ds;
MPRINT(TMC_DOC_SCORE):   by _DOCUMENT_;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 499개의 관측값을 데이터셋 WORK._IMPORT_DS.에서 읽었습니다.
NOTE: 데이터셋 WORK._IMPORT_DS은(는) 499개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMC_DOC_SCORE):   proc sort data=_colpro;
MPRINT(TMC_DOC_SCORE):   by INDEX;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 487개의 관측값을 데이터셋 WORK._COLPRO.에서 읽었습니다.
NOTE: 데이터셋 WORK._COLPRO은(는) 487개의 관측값과 48개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMC_DOC_SCORE):   data EMWS5.TextCluster2_TRAIN;
MPRINT(TMC_DOC_SCORE):   merge _import_ds (in=_C_ ) _colpro (rename=(INDEX=_DOCUMENT_));
MPRINT(TMC_DOC_SCORE):   by _DOCUMENT_;
MPRINT(TMC_DOC_SCORE):   if _C_;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 499개의 관측값을 데이터셋 WORK._IMPORT_DS.에서 읽었습니다.
NOTE: 487개의 관측값을 데이터셋 WORK._COLPRO.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER2_TRAIN은(는) 499개의 관측값과 50개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TMC_DOC_SCORE):   data EMWS5.TextCluster2_TRAIN;
MPRINT(TMC_DOC_SCORE):   set EMWS5.TextCluster2_TRAIN;
MPRINT(TMC_DOC_SCORE):   array svd_array TextCluster2_SVD1 - TextCluster2_SVD47;
MPRINT(TMC_DOC_SCORE):   do i = 1 to dim(svd_array);
MPRINT(TMC_DOC_SCORE):   if svd_array(i)=. then svd_array(i)=0;
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   drop i;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 499개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER2_TRAIN.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER2_TRAIN은(는) 499개의 관측값과 50개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.04 초
      

MPRINT(TMSORT):   proc sort data = EMWS5.TextCluster2_TRAIN ;
MPRINT(TMSORT):   by _document_;
MPRINT(TMSORT):   run;

NOTE: 499개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER2_TRAIN.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER2_TRAIN은(는) 499개의 관측값과 50개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   data _clustermean;
MPRINT(TMC_DOC_SCORE):   set EMWS5.TextCluster2_clusters(keep=_cluster_ _mean1-_mean47 freq);
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 9개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER2_CLUSTERS.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLUSTERMEAN은(는) 9개의 관측값과 49개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMC_DOC_SCORE):   proc sql;
MPRINT(TMC_DOC_SCORE):   create table _meandocs as select a.*, b.* from EMWS5.TextCluster2_TRAIN(keep=TextCluster2_SVD1 - TextCluster2_SVD47 _document_) a , _clustermean b;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._MEANDOCS created, with 4491 rows and 97 columns.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMC_DOC_SCORE):   proc sort data=_meandocs;
MPRINT(TMC_DOC_SCORE):   by _document_;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 4491개의 관측값을 데이터셋 WORK._MEANDOCS.에서 읽었습니다.
NOTE: 데이터셋 WORK._MEANDOCS은(는) 4491개의 관측값과 97개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.06 초
      

MPRINT(TMSORT):   proc sort data = _meandocs THREADS ;
MPRINT(TMSORT):   by _document_;
MPRINT(TMSORT):   run;

NOTE: 입력 데이터셋이 이미 정렬되어 있어서, 정렬을 실행하지 않았습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   data _docdata(drop=_mean1-_mean47 j _CLUSTER_ _freq_ rename=(_cluster_=TextCluster2_cluster_ distance=TextCluster2_distance));
MPRINT(TMC_DOC_SCORE):   set _meandocs;
MPRINT(TMC_DOC_SCORE):   drop _minDist_ _dist_ j freq;
MPRINT(TMC_DOC_SCORE):   label CLUSTER = 'Cluster ID';
MPRINT(TMC_DOC_SCORE):   array _means(47) _mean1-_mean47;
MPRINT(TMC_DOC_SCORE):   array _cols(47) TextCluster2_SVD1-TextCluster2_SVD47;
MPRINT(TMC_DOC_SCORE):   by _document_;
MPRINT(TMC_DOC_SCORE):   retain CLUSTER _mindist_;
MPRINT(TMC_DOC_SCORE):   _dist_ = 0;
MPRINT(TMC_DOC_SCORE):   do j = 1 to 47;
MPRINT(TMC_DOC_SCORE):   _dist_ = _dist_ + (_cols(j)-_means(j))*(_cols(j)-_means(j));
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   if first._document_ then do;
MPRINT(TMC_DOC_SCORE):   _minDist_ = _dist_;
MPRINT(TMC_DOC_SCORE):   CLUSTER = _cluster_;
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   if (_dist_ < _minDist_) then do;
MPRINT(TMC_DOC_SCORE):   _minDist_ = _dist_;
MPRINT(TMC_DOC_SCORE):   CLUSTER = _cluster_;
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   if last._document_ then do;
MPRINT(TMC_DOC_SCORE):   output;
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   run;

WARNING: DROP, KEEP 또는 RENAME의 변수 j은(는) 참조되지 않습니다.
WARNING: DROP, KEEP 또는 RENAME의 변수 _freq_은(는) 참조되지 않습니다.
WARNING: DROP, KEEP 또는 RENAME의 변수 _cluster_은(는) 참조되지 않습니다.
WARNING: DROP, KEEP 또는 RENAME의 변수 distance은(는) 참조되지 않습니다.
NOTE: 4491개의 관측값을 데이터셋 WORK._MEANDOCS.에서 읽었습니다.
NOTE: 데이터셋 WORK._DOCDATA은(는) 499개의 관측값과 49개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.06 초
      

MPRINT(TMC_DOC_SCORE):   proc sort data=_docdata;
MPRINT(TMC_DOC_SCORE):   by _document_;

NOTE: 499개의 관측값을 데이터셋 WORK._DOCDATA.에서 읽었습니다.
NOTE: 데이터셋 WORK._DOCDATA은(는) 499개의 관측값과 49개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMC_DOC_SCORE):   proc sort data=EMWS5.TextCluster2_TRAIN;
MPRINT(TMC_DOC_SCORE):   by _document_;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 입력 데이터셋이 이미 정렬되어 있어서, 정렬을 실행하지 않았습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMC_DOC_SCORE):   data EMWS5.TextCluster2_TRAIN;
MPRINT(TMC_DOC_SCORE):   merge EMWS5.TextCluster2_TRAIN _docdata;
MPRINT(TMC_DOC_SCORE):   by _document_;
MPRINT(TMC_DOC_SCORE):   rename cluster=TextCluster2_cluster_;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 499개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER2_TRAIN.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 WORK._DOCDATA.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER2_TRAIN은(는) 499개의 관측값과 51개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   create table EMWS5.TextCluster2_TRAIN as select review , TextCluster2_cluster_, * from EMWS5.TextCluster2_TRAIN;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: 변수 Review이(가) 파일 EMWS5.TEXTCLUSTER2_TRAIN에 이미 존재합니다.
WARNING: 변수 TextCluster2_cluster_이(가) 파일 EMWS5.TEXTCLUSTER2_TRAIN에 이미 존재합니다.
NOTE: Table EMWS5.TEXTCLUSTER2_TRAIN created, with 499 rows and 51 columns.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.01 초
      

MPRINT(TMC_DOC_SCORE):   proc freq data =_docdata ;
MPRINT(TMC_DOC_SCORE):   tables cluster/out=_tempfreqtable;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 499개의 관측값을 데이터셋 WORK._DOCDATA.에서 읽었습니다.
NOTE: 데이터셋 WORK._TEMPFREQTABLE은(는) 9개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 출력 결과 (프로시저: FREQ, 페이지: 2)
NOTE: 프로시저 FREQ 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   create table EMWS5.TextCluster2_clusters as select a.*, b.count as freq, b.percent/100 as percent from EMWS5.TextCluster2_clusters (drop= freq percent _rmsstd_) a, _tempfreqtable b where a._cluster_=b.cluster;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table EMWS5.TEXTCLUSTER2_CLUSTERS created, with 9 rows and 51 columns.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   create table EMWS5.TextCluster2_hierds as select a.freq, b.* from EMWS5.TextCluster2_clusters a right join EMWS5.TextCluster2_hierds b on a._cluster_=b._cluster_;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: 변수 Freq이(가) 파일 EMWS5.TEXTCLUSTER2_HIERDS에 이미 존재합니다.
NOTE: Table EMWS5.TEXTCLUSTER2_HIERDS created, with 17 rows and 6 columns.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.04 초
      

MPRINT(TMC_DOC_SCORE):   filename temp catalog 'sashelp.emtxtext.tmgethierterms.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TMGETHIERTERMS.SOURCE입니다.
27457     +%macro tm_getHierTerms(hierds=,docs=,tmout=,terms=,ndescterms=);
27458     +
27459     +      filename temp catalog 'sashelp.emtext.tmterm1.source';
27460     +      %include temp;
27461     +      filename temp catalog 'sashelp.emtext.tmsort.source';
27462     +      %include temp;
27463     +      filename temp;
27464     +
27465     +      data _terms_;
27466     +       set &terms;
27467     +       by key _ispar;
27468     +       if first.key then
27469     +          output;
27470     +       else;
27471     +    run;
27472     +
27473     +    /* Concatenate + to terms */
27474     +    data _terms_;
27475     +        set _terms_;
27476     +        if _ispar='+' then
27477     +            Term=_ispar || ' ' || term;
27478     +    run;
27479     +
27480     +    %tmsort(data=&tmout,
27481     +         out=_tmout_,
27482     +         by=_termnum_,
27483     +            options=,
27484     +         threads=threads);
27485     +
27486     +
27487     +    data _tmout_;
27488     +      merge _tmout_ (in=_A_)
27489     +            _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
27490     +      by _termnum_;
27491     +      if _A_;
27492     +    run;
27493     +
27494     +
27495     +      data &hierds;
27496     +            set &hierds (drop=clus_desc);
27497     +            length clus_desc $2000;
27498     +            clus_desc="";
27499     +      run;
27500     +
27501     +      data _hierds; set &hierds; run;
27502     +
27503     +      /* initialize tables to create table of ancestors */
27504     +      proc sql noprint;
27505     +            select max(level) into :level from _hierds;
27506     +            create table _ancestors as select _cluster_, parent, parent as ancestor,
27507     +                  parent as newclus from _hierds;
27508     +            create table _hierds as select a.*, newclus from _hierds a, _ancestors b
27509     +                  where a._cluster_=b._cluster_;
27510     +
27511     +            alter table _ancestors add tlevel int;
27512     +            update _ancestors set tlevel=(select level from &hierds a where
27513     +                a._cluster_=ancestor);
27514     +      quit;
27515     +
27516     +      %let nottop=1;
27517     +
27518     +      /* create ancestors table, one record for each ancestor of a cluster */
27519     +      %do %while (&nottop);
27520     +            proc sql noprint;
27521     +                  create table _ancestors2 as select a._cluster_, a.parent,
27522     +                  b.parent as ancestor, b.parent as newcluster,
27523     +                  (select level from &hierds c where c._cluster_=b.parent) as tlevel
27524     +                  from _hierds a, _hierds b where a.newclus=b._cluster_;
27525     +
27526     +                  select count(*) into :nottop from _ancestors2;
27527     +
27528     +                  create table _hierds as select a._cluster_, a.parent, b.newcluster as newclus, level
27529     +                  from _hierds a left join _ancestors2 b on a._cluster_=b._cluster_;
27530     +            quit;
27531     +
27532     +            data _ancestors (drop=newclus newcluster parent);
27533     +                  set _ancestors _ancestors2;
27534     +                  if ancestor ne .;
27535     +            run;
27536     +      %end;
27537     +
27538     +
27539     +      proc sql noprint;
27540     +           insert into _ancestors(_cluster_, ancestor, tlevel)
27541     +                select _cluster_, _cluster_, level
27542     +                from &hierds
27543     +                where freq ne .;
27544     +      quit;
27545     +
27546     +      proc sort data=_ancestors; by ancestor; run;
27547     +
27548     +      /* Find desc terms for each cluster */
27549     +      %do %while(&level ne 1);
27550     +
27551     +            data _docs_ ;
27552     +                  set &docs;
27553     +                  _SEGMNT_=.;
27554     +                  ancestor=.;
27555     +            run;
27556     +
27557     +            proc sql noprint;
27558     +                  create table _level as select _cluster_ as clust
27559     +                        from &hierds where level=&level;
27560     +
27561     +                  select count(*) into :nclus from _level;
27562     +
27563     +                  update _docs_ set ancestor=(select ancestor from _ancestors
27564     +                         where _cluster_=cluster and tlevel=&level);
27565     +
27566     +            quit;
27567     +
27568     +            data _level;
27569     +                  set _level;
27570     +                  segmnt=_n_;
27571     +            run;
27572     +
27573     +            proc sql noprint;
27574     +                  update _docs_ set _SEGMNT_=(select segmnt from _level where
27575     +                        clust=ancestor) where ancestor in (select clust from _level);
27576     +            quit;
27577     +
27578     +            data _docs_;
27579     +                set _docs_(rename=(cluster=_CLUSTER_));
27580     +            run;
27581     +
27582     +            %tmterm1(DSN_TPARS=_tmout_,
27583     +              DSN_CLUS=_docs_,
27584     +              DSN_DESC=_desc_,
27585     +              N_DESC_TERMS=&ndescterms,
27586     +              N_CLUS=&nclus,
27587     +              top_freq=%eval(&ndescterms*2),
27588     +              key=);
27589     +
27590     +            data _desc_(rename=(_CLUSTER_=clus));
27591     +                 set _desc_;
27592     +            run;
27593     +
27594     +            proc sql noprint;
27595     +                  update &hierds set clus_desc=(select clus_desc
27596     +                        from _desc_ where clus=(select segmnt
27597     +                        from _level where clust=_cluster_)) where _cluster_ in
27598     +                        (select clust from _level);
27599     +            quit;
27600     +
27601     +            %let level=%eval(&level-1);
27602     +      %end;
27603     +
27604     +%end_getdesc:
27605     +   %if &tm_debug =0 %then %do;
27606     +        proc sql noprint;
27607     +            drop table _ancestors;
27608     +            drop table _ancestors2;
27609     +            drop table _terms_;
27610     +            drop table _docs_;
27611     +            drop table _tmout_;
27612     +            drop table _desc_;
27613     +            drop table _hierds;
27614     +            drop table _level;
27615     +        quit;
27616     +    %end;
27617     +
27618     +%mend;
27619     +
27620     +
27621     +
27622     +
27623     +
27624     +
27625     +
27626     +
27627     +
27628     +
27629     +
27630     +
27631     +
27632     +
27633     +
27634     +
27635     +
27636     +
27637     +
27638     +
27639     +
27640     +
27641     +
27642     +
27643     +
27644     +
27645     +
27646     +
27647     +
27648     +
27649     +
27650     +
27651     +
27652     +
27653     +
27654     +
27655     +
27656     +
27657     +
27658     +
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TMC_DOC_SCORE):   filename temp;
NOTE: Fileref TEMP을(를) 삭제했습니다.
MPRINT(TM_GETHIERTERMS):   filename temp catalog 'sashelp.emtext.tmterm1.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTEXT.TMTERM1.SOURCE입니다.
27660     + %macro tmterm1( DSN_TPARS=
27661     +                        , DSN_CLUS=
27662     +                        , DSN_DESC=
27663     +                        , DSN_OUT=
27664     +                        , MIN_PROB=.5
27665     +                        , TOP_FREQ=20
27666     +                        , N_DESC_TERMS=5
27667     +                        , key=
27668     +                        , threads=THREADS
27669     +                        , N_CLUS=
27670     +                        , MIN_NUM=0
27671     +                        ) ;
27673     +   /* PURPOSE: compute &TOP_FREQ terms which represent
27674     +      descriptive drivers of particular cluster
27675     +    *
27676     +    * NOTE:    &MIN_PROB represents minimum CDF probability at which
27677     +         term is included in cluster
27678     +    *          terms failing this criterion will be set to blank to
27679     +         indicate missingness
27680     +    *
27681     +    *          test is made after all terms have been ranked and sorted by
27682     +           descending CDF value
27683     +    *
27684     +    * NOTE:    &TOP_FREQ terms, ranked by frequency,
27685     +       will be selected from each cluster
27686     +    *
27687     +    * EXAMPLE OF USE:
27688     +    *    libname DATALIB '.' ;
27689     +    *
27690     +    *    *** use PROC TPARS   to create dataset DATALIB.TPARS_OUT ***
27691     +    *    *** use PROC CLUSTER to create dataset DATALIB.CLUS_OUT  ***
27692     +    *
27693     +    *    %CLUSTERTERMDRIVER( DSN_TPARS=DATALIB.TPARS_OUT
27694     +    *                      , DSN_CLUS=DATALIB.CLUS_OUT
27695     +    *                      , DSN_DESC=DATALIB.CLUS_DESC
27696     +    *                      , DSN_OUT=DATALIB.TOP_FREQ_OUT
27697     +    *                      , MIN_PROB=.75
27698     +    *                      , TOP_FREQ=10
27699     +    *                      )
27700     +    */
27702     +   /*#################################################################*/
27703     +   /* begin executable statements
27704     +   /*##################################################################*/
27706     +   %local combined termfreq summary uniqterm clus_cdf clus_cdf_transp;
27707     +   %local format dsid nobs rc CLUSALL;
27710     +   %if &SYSVER < 9 %then %let threads = ;
27712     +   %LET combined = _CMB&key;
27713     +   %LET termfreq = _TFREQ&key;
27714     +   %LET summary = _SUM&key;
27715     +   %LET uniqterm = _UNQT&key;
27716     +   %LET clus_cdf = _CLCDF&key;
27717     +   %LET clus_cdf_transp = _CLCDFTR&key;
27719     +   /*====================================================================*/
27720     +   /* create view which joins cluster # to document # so each term has
27721     +      a cluster # and a document #
27722     +      rename '_segmnt_' to 'cluster'  */
27723     +   /*=====================================================================*/
27725     +   proc sql &threads;
27726     +      create view &combined as
27727     +      select t1.*, t2._segmnt_ as cluster
27728     +      from &DSN_TPARS t1, &DSN_CLUS t2
27729     +      where t1._document_ = t2._document_ ;
27730     +   quit ;
27733     +   /*=====================================================================*/
27734     +   /* compute frequency of occurrence of term per term per cluster
27735     +   /*=====================================================================*/
27737     +   proc summary data=&combined nway ;
27738     +      class cluster _term_ ;
27739     +      var _count_ ;
27740     +      output out=&termfreq sum=total ;
27741     +   run ;
27743     +   /*=======================================================================*/
27744     +   /* compute # of documents per cluster
27745     +   /* create _type_ variable for later use (proc summary)
27746     +   /*
27747     +   /* create macro vars containing # of documents for each cluster, CLUSIZEn
27748     +   /* create macro var containing # of documents for document corpus, CLUSALL
27749     +   /*=======================================================================*/
27751     +   proc summary data=&combined( keep= cluster _document_ ) ;
27752     +      class cluster ;
27753     +      var _document_ ;
27754     +      output out=&summary n=n ;
27755     +   run ;
27757     +   /************* bug fix ***************************/
27758     +   /*
27759     +   proc sql noprint &threads;
27760     +      select left( put( max(cluster), best. )) into :_NCLUS_ from &summary ;
27761     +   quit ;
27762     +   */
27764     +   %LET CLUSALL = 0;
27765     +   %DO I = 1 %TO &N_CLUS;
27766     +     %LET CLUSIZE&I = 0;
27767     +   %END;
27768     +   /*
27769     +   data _null_ ; set &summary;
27770     +     if (_N_ = 1) then do;
27771     +       do _i_ = 1 to &_NCLUS_;
27772     +         call symput( 'CLUSIZE' || left( put(_i_, best. )), 0) ;
27773     +       end;
27774     +     end;
27775     +     stop;
27776     +   run ;
27777     +   */
27778     +   /**************************************************/
27780     + data _null_ ;
27781     +  set &summary ;
27782     +  if _type_ = 1 then call
27783     +   symput( 'CLUSIZE' || left( put( cluster, best. )), put( _freq_, best. ));
27784     +  else
27785     +    if _type_ = 0 then call symput( 'CLUSALL', put( _freq_, best. )) ;
27786     + run ;
27788     +   proc sql &threads; drop table &summary; quit;
27790     +   /*====================================================================*/
27791     +   /* sort dataset of term frequencies per cluster into
27792     +      descending frequency per cluster */
27793     +   /*===================================================================*/
27794     +   %tmsort(data=&termfreq, out=&termfreq, by=cluster descending _freq_,
27795     +         options=, threads=&threads);
27797     +   /*======================================================================*/
27798     +   /* select top N most-frequent terms per cluster
27799     +   /*
27800     +   /* remove duplicate terms in list of top N terms from each cluster
27801     +   /*=======================================================================*/
27803     +   data &uniqterm( keep= _term_ _freq_ cluster ) ;
27804     +      set &termfreq ;
27805     +      by cluster ;
27807     +      if first.cluster then n_term = 0 ;
27809     +      n_term + 1 ;
27811     +      if n_term le &TOP_FREQ ;
27812     +   run ;
27814     +   %tmsort(data=&uniqterm, out=&uniqterm( keep= _term_ ), by=_term_,
27815     +         options=nodupkey, threads=&threads);
27817     +   /*=======================================================================*/
27818     +   /* create table containing cluster, term,
27819     +      frequency of term for unique terms only   */
27820     +   /*=======================================================================*/
27822     +   proc sql &threads;
27823     +      create table &clus_cdf as
27824     +      select distinct cluster, _term_, _freq_
27825     +      from &termfreq
27826     +      where _term_ in ( select _term_ from &uniqterm )
27827     +      order by _term_, cluster
27828     +      ;
27829     +   quit ;
27831     +   proc sql &threads; drop table &uniqterm;
27832     +             drop table &termfreq;
27833     +   quit;
27836     +   /*==================================================================*/
27837     +   /* transpose cluster/term/frequency into term/cluster table
27838     +   /* where the observation per term has frequency of term per cluster
27839     +   /*=================================================================*/
27841     +   proc transpose data=&clus_cdf out=&clus_cdf prefix=clus ;
27842     +      by _term_ ;
27843     +      var _freq_ ;
27844     +      id cluster;  /* bug fix */
27845     +   run ;
27847     +   /*=====================================================================*/
27848     +   /* compute cumulative binomial CDF of each term based on its
27849     +     cumulative probability of proportion (presence) in each cluster */
27850     +   /*======================================================================*/
27851     +   /*
27852     +   proc sql noprint &threads;
27853     +      select left( put( max( _segmnt_ ), best. )) into :N_CLUS from &DSN_CLUS ;
27854     +   quit ;
27855     +   */
27857     +   data &clus_cdf ;
27858     +   length _term_ $100;
27859     +      array a_clus ( &N_CLUS ) 4 clus1 - clus&N_CLUS ;
27861     +      set &clus_cdf ;
27863     +      do _i_ = 1 to &N_CLUS ;
27864     +         if a_clus( _i_ ) = . then a_clus( _i_ ) = 0 ;
27865     +      end ;
27868     +      sumfreq = sum( of clus1 - clus&N_CLUS ) ;
27870     +      %do I=1 %to &N_CLUS ;
27871     +        if (clus&I = 0) or (clus&I < &MIN_NUM) then cdf&I = 0;
27872     +        else do;
27873     +          num = sumfreq - clus&I ;
27874     +          div = &CLUSALL - &&CLUSIZE&I;
27875     +          if div > 0 then do;
27876     +            propor = num/div;
27877     +            cdf&I  = CDF( 'binomial', clus&I , propor ,&&CLUSIZE&I ) ;
27878     +          end;
27879     +          else if num = 0 then cdf&I = 1;
27880     +          else cdf&I = 0;
27881     +        end;
27882     +      %end ;
27883     +      /* peel off the plus then put it back*/
27884     +      saveplus=0;
27885     +      if kindex(kleft(ktrim(_term_)),'+')=1 then do;
27886     +         saveplus=1;
27887     +          _term_ = ksubstr(kleft(ktrim(_term_)),3);
27888     +      end;
27889     +      if kindex(kleft(ktrim(_term_)),' ')>0 then _term_ = "'"||kleft(ktrim(_term_)) || "'  ";
27890     +      else _term_ = kleft(ktrim(_term_)) || ' ';
27891     +      if saveplus=1 then do;
27892     +         _term_='+'||kleft(ktrim(_term_));
27893     +      end;
27894     +      drop _i_ propor sumfreq div num saveplus;
27895     +   run ;
27898     +   /*====================================================================*/
27899     +   /* transpose dataset to create dataset sortable by cluster #
27900     +   /*===================================================================*/
27902     +   data &clus_cdf_transp ;
27903     +      array a_cdf  ( &N_CLUS ) cdf1 - cdf&N_CLUS ;
27904     +      array a_count  ( &N_CLUS ) clus1 - clus&N_CLUS ;
27905     +      length clus 4 ;
27906     +      set &clus_cdf ;
27907     +      keep _term_ cdf clus doc_count;
27908     +      do clus = 1 to &N_CLUS ;
27909     +         cdf = a_cdf( clus ) ;
27910     +         doc_count = a_count( clus ) ;
27911     +         if cdf > 0 then output ;
27912     +      end ;
27913     +   run ;
27916     +   /*====================================================================*/
27917     +   /* sort dataset by term, cumulative binomial CDF within term
27918     +   /* if two cdf values are =, sort by doc_count then by  _term_ alphabetically
27919     +   /*====================================================================*/
27921     +   proc sql &threads; drop table &clus_cdf; quit;
27924     +   %tmsort(data=&clus_cdf_transp, out=&clus_cdf_transp,
27925     +      by= clus descending cdf descending doc_count _term_, options=, threads=&threads);
27927     +   %LET format = %EVAL(30*&N_DESC_TERMS);
27928     +   %LET dsid = %sysfunc(open(&clus_cdf_transp));
27929     +   %LET nobs= %sysfunc(attrn(&dsid,nobs));
27930     +   %LET rc = %sysfunc(close(&dsid));
27932     +   data &DSN_DESC; set &clus_cdf_transp (rename=(clus=cluster));
27933     +   format clus_desc $&format..;
27934     +   retain oldclus 0 clus_desc '' count 0;
27935     +   keep _CLUSTER_ clus_desc ;
27937     +   if _N_ = 1 then do;
27938     +     oldclus = cluster;
27939     +     count = 1;
27940     +   end;
27942     +   if (count <= &N_DESC_TERMS) and (cluster = oldclus) then do;
27944     +     if (_N_ = 1) then clus_desc = left(trim(_term_));
27945     +     else clus_desc = kleft(trim(clus_desc)) || "  " || kleft(trim(_term_));
27946     +     count = count + 1;
27947     +     if (_N_ = &nobs) then do;
27948     +       _CLUSTER_ = oldclus;
27949     +       clus_desc = left(trim(clus_desc));
27950     +       /* no longer comma to chop off*/
27951     +       /*clus_desc = substr(clus_desc, 1, max(length(clus_desc)-1,1));*/
27952     +       output;
27953     +     end;
27954     +     else delete;
27956     +   end;
27957     +   else if (count > &N_DESC_TERMS) and (cluster = oldclus) then do;
27958     +     if (_N_ = &nobs) then do;
27959     +       _CLUSTER_ = oldclus;
27960     +       clus_desc = left(trim(clus_desc));
27961     +       /* no longer comma to chop off*/
27962     +       /*clus_desc = substr(clus_desc, 1, max(length(clus_desc)-1,1));*/
27963     +       output;
27964     +     end;
27965     +     else delete;
27966     +   end;
27967     +   else do;
27968     +     _CLUSTER_ = oldclus;
27969     +     oldclus = cluster;
27970     +     clus_desc = left(trim(clus_desc));
27971     +     /* no longer comma to chop off*/
27972     +     /*clus_desc = substr(clus_desc, 1, max(length(clus_desc)-1,1));*/
27973     +     output;
27974     +     count = 2;
27975     +     clus_desc = left(trim(_term_));
27976     +     if (_N_ = &nobs) then do;
27977     +       _CLUSTER_ = oldclus;
27978     +       clus_desc = left(trim(clus_desc));
27979     +       /* no longer comma to chop off*/
27980     +       /*clus_desc = substr(clus_desc, 1, max(length(clus_desc)-1,1));*/
27981     +         output;
27982     +     end;
27983     +   end;
27984     +    run;
27986     +   /* delete data sets */
27988     +   proc sql &threads;
27989     +       drop table &clus_cdf_transp;
27990     +       drop view &combined;
27991     +   quit;
27994     +%mend tmterm1 ;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TM_GETHIERTERMS):   filename temp catalog 'sashelp.emtext.tmsort.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTEXT.TMSORT.SOURCE입니다.
27995     + /*
27996     +PROC SORT macro
27997     +
27998     +%tmsort(data=, out=, by=);
27999     +
28000     +data=      - name of input data set (outtree data set from PROC CLUSTER)
28001     +out=       - name of the output data set
28002     +by=        - by statement
28003     +options=   - proc options
28004     +*/
28005     +
28006     +%macro tmsort(data=, out=, by=, options=, threads=THREADS);
28007     +  %if %BQUOTE(&out) ^= %then %let out = out =  &out;
28008     +  %if &SYSVER < 9 %then %let threads = ;
28009     +
28010     +  proc sort data = %STR(&data) &threads &options
28011     +    &out;
28012     +    by &by;
28013     +  run;
28014     +
28015     +%mend tmsort;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TM_GETHIERTERMS):   filename temp;
NOTE: Fileref TEMP을(를) 삭제했습니다.
MPRINT(TM_GETHIERTERMS):   data _terms_;
MPRINT(TM_GETHIERTERMS):   set EMWS5.TextFilter2_terms;
MPRINT(TM_GETHIERTERMS):   by key _ispar;
MPRINT(TM_GETHIERTERMS):   if first.key then output;
MPRINT(TM_GETHIERTERMS):   else;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 2346개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_TERMS_DATA.에서 읽었습니다.
      WHERE KEEP='Y';
NOTE: 2037개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_TERM_STRINGS.에서 읽었습니다.
NOTE: 2346개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_TERMS.에서 읽었습니다.
NOTE: 데이터셋 WORK._TERMS_은(는) 2036개의 관측값과 13개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.09 초
      cpu 시간            0.09 초
      

MPRINT(TM_GETHIERTERMS):   data _terms_;
MPRINT(TM_GETHIERTERMS):   set _terms_;
MPRINT(TM_GETHIERTERMS):   if _ispar='+' then Term=_ispar || ' ' || term;
MPRINT(TM_GETHIERTERMS):   run;
NOTE: 2036개의 관측값을 데이터셋 WORK._TERMS_.에서 읽었습니다.
NOTE: 데이터셋 WORK._TERMS_은(는) 2036개의 관측값과 13개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMSORT):   proc sort data = EMWS5.TextFilter2_tmout threads out = _tmout_;
MPRINT(TMSORT):   by _termnum_;
MPRINT(TMSORT):   run;

NOTE: 5643개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_TMOUT.에서 읽었습니다.
NOTE: 데이터셋 WORK._TMOUT_은(는) 5643개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.04 초
      

MPRINT(TM_GETHIERTERMS):  ;
MPRINT(TM_GETHIERTERMS):   data _tmout_;
MPRINT(TM_GETHIERTERMS):   merge _tmout_ (in=_A_) _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
MPRINT(TM_GETHIERTERMS):   by _termnum_;
MPRINT(TM_GETHIERTERMS):   if _A_;
MPRINT(TM_GETHIERTERMS):   run;
NOTE: 5643개의 관측값을 데이터셋 WORK._TMOUT_.에서 읽었습니다.
NOTE: 2036개의 관측값을 데이터셋 WORK._TERMS_.에서 읽었습니다.
NOTE: 데이터셋 WORK._TMOUT_은(는) 5643개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):   data EMWS5.TextCluster2_hierds;
MPRINT(TM_GETHIERTERMS):   set EMWS5.TextCluster2_hierds (drop=clus_desc);
MPRINT(TM_GETHIERTERMS):   length clus_desc $2000;
MPRINT(TM_GETHIERTERMS):   clus_desc="";
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 17개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER2_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER2_HIERDS은(는) 17개의 관측값과 6개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):   data _hierds;
MPRINT(TM_GETHIERTERMS):   set EMWS5.TextCluster2_hierds;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 17개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER2_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 WORK._HIERDS은(는) 17개의 관측값과 6개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   select max(level) into :level from _hierds;
MPRINT(TM_GETHIERTERMS):   create table _ancestors as select _cluster_, parent, parent as ancestor, parent as newclus from _hierds;
NOTE: Table WORK._ANCESTORS created, with 17 rows and 4 columns.

MPRINT(TM_GETHIERTERMS):   create table _hierds as select a.*, newclus from _hierds a, _ancestors b where a._cluster_=b._cluster_;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table WORK._HIERDS created, with 17 rows and 7 columns.

MPRINT(TM_GETHIERTERMS):   alter table _ancestors add tlevel int;
NOTE: Table WORK._ANCESTORS has been modified, with 5 columns.
MPRINT(TM_GETHIERTERMS):   update _ancestors set tlevel=(select level from EMWS5.TextCluster2_hierds a where a._cluster_=ancestor);
NOTE: 17 rows were updated in WORK._ANCESTORS.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.09 초
      cpu 시간            0.09 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   create table _ancestors2 as select a._cluster_, a.parent, b.parent as ancestor, b.parent as newcluster, (select level from EMWS5.TextCluster2_hierds c where c._cluster_=b.parent) as tlevel from _hierds a, _hierds b where 
a.newclus=b._cluster_;
NOTE: Table WORK._ANCESTORS2 created, with 16 rows and 5 columns.

MPRINT(TM_GETHIERTERMS):   select count(*) into :nottop from _ancestors2;
MPRINT(TM_GETHIERTERMS):   create table _hierds as select a._cluster_, a.parent, b.newcluster as newclus, level from _hierds a left join _ancestors2 b on a._cluster_=b._cluster_;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table WORK._HIERDS created, with 17 rows and 4 columns.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.08 초
      cpu 시간            0.09 초
      

MPRINT(TM_GETHIERTERMS):   data _ancestors (drop=newclus newcluster parent);
MPRINT(TM_GETHIERTERMS):   set _ancestors _ancestors2;
MPRINT(TM_GETHIERTERMS):   if ancestor ne .;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 17개의 관측값을 데이터셋 WORK._ANCESTORS.에서 읽었습니다.
NOTE: 16개의 관측값을 데이터셋 WORK._ANCESTORS2.에서 읽었습니다.
NOTE: 데이터셋 WORK._ANCESTORS은(는) 30개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   create table _ancestors2 as select a._cluster_, a.parent, b.parent as ancestor, b.parent as newcluster, (select level from EMWS5.TextCluster2_hierds c where c._cluster_=b.parent) as tlevel from _hierds a, _hierds b where 
a.newclus=b._cluster_;
NOTE: Table WORK._ANCESTORS2 created, with 14 rows and 5 columns.

MPRINT(TM_GETHIERTERMS):   select count(*) into :nottop from _ancestors2;
MPRINT(TM_GETHIERTERMS):   create table _hierds as select a._cluster_, a.parent, b.newcluster as newclus, level from _hierds a left join _ancestors2 b on a._cluster_=b._cluster_;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table WORK._HIERDS created, with 17 rows and 4 columns.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.06 초
      

MPRINT(TM_GETHIERTERMS):   data _ancestors (drop=newclus newcluster parent);
MPRINT(TM_GETHIERTERMS):   set _ancestors _ancestors2;
MPRINT(TM_GETHIERTERMS):   if ancestor ne .;
MPRINT(TM_GETHIERTERMS):   run;

WARNING: DROP, KEEP 또는 RENAME의 변수 newclus은(는) 참조되지 않습니다.
NOTE: 30개의 관측값을 데이터셋 WORK._ANCESTORS.에서 읽었습니다.
NOTE: 14개의 관측값을 데이터셋 WORK._ANCESTORS2.에서 읽었습니다.
NOTE: 데이터셋 WORK._ANCESTORS은(는) 40개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.00 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   create table _ancestors2 as select a._cluster_, a.parent, b.parent as ancestor, b.parent as newcluster, (select level from EMWS5.TextCluster2_hierds c where c._cluster_=b.parent) as tlevel from _hierds a, _hierds b where 
a.newclus=b._cluster_;
NOTE: Table WORK._ANCESTORS2 created, with 10 rows and 5 columns.

MPRINT(TM_GETHIERTERMS):   select count(*) into :nottop from _ancestors2;
MPRINT(TM_GETHIERTERMS):   create table _hierds as select a._cluster_, a.parent, b.newcluster as newclus, level from _hierds a left join _ancestors2 b on a._cluster_=b._cluster_;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table WORK._HIERDS created, with 17 rows and 4 columns.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.07 초
      cpu 시간            0.07 초
      

MPRINT(TM_GETHIERTERMS):   data _ancestors (drop=newclus newcluster parent);
MPRINT(TM_GETHIERTERMS):   set _ancestors _ancestors2;
MPRINT(TM_GETHIERTERMS):   if ancestor ne .;
MPRINT(TM_GETHIERTERMS):   run;

WARNING: DROP, KEEP 또는 RENAME의 변수 newclus은(는) 참조되지 않습니다.
NOTE: 40개의 관측값을 데이터셋 WORK._ANCESTORS.에서 읽었습니다.
NOTE: 10개의 관측값을 데이터셋 WORK._ANCESTORS2.에서 읽었습니다.
NOTE: 데이터셋 WORK._ANCESTORS은(는) 44개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   create table _ancestors2 as select a._cluster_, a.parent, b.parent as ancestor, b.parent as newcluster, (select level from EMWS5.TextCluster2_hierds c where c._cluster_=b.parent) as tlevel from _hierds a, _hierds b where 
a.newclus=b._cluster_;
NOTE: Table WORK._ANCESTORS2 created, with 4 rows and 5 columns.

MPRINT(TM_GETHIERTERMS):   select count(*) into :nottop from _ancestors2;
MPRINT(TM_GETHIERTERMS):   create table _hierds as select a._cluster_, a.parent, b.newcluster as newclus, level from _hierds a left join _ancestors2 b on a._cluster_=b._cluster_;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table WORK._HIERDS created, with 17 rows and 4 columns.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.07 초
      cpu 시간            0.07 초
      

MPRINT(TM_GETHIERTERMS):   data _ancestors (drop=newclus newcluster parent);
MPRINT(TM_GETHIERTERMS):   set _ancestors _ancestors2;
MPRINT(TM_GETHIERTERMS):   if ancestor ne .;
MPRINT(TM_GETHIERTERMS):   run;

WARNING: DROP, KEEP 또는 RENAME의 변수 newclus은(는) 참조되지 않습니다.
NOTE: 44개의 관측값을 데이터셋 WORK._ANCESTORS.에서 읽었습니다.
NOTE: 4개의 관측값을 데이터셋 WORK._ANCESTORS2.에서 읽었습니다.
NOTE: 데이터셋 WORK._ANCESTORS은(는) 46개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   create table _ancestors2 as select a._cluster_, a.parent, b.parent as ancestor, b.parent as newcluster, (select level from EMWS5.TextCluster2_hierds c where c._cluster_=b.parent) as tlevel from _hierds a, _hierds b where 
a.newclus=b._cluster_;
NOTE: Table WORK._ANCESTORS2 created, with 2 rows and 5 columns.

MPRINT(TM_GETHIERTERMS):   select count(*) into :nottop from _ancestors2;
MPRINT(TM_GETHIERTERMS):   create table _hierds as select a._cluster_, a.parent, b.newcluster as newclus, level from _hierds a left join _ancestors2 b on a._cluster_=b._cluster_;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table WORK._HIERDS created, with 17 rows and 4 columns.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.04 초
      

MPRINT(TM_GETHIERTERMS):   data _ancestors (drop=newclus newcluster parent);
MPRINT(TM_GETHIERTERMS):   set _ancestors _ancestors2;
MPRINT(TM_GETHIERTERMS):   if ancestor ne .;
MPRINT(TM_GETHIERTERMS):   run;

WARNING: DROP, KEEP 또는 RENAME의 변수 newclus은(는) 참조되지 않습니다.
NOTE: 46개의 관측값을 데이터셋 WORK._ANCESTORS.에서 읽었습니다.
NOTE: 2개의 관측값을 데이터셋 WORK._ANCESTORS2.에서 읽었습니다.
NOTE: 데이터셋 WORK._ANCESTORS은(는) 46개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   create table _ancestors2 as select a._cluster_, a.parent, b.parent as ancestor, b.parent as newcluster, (select level from EMWS5.TextCluster2_hierds c where c._cluster_=b.parent) as tlevel from _hierds a, _hierds b where 
a.newclus=b._cluster_;
NOTE: Table WORK._ANCESTORS2 created, with 0 rows and 5 columns.

MPRINT(TM_GETHIERTERMS):   select count(*) into :nottop from _ancestors2;
MPRINT(TM_GETHIERTERMS):   create table _hierds as select a._cluster_, a.parent, b.newcluster as newclus, level from _hierds a left join _ancestors2 b on a._cluster_=b._cluster_;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table WORK._HIERDS created, with 17 rows and 4 columns.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.09 초
      cpu 시간            0.09 초
      

MPRINT(TM_GETHIERTERMS):   data _ancestors (drop=newclus newcluster parent);
MPRINT(TM_GETHIERTERMS):   set _ancestors _ancestors2;
MPRINT(TM_GETHIERTERMS):   if ancestor ne .;
MPRINT(TM_GETHIERTERMS):   run;

WARNING: DROP, KEEP 또는 RENAME의 변수 newclus은(는) 참조되지 않습니다.
NOTE: 46개의 관측값을 데이터셋 WORK._ANCESTORS.에서 읽었습니다.
NOTE: 0개의 관측값을 데이터셋 WORK._ANCESTORS2.에서 읽었습니다.
NOTE: 데이터셋 WORK._ANCESTORS은(는) 46개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   insert into _ancestors(_cluster_, ancestor, tlevel) select _cluster_, _cluster_, level from EMWS5.TextCluster2_hierds where freq ne .;
NOTE: 9 rows were inserted into WORK._ANCESTORS.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):   proc sort data=_ancestors;
MPRINT(TM_GETHIERTERMS):   by ancestor;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 55개의 관측값을 데이터셋 WORK._ANCESTORS.에서 읽었습니다.
NOTE: 데이터셋 WORK._ANCESTORS은(는) 55개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):   data _docs_ ;
MPRINT(TM_GETHIERTERMS):   set _docdata;
MPRINT(TM_GETHIERTERMS):   _SEGMNT_=.;
MPRINT(TM_GETHIERTERMS):   ancestor=.;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 499개의 관측값을 데이터셋 WORK._DOCDATA.에서 읽었습니다.
NOTE: 데이터셋 WORK._DOCS_은(는) 499개의 관측값과 51개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   create table _level as select _cluster_ as clust from EMWS5.TextCluster2_hierds where level= 6;
NOTE: Table WORK._LEVEL created, with 2 rows and 1 columns.

MPRINT(TM_GETHIERTERMS):   select count(*) into :nclus from _level;
MPRINT(TM_GETHIERTERMS):   update _docs_ set ancestor=(select ancestor from _ancestors where _cluster_=cluster and tlevel= 6);
NOTE: 499 rows were updated in WORK._DOCS_.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.10 초
      cpu 시간            0.11 초
      

MPRINT(TM_GETHIERTERMS):   data _level;
MPRINT(TM_GETHIERTERMS):   set _level;
MPRINT(TM_GETHIERTERMS):   segmnt=_n_;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 2개의 관측값을 데이터셋 WORK._LEVEL.에서 읽었습니다.
NOTE: 데이터셋 WORK._LEVEL은(는) 2개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   update _docs_ set _SEGMNT_=(select segmnt from _level where clust=ancestor) where ancestor in (select clust from _level);
NOTE: 120 rows were updated in WORK._DOCS_.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TM_GETHIERTERMS):   data _docs_;
MPRINT(TM_GETHIERTERMS):   set _docs_(rename=(cluster=_CLUSTER_));
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 499개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 데이터셋 WORK._DOCS_은(는) 499개의 관측값과 51개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create view _CMB as select t1.*, t2._segmnt_ as cluster from _tmout_ t1, _docs_ t2 where t1._document_ = t2._document_ ;
NOTE: SQL view WORK._CMB has been defined.
MPRINT(TMTERM1):   quit ;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc summary data=_CMB nway ;
MPRINT(TMTERM1):   class cluster _term_ ;
MPRINT(TMTERM1):   var _count_ ;
MPRINT(TMTERM1):   output out=_TFREQ sum=total ;
MPRINT(TMTERM1):   run ;

NOTE: 5643개의 관측값을 데이터셋 WORK._TMOUT_.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 5643개의 관측값을 데이터셋 WORK._CMB.에서 읽었습니다.
NOTE: 데이터셋 WORK._TFREQ은(는) 796개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.06 초
      

MPRINT(TMTERM1):   proc summary data=_CMB( keep= cluster _document_ ) ;
MPRINT(TMTERM1):   class cluster ;
MPRINT(TMTERM1):   var _document_ ;
MPRINT(TMTERM1):   output out=_SUM n=n ;
MPRINT(TMTERM1):   run ;

NOTE: 5643개의 관측값을 데이터셋 WORK._TMOUT_.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 5643개의 관측값을 데이터셋 WORK._CMB.에서 읽었습니다.
NOTE: 데이터셋 WORK._SUM은(는) 3개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):   data _null_ ;
MPRINT(TMTERM1):   set _SUM ;
MPRINT(TMTERM1):   if _type_ = 1 then call symput( 'CLUSIZE' || left( put( cluster, best. )), put( _freq_, best. ));
MPRINT(TMTERM1):   else if _type_ = 0 then call symput( 'CLUSALL', put( _freq_, best. )) ;
MPRINT(TMTERM1):   run ;

NOTE: 3개의 관측값을 데이터셋 WORK._SUM.에서 읽었습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _SUM;
NOTE: 테이블 WORK._SUM 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TMSORT):   proc sort data = _TFREQ THREADS out = _TFREQ;
MPRINT(TMSORT):   by cluster descending _freq_;
MPRINT(TMSORT):   run;

NOTE: 796개의 관측값을 데이터셋 WORK._TFREQ.에서 읽었습니다.
NOTE: 데이터셋 WORK._TFREQ은(는) 796개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _UNQT( keep= _term_ _freq_ cluster ) ;
MPRINT(TMTERM1):   set _TFREQ ;
MPRINT(TMTERM1):   by cluster ;
MPRINT(TMTERM1):   if first.cluster then n_term = 0 ;
MPRINT(TMTERM1):   n_term + 1 ;
MPRINT(TMTERM1):   if n_term le 30 ;
MPRINT(TMTERM1):   run ;

NOTE: 796개의 관측값을 데이터셋 WORK._TFREQ.에서 읽었습니다.
NOTE: 데이터셋 WORK._UNQT은(는) 60개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMSORT):   proc sort data = _UNQT THREADS nodupkey out = _UNQT( keep= _term_ );
MPRINT(TMSORT):   by _term_;
MPRINT(TMSORT):   run;

NOTE: 60개의 관측값을 데이터셋 WORK._UNQT.에서 읽었습니다.
NOTE: 중복 키값을 가지고 있는 18개의 관측값이 삭제되었습니다.
NOTE: 데이터셋 WORK._UNQT은(는) 42개의 관측값과 1개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create table _CLCDF as select distinct cluster, _term_, _freq_ from _TFREQ where _term_ in ( select _term_ from _UNQT ) order by _term_, cluster ;
NOTE: Table WORK._CLCDF created, with 80 rows and 3 columns.

MPRINT(TMTERM1):   quit ;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _UNQT;
NOTE: 테이블 WORK._UNQT 을(를) 삭제했습니다.
MPRINT(TMTERM1):   drop table _TFREQ;
NOTE: 테이블 WORK._TFREQ 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMTERM1):   proc transpose data=_CLCDF out=_CLCDF prefix=clus ;
MPRINT(TMTERM1):   by _term_ ;
MPRINT(TMTERM1):   var _freq_ ;
MPRINT(TMTERM1):   id cluster;
MPRINT(TMTERM1):   run ;

NOTE: 80개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDF은(는) 42개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 TRANSPOSE 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   data _CLCDF ;
MPRINT(TMTERM1):   length _term_ $100;
MPRINT(TMTERM1):   array a_clus ( 2 ) 4 clus1 - clus2 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   do _i_ = 1 to 2 ;
MPRINT(TMTERM1):   if a_clus( _i_ ) = . then a_clus( _i_ ) = 0 ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   sumfreq = sum( of clus1 - clus2 ) ;
MPRINT(TMTERM1):   if (clus1 = 0) or (clus1 < 0) then cdf1 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus1 ;
MPRINT(TMTERM1):   div = 1473 - 806;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf1 = CDF( 'binomial', clus1 , propor , 806 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf1 = 1;
MPRINT(TMTERM1):   else cdf1 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus2 = 0) or (clus2 < 0) then cdf2 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus2 ;
MPRINT(TMTERM1):   div = 1473 - 667;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf2 = CDF( 'binomial', clus2 , propor , 667 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf2 = 1;
MPRINT(TMTERM1):   else cdf2 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   saveplus=0;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),'+')=1 then do;
MPRINT(TMTERM1):   saveplus=1;
MPRINT(TMTERM1):   _term_ = ksubstr(kleft(ktrim(_term_)),3);
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),' ')>0 then _term_ = "'"||kleft(ktrim(_term_)) || "'  ";
MPRINT(TMTERM1):   else _term_ = kleft(ktrim(_term_)) || ' ';
MPRINT(TMTERM1):   if saveplus=1 then do;
MPRINT(TMTERM1):   _term_='+'||kleft(ktrim(_term_));
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   drop _i_ propor sumfreq div num saveplus;
MPRINT(TMTERM1):   run ;

NOTE: 42개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDF은(는) 42개의 관측값과 6개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   data _CLCDFTR ;
MPRINT(TMTERM1):   array a_cdf ( 2 ) cdf1 - cdf2 ;
MPRINT(TMTERM1):   array a_count ( 2 ) clus1 - clus2 ;
MPRINT(TMTERM1):   length clus 4 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   keep _term_ cdf clus doc_count;
MPRINT(TMTERM1):   do clus = 1 to 2 ;
MPRINT(TMTERM1):   cdf = a_cdf( clus ) ;
MPRINT(TMTERM1):   doc_count = a_count( clus ) ;
MPRINT(TMTERM1):   if cdf > 0 then output ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   run ;

NOTE: 42개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDFTR은(는) 80개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDF;
NOTE: 테이블 WORK._CLCDF 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TMSORT):   proc sort data = _CLCDFTR THREADS out = _CLCDFTR;
MPRINT(TMSORT):   by clus descending cdf descending doc_count _term_;
MPRINT(TMSORT):   run;

NOTE: 80개의 관측값을 데이터셋 WORK._CLCDFTR.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDFTR은(는) 80개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _desc_;
MPRINT(TMTERM1):   set _CLCDFTR (rename=(clus=cluster));
MPRINT(TMTERM1):   format clus_desc $450.;
MPRINT(TMTERM1):   retain oldclus 0 clus_desc '' count 0;
MPRINT(TMTERM1):   keep _CLUSTER_ clus_desc ;
MPRINT(TMTERM1):   if _N_ = 1 then do;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   count = 1;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (count <= 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 1) then clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   else clus_desc = kleft(trim(clus_desc)) || "  " || kleft(trim(_term_));
MPRINT(TMTERM1):   count = count + 1;
MPRINT(TMTERM1):   if (_N_ = 80) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if (count > 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 80) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   count = 2;
MPRINT(TMTERM1):   clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   if (_N_ = 80) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   run;

NOTE: 80개의 관측값을 데이터셋 WORK._CLCDFTR.에서 읽었습니다.
NOTE: 데이터셋 WORK._DESC_은(는) 2개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDFTR;
NOTE: 테이블 WORK._CLCDFTR 을(를) 삭제했습니다.
MPRINT(TMTERM1):   drop view _CMB;
NOTE: View WORK._CMB 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):  ;
MPRINT(TM_GETHIERTERMS):   data _desc_(rename=(_CLUSTER_=clus));
MPRINT(TM_GETHIERTERMS):   set _desc_;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 2개의 관측값을 데이터셋 WORK._DESC_.에서 읽었습니다.
NOTE: 데이터셋 WORK._DESC_은(는) 2개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   update EMWS5.TextCluster2_hierds set clus_desc=(select clus_desc from _desc_ where clus=(select segmnt from _level where clust=_cluster_)) where _cluster_ in (select clust from _level);
NOTE: 2 rows were updated in EMWS5.TEXTCLUSTER2_HIERDS.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TM_GETHIERTERMS):   data _docs_ ;
MPRINT(TM_GETHIERTERMS):   set _docdata;
MPRINT(TM_GETHIERTERMS):   _SEGMNT_=.;
MPRINT(TM_GETHIERTERMS):   ancestor=.;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 499개의 관측값을 데이터셋 WORK._DOCDATA.에서 읽었습니다.
NOTE: 데이터셋 WORK._DOCS_은(는) 499개의 관측값과 51개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   create table _level as select _cluster_ as clust from EMWS5.TextCluster2_hierds where level=5;
NOTE: Table WORK._LEVEL created, with 2 rows and 1 columns.

MPRINT(TM_GETHIERTERMS):   select count(*) into :nclus from _level;
MPRINT(TM_GETHIERTERMS):   update _docs_ set ancestor=(select ancestor from _ancestors where _cluster_=cluster and tlevel=5);
NOTE: 499 rows were updated in WORK._DOCS_.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.11 초
      cpu 시간            0.10 초
      

MPRINT(TM_GETHIERTERMS):   data _level;
MPRINT(TM_GETHIERTERMS):   set _level;
MPRINT(TM_GETHIERTERMS):   segmnt=_n_;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 2개의 관측값을 데이터셋 WORK._LEVEL.에서 읽었습니다.
NOTE: 데이터셋 WORK._LEVEL은(는) 2개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.03 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   update _docs_ set _SEGMNT_=(select segmnt from _level where clust=ancestor) where ancestor in (select clust from _level);
NOTE: 177 rows were updated in WORK._DOCS_.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.03 초
      

MPRINT(TM_GETHIERTERMS):   data _docs_;
MPRINT(TM_GETHIERTERMS):   set _docs_(rename=(cluster=_CLUSTER_));
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 499개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 데이터셋 WORK._DOCS_은(는) 499개의 관측값과 51개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.00 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create view _CMB as select t1.*, t2._segmnt_ as cluster from _tmout_ t1, _docs_ t2 where t1._document_ = t2._document_ ;
NOTE: SQL view WORK._CMB has been defined.
MPRINT(TMTERM1):   quit ;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc summary data=_CMB nway ;
MPRINT(TMTERM1):   class cluster _term_ ;
MPRINT(TMTERM1):   var _count_ ;
MPRINT(TMTERM1):   output out=_TFREQ sum=total ;
MPRINT(TMTERM1):   run ;

NOTE: 5643개의 관측값을 데이터셋 WORK._TMOUT_.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 5643개의 관측값을 데이터셋 WORK._CMB.에서 읽었습니다.
NOTE: 데이터셋 WORK._TFREQ은(는) 942개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.06 초
      

MPRINT(TMTERM1):   proc summary data=_CMB( keep= cluster _document_ ) ;
MPRINT(TMTERM1):   class cluster ;
MPRINT(TMTERM1):   var _document_ ;
MPRINT(TMTERM1):   output out=_SUM n=n ;
MPRINT(TMTERM1):   run ;

NOTE: 5643개의 관측값을 데이터셋 WORK._TMOUT_.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 5643개의 관측값을 데이터셋 WORK._CMB.에서 읽었습니다.
NOTE: 데이터셋 WORK._SUM은(는) 3개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.06 초
      

MPRINT(TMTERM1):   data _null_ ;
MPRINT(TMTERM1):   set _SUM ;
MPRINT(TMTERM1):   if _type_ = 1 then call symput( 'CLUSIZE' || left( put( cluster, best. )), put( _freq_, best. ));
MPRINT(TMTERM1):   else if _type_ = 0 then call symput( 'CLUSALL', put( _freq_, best. )) ;
MPRINT(TMTERM1):   run ;

NOTE: 3개의 관측값을 데이터셋 WORK._SUM.에서 읽었습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _SUM;
NOTE: 테이블 WORK._SUM 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMSORT):   proc sort data = _TFREQ THREADS out = _TFREQ;
MPRINT(TMSORT):   by cluster descending _freq_;
MPRINT(TMSORT):   run;

NOTE: 942개의 관측값을 데이터셋 WORK._TFREQ.에서 읽었습니다.
NOTE: 데이터셋 WORK._TFREQ은(는) 942개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _UNQT( keep= _term_ _freq_ cluster ) ;
MPRINT(TMTERM1):   set _TFREQ ;
MPRINT(TMTERM1):   by cluster ;
MPRINT(TMTERM1):   if first.cluster then n_term = 0 ;
MPRINT(TMTERM1):   n_term + 1 ;
MPRINT(TMTERM1):   if n_term le 30 ;
MPRINT(TMTERM1):   run ;

NOTE: 942개의 관측값을 데이터셋 WORK._TFREQ.에서 읽었습니다.
NOTE: 데이터셋 WORK._UNQT은(는) 60개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMSORT):   proc sort data = _UNQT THREADS nodupkey out = _UNQT( keep= _term_ );
MPRINT(TMSORT):   by _term_;
MPRINT(TMSORT):   run;

NOTE: 60개의 관측값을 데이터셋 WORK._UNQT.에서 읽었습니다.
NOTE: 중복 키값을 가지고 있는 18개의 관측값이 삭제되었습니다.
NOTE: 데이터셋 WORK._UNQT은(는) 42개의 관측값과 1개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create table _CLCDF as select distinct cluster, _term_, _freq_ from _TFREQ where _term_ in ( select _term_ from _UNQT ) order by _term_, cluster ;
NOTE: Table WORK._CLCDF created, with 74 rows and 3 columns.

MPRINT(TMTERM1):   quit ;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _UNQT;
NOTE: 테이블 WORK._UNQT 을(를) 삭제했습니다.
MPRINT(TMTERM1):   drop table _TFREQ;
NOTE: 테이블 WORK._TFREQ 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc transpose data=_CLCDF out=_CLCDF prefix=clus ;
MPRINT(TMTERM1):   by _term_ ;
MPRINT(TMTERM1):   var _freq_ ;
MPRINT(TMTERM1):   id cluster;
MPRINT(TMTERM1):   run ;

NOTE: 74개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDF은(는) 42개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 TRANSPOSE 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   data _CLCDF ;
MPRINT(TMTERM1):   length _term_ $100;
MPRINT(TMTERM1):   array a_clus ( 2 ) 4 clus1 - clus2 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   do _i_ = 1 to 2 ;
MPRINT(TMTERM1):   if a_clus( _i_ ) = . then a_clus( _i_ ) = 0 ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   sumfreq = sum( of clus1 - clus2 ) ;
MPRINT(TMTERM1):   if (clus1 = 0) or (clus1 < 0) then cdf1 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus1 ;
MPRINT(TMTERM1):   div = 2002 - 1473;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf1 = CDF( 'binomial', clus1 , propor , 1473 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf1 = 1;
MPRINT(TMTERM1):   else cdf1 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus2 = 0) or (clus2 < 0) then cdf2 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus2 ;
MPRINT(TMTERM1):   div = 2002 - 529;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf2 = CDF( 'binomial', clus2 , propor , 529 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf2 = 1;
MPRINT(TMTERM1):   else cdf2 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   saveplus=0;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),'+')=1 then do;
MPRINT(TMTERM1):   saveplus=1;
MPRINT(TMTERM1):   _term_ = ksubstr(kleft(ktrim(_term_)),3);
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),' ')>0 then _term_ = "'"||kleft(ktrim(_term_)) || "'  ";
MPRINT(TMTERM1):   else _term_ = kleft(ktrim(_term_)) || ' ';
MPRINT(TMTERM1):   if saveplus=1 then do;
MPRINT(TMTERM1):   _term_='+'||kleft(ktrim(_term_));
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   drop _i_ propor sumfreq div num saveplus;
MPRINT(TMTERM1):   run ;

NOTE: 42개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDF은(는) 42개의 관측값과 6개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   data _CLCDFTR ;
MPRINT(TMTERM1):   array a_cdf ( 2 ) cdf1 - cdf2 ;
MPRINT(TMTERM1):   array a_count ( 2 ) clus1 - clus2 ;
MPRINT(TMTERM1):   length clus 4 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   keep _term_ cdf clus doc_count;
MPRINT(TMTERM1):   do clus = 1 to 2 ;
MPRINT(TMTERM1):   cdf = a_cdf( clus ) ;
MPRINT(TMTERM1):   doc_count = a_count( clus ) ;
MPRINT(TMTERM1):   if cdf > 0 then output ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   run ;

NOTE: 42개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDFTR은(는) 74개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDF;
NOTE: 테이블 WORK._CLCDF 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TMSORT):   proc sort data = _CLCDFTR THREADS out = _CLCDFTR;
MPRINT(TMSORT):   by clus descending cdf descending doc_count _term_;
MPRINT(TMSORT):   run;

NOTE: 74개의 관측값을 데이터셋 WORK._CLCDFTR.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDFTR은(는) 74개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _desc_;
MPRINT(TMTERM1):   set _CLCDFTR (rename=(clus=cluster));
MPRINT(TMTERM1):   format clus_desc $450.;
MPRINT(TMTERM1):   retain oldclus 0 clus_desc '' count 0;
MPRINT(TMTERM1):   keep _CLUSTER_ clus_desc ;
MPRINT(TMTERM1):   if _N_ = 1 then do;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   count = 1;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (count <= 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 1) then clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   else clus_desc = kleft(trim(clus_desc)) || "  " || kleft(trim(_term_));
MPRINT(TMTERM1):   count = count + 1;
MPRINT(TMTERM1):   if (_N_ = 74) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if (count > 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 74) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   count = 2;
MPRINT(TMTERM1):   clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   if (_N_ = 74) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   run;

NOTE: 74개의 관측값을 데이터셋 WORK._CLCDFTR.에서 읽었습니다.
NOTE: 데이터셋 WORK._DESC_은(는) 2개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDFTR;
NOTE: 테이블 WORK._CLCDFTR 을(를) 삭제했습니다.
MPRINT(TMTERM1):   drop view _CMB;
NOTE: View WORK._CMB 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):  ;
MPRINT(TM_GETHIERTERMS):   data _desc_(rename=(_CLUSTER_=clus));
MPRINT(TM_GETHIERTERMS):   set _desc_;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 2개의 관측값을 데이터셋 WORK._DESC_.에서 읽었습니다.
NOTE: 데이터셋 WORK._DESC_은(는) 2개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   update EMWS5.TextCluster2_hierds set clus_desc=(select clus_desc from _desc_ where clus=(select segmnt from _level where clust=_cluster_)) where _cluster_ in (select clust from _level);
NOTE: 2 rows were updated in EMWS5.TEXTCLUSTER2_HIERDS.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TM_GETHIERTERMS):   data _docs_ ;
MPRINT(TM_GETHIERTERMS):   set _docdata;
MPRINT(TM_GETHIERTERMS):   _SEGMNT_=.;
MPRINT(TM_GETHIERTERMS):   ancestor=.;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 499개의 관측값을 데이터셋 WORK._DOCDATA.에서 읽었습니다.
NOTE: 데이터셋 WORK._DOCS_은(는) 499개의 관측값과 51개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   create table _level as select _cluster_ as clust from EMWS5.TextCluster2_hierds where level=4;
NOTE: Table WORK._LEVEL created, with 6 rows and 1 columns.

MPRINT(TM_GETHIERTERMS):   select count(*) into :nclus from _level;
MPRINT(TM_GETHIERTERMS):   update _docs_ set ancestor=(select ancestor from _ancestors where _cluster_=cluster and tlevel=4);
NOTE: 499 rows were updated in WORK._DOCS_.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.04 초
      

MPRINT(TM_GETHIERTERMS):   data _level;
MPRINT(TM_GETHIERTERMS):   set _level;
MPRINT(TM_GETHIERTERMS):   segmnt=_n_;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 6개의 관측값을 데이터셋 WORK._LEVEL.에서 읽었습니다.
NOTE: 데이터셋 WORK._LEVEL은(는) 6개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.03 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   update _docs_ set _SEGMNT_=(select segmnt from _level where clust=ancestor) where ancestor in (select clust from _level);
NOTE: 442 rows were updated in WORK._DOCS_.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TM_GETHIERTERMS):   data _docs_;
MPRINT(TM_GETHIERTERMS):   set _docs_(rename=(cluster=_CLUSTER_));
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 499개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 데이터셋 WORK._DOCS_은(는) 499개의 관측값과 51개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create view _CMB as select t1.*, t2._segmnt_ as cluster from _tmout_ t1, _docs_ t2 where t1._document_ = t2._document_ ;
NOTE: SQL view WORK._CMB has been defined.
MPRINT(TMTERM1):   quit ;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc summary data=_CMB nway ;
MPRINT(TMTERM1):   class cluster _term_ ;
MPRINT(TMTERM1):   var _count_ ;
MPRINT(TMTERM1):   output out=_TFREQ sum=total ;
MPRINT(TMTERM1):   run ;

NOTE: 5643개의 관측값을 데이터셋 WORK._TMOUT_.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 5643개의 관측값을 데이터셋 WORK._CMB.에서 읽었습니다.
NOTE: 데이터셋 WORK._TFREQ은(는) 2399개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):   proc summary data=_CMB( keep= cluster _document_ ) ;
MPRINT(TMTERM1):   class cluster ;
MPRINT(TMTERM1):   var _document_ ;
MPRINT(TMTERM1):   output out=_SUM n=n ;
MPRINT(TMTERM1):   run ;

NOTE: 5643개의 관측값을 데이터셋 WORK._TMOUT_.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 5643개의 관측값을 데이터셋 WORK._CMB.에서 읽었습니다.
NOTE: 데이터셋 WORK._SUM은(는) 7개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):   data _null_ ;
MPRINT(TMTERM1):   set _SUM ;
MPRINT(TMTERM1):   if _type_ = 1 then call symput( 'CLUSIZE' || left( put( cluster, best. )), put( _freq_, best. ));
MPRINT(TMTERM1):   else if _type_ = 0 then call symput( 'CLUSALL', put( _freq_, best. )) ;
MPRINT(TMTERM1):   run ;

NOTE: 7개의 관측값을 데이터셋 WORK._SUM.에서 읽었습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _SUM;
NOTE: 테이블 WORK._SUM 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMSORT):   proc sort data = _TFREQ THREADS out = _TFREQ;
MPRINT(TMSORT):   by cluster descending _freq_;
MPRINT(TMSORT):   run;

NOTE: 2399개의 관측값을 데이터셋 WORK._TFREQ.에서 읽었습니다.
NOTE: 데이터셋 WORK._TFREQ은(는) 2399개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _UNQT( keep= _term_ _freq_ cluster ) ;
MPRINT(TMTERM1):   set _TFREQ ;
MPRINT(TMTERM1):   by cluster ;
MPRINT(TMTERM1):   if first.cluster then n_term = 0 ;
MPRINT(TMTERM1):   n_term + 1 ;
MPRINT(TMTERM1):   if n_term le 30 ;
MPRINT(TMTERM1):   run ;

NOTE: 2399개의 관측값을 데이터셋 WORK._TFREQ.에서 읽었습니다.
NOTE: 데이터셋 WORK._UNQT은(는) 180개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMSORT):   proc sort data = _UNQT THREADS nodupkey out = _UNQT( keep= _term_ );
MPRINT(TMSORT):   by _term_;
MPRINT(TMSORT):   run;

NOTE: 180개의 관측값을 데이터셋 WORK._UNQT.에서 읽었습니다.
NOTE: 중복 키값을 가지고 있는 97개의 관측값이 삭제되었습니다.
NOTE: 데이터셋 WORK._UNQT은(는) 83개의 관측값과 1개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create table _CLCDF as select distinct cluster, _term_, _freq_ from _TFREQ where _term_ in ( select _term_ from _UNQT ) order by _term_, cluster ;
NOTE: Table WORK._CLCDF created, with 360 rows and 3 columns.

MPRINT(TMTERM1):   quit ;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _UNQT;
NOTE: 테이블 WORK._UNQT 을(를) 삭제했습니다.
MPRINT(TMTERM1):   drop table _TFREQ;
NOTE: 테이블 WORK._TFREQ 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc transpose data=_CLCDF out=_CLCDF prefix=clus ;
MPRINT(TMTERM1):   by _term_ ;
MPRINT(TMTERM1):   var _freq_ ;
MPRINT(TMTERM1):   id cluster;
MPRINT(TMTERM1):   run ;

NOTE: 360개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDF은(는) 83개의 관측값과 8개의 변수를 가지고 있습니다.
NOTE: 프로시저 TRANSPOSE 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   data _CLCDF ;
MPRINT(TMTERM1):   length _term_ $100;
MPRINT(TMTERM1):   array a_clus ( 6 ) 4 clus1 - clus6 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   do _i_ = 1 to 6 ;
MPRINT(TMTERM1):   if a_clus( _i_ ) = . then a_clus( _i_ ) = 0 ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   sumfreq = sum( of clus1 - clus6 ) ;
MPRINT(TMTERM1):   if (clus1 = 0) or (clus1 < 0) then cdf1 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus1 ;
MPRINT(TMTERM1):   div = 4875 - 2002;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf1 = CDF( 'binomial', clus1 , propor , 2002 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf1 = 1;
MPRINT(TMTERM1):   else cdf1 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus2 = 0) or (clus2 < 0) then cdf2 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus2 ;
MPRINT(TMTERM1):   div = 4875 - 523;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf2 = CDF( 'binomial', clus2 , propor , 523 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf2 = 1;
MPRINT(TMTERM1):   else cdf2 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus3 = 0) or (clus3 < 0) then cdf3 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus3 ;
MPRINT(TMTERM1):   div = 4875 - 609;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf3 = CDF( 'binomial', clus3 , propor , 609 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf3 = 1;
MPRINT(TMTERM1):   else cdf3 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus4 = 0) or (clus4 < 0) then cdf4 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus4 ;
MPRINT(TMTERM1):   div = 4875 - 657;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf4 = CDF( 'binomial', clus4 , propor , 657 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf4 = 1;
MPRINT(TMTERM1):   else cdf4 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus5 = 0) or (clus5 < 0) then cdf5 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus5 ;
MPRINT(TMTERM1):   div = 4875 - 529;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf5 = CDF( 'binomial', clus5 , propor , 529 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf5 = 1;
MPRINT(TMTERM1):   else cdf5 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus6 = 0) or (clus6 < 0) then cdf6 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus6 ;
MPRINT(TMTERM1):   div = 4875 - 555;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf6 = CDF( 'binomial', clus6 , propor , 555 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf6 = 1;
MPRINT(TMTERM1):   else cdf6 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   saveplus=0;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),'+')=1 then do;
MPRINT(TMTERM1):   saveplus=1;
MPRINT(TMTERM1):   _term_ = ksubstr(kleft(ktrim(_term_)),3);
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),' ')>0 then _term_ = "'"||kleft(ktrim(_term_)) || "'  ";
MPRINT(TMTERM1):   else _term_ = kleft(ktrim(_term_)) || ' ';
MPRINT(TMTERM1):   if saveplus=1 then do;
MPRINT(TMTERM1):   _term_='+'||kleft(ktrim(_term_));
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   drop _i_ propor sumfreq div num saveplus;
MPRINT(TMTERM1):   run ;

NOTE: 83개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDF은(는) 83개의 관측값과 14개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):   data _CLCDFTR ;
MPRINT(TMTERM1):   array a_cdf ( 6 ) cdf1 - cdf6 ;
MPRINT(TMTERM1):   array a_count ( 6 ) clus1 - clus6 ;
MPRINT(TMTERM1):   length clus 4 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   keep _term_ cdf clus doc_count;
MPRINT(TMTERM1):   do clus = 1 to 6 ;
MPRINT(TMTERM1):   cdf = a_cdf( clus ) ;
MPRINT(TMTERM1):   doc_count = a_count( clus ) ;
MPRINT(TMTERM1):   if cdf > 0 then output ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   run ;

NOTE: 83개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDFTR은(는) 360개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDF;
NOTE: 테이블 WORK._CLCDF 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMSORT):   proc sort data = _CLCDFTR THREADS out = _CLCDFTR;
MPRINT(TMSORT):   by clus descending cdf descending doc_count _term_;
MPRINT(TMSORT):   run;

NOTE: 360개의 관측값을 데이터셋 WORK._CLCDFTR.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDFTR은(는) 360개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _desc_;
MPRINT(TMTERM1):   set _CLCDFTR (rename=(clus=cluster));
MPRINT(TMTERM1):   format clus_desc $450.;
MPRINT(TMTERM1):   retain oldclus 0 clus_desc '' count 0;
MPRINT(TMTERM1):   keep _CLUSTER_ clus_desc ;
MPRINT(TMTERM1):   if _N_ = 1 then do;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   count = 1;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (count <= 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 1) then clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   else clus_desc = kleft(trim(clus_desc)) || "  " || kleft(trim(_term_));
MPRINT(TMTERM1):   count = count + 1;
MPRINT(TMTERM1):   if (_N_ = 360) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if (count > 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 360) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   count = 2;
MPRINT(TMTERM1):   clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   if (_N_ = 360) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   run;

NOTE: 360개의 관측값을 데이터셋 WORK._CLCDFTR.에서 읽었습니다.
NOTE: 데이터셋 WORK._DESC_은(는) 6개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDFTR;
NOTE: 테이블 WORK._CLCDFTR 을(를) 삭제했습니다.
MPRINT(TMTERM1):   drop view _CMB;
NOTE: View WORK._CMB 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TM_GETHIERTERMS):  ;
MPRINT(TM_GETHIERTERMS):   data _desc_(rename=(_CLUSTER_=clus));
MPRINT(TM_GETHIERTERMS):   set _desc_;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 6개의 관측값을 데이터셋 WORK._DESC_.에서 읽었습니다.
NOTE: 데이터셋 WORK._DESC_은(는) 6개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   update EMWS5.TextCluster2_hierds set clus_desc=(select clus_desc from _desc_ where clus=(select segmnt from _level where clust=_cluster_)) where _cluster_ in (select clust from _level);
NOTE: 6 rows were updated in EMWS5.TEXTCLUSTER2_HIERDS.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.03 초
      

MPRINT(TM_GETHIERTERMS):   data _docs_ ;
MPRINT(TM_GETHIERTERMS):   set _docdata;
MPRINT(TM_GETHIERTERMS):   _SEGMNT_=.;
MPRINT(TM_GETHIERTERMS):   ancestor=.;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 499개의 관측값을 데이터셋 WORK._DOCDATA.에서 읽었습니다.
NOTE: 데이터셋 WORK._DOCS_은(는) 499개의 관측값과 51개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   create table _level as select _cluster_ as clust from EMWS5.TextCluster2_hierds where level=3;
NOTE: Table WORK._LEVEL created, with 4 rows and 1 columns.

MPRINT(TM_GETHIERTERMS):   select count(*) into :nclus from _level;
MPRINT(TM_GETHIERTERMS):   update _docs_ set ancestor=(select ancestor from _ancestors where _cluster_=cluster and tlevel=3);
NOTE: 499 rows were updated in WORK._DOCS_.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.04 초
      

MPRINT(TM_GETHIERTERMS):   data _level;
MPRINT(TM_GETHIERTERMS):   set _level;
MPRINT(TM_GETHIERTERMS):   segmnt=_n_;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 4개의 관측값을 데이터셋 WORK._LEVEL.에서 읽었습니다.
NOTE: 데이터셋 WORK._LEVEL은(는) 4개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   update _docs_ set _SEGMNT_=(select segmnt from _level where clust=ancestor) where ancestor in (select clust from _level);
NOTE: 499 rows were updated in WORK._DOCS_.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TM_GETHIERTERMS):   data _docs_;
MPRINT(TM_GETHIERTERMS):   set _docs_(rename=(cluster=_CLUSTER_));
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 499개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 데이터셋 WORK._DOCS_은(는) 499개의 관측값과 51개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create view _CMB as select t1.*, t2._segmnt_ as cluster from _tmout_ t1, _docs_ t2 where t1._document_ = t2._document_ ;
NOTE: SQL view WORK._CMB has been defined.
MPRINT(TMTERM1):   quit ;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc summary data=_CMB nway ;
MPRINT(TMTERM1):   class cluster _term_ ;
MPRINT(TMTERM1):   var _count_ ;
MPRINT(TMTERM1):   output out=_TFREQ sum=total ;
MPRINT(TMTERM1):   run ;

NOTE: 5643개의 관측값을 데이터셋 WORK._TMOUT_.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 5643개의 관측값을 데이터셋 WORK._CMB.에서 읽었습니다.
NOTE: 데이터셋 WORK._TFREQ은(는) 2518개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):   proc summary data=_CMB( keep= cluster _document_ ) ;
MPRINT(TMTERM1):   class cluster ;
MPRINT(TMTERM1):   var _document_ ;
MPRINT(TMTERM1):   output out=_SUM n=n ;
MPRINT(TMTERM1):   run ;

NOTE: 5643개의 관측값을 데이터셋 WORK._TMOUT_.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 5643개의 관측값을 데이터셋 WORK._CMB.에서 읽었습니다.
NOTE: 데이터셋 WORK._SUM은(는) 5개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.06 초
      

MPRINT(TMTERM1):   data _null_ ;
MPRINT(TMTERM1):   set _SUM ;
MPRINT(TMTERM1):   if _type_ = 1 then call symput( 'CLUSIZE' || left( put( cluster, best. )), put( _freq_, best. ));
MPRINT(TMTERM1):   else if _type_ = 0 then call symput( 'CLUSALL', put( _freq_, best. )) ;
MPRINT(TMTERM1):   run ;

NOTE: 5개의 관측값을 데이터셋 WORK._SUM.에서 읽었습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _SUM;
NOTE: 테이블 WORK._SUM 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TMSORT):   proc sort data = _TFREQ THREADS out = _TFREQ;
MPRINT(TMSORT):   by cluster descending _freq_;
MPRINT(TMSORT):   run;

NOTE: 2518개의 관측값을 데이터셋 WORK._TFREQ.에서 읽었습니다.
NOTE: 데이터셋 WORK._TFREQ은(는) 2518개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.07 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _UNQT( keep= _term_ _freq_ cluster ) ;
MPRINT(TMTERM1):   set _TFREQ ;
MPRINT(TMTERM1):   by cluster ;
MPRINT(TMTERM1):   if first.cluster then n_term = 0 ;
MPRINT(TMTERM1):   n_term + 1 ;
MPRINT(TMTERM1):   if n_term le 30 ;
MPRINT(TMTERM1):   run ;

NOTE: 2518개의 관측값을 데이터셋 WORK._TFREQ.에서 읽었습니다.
NOTE: 데이터셋 WORK._UNQT은(는) 120개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMSORT):   proc sort data = _UNQT THREADS nodupkey out = _UNQT( keep= _term_ );
MPRINT(TMSORT):   by _term_;
MPRINT(TMSORT):   run;

NOTE: 120개의 관측값을 데이터셋 WORK._UNQT.에서 읽었습니다.
NOTE: 중복 키값을 가지고 있는 54개의 관측값이 삭제되었습니다.
NOTE: 데이터셋 WORK._UNQT은(는) 66개의 관측값과 1개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create table _CLCDF as select distinct cluster, _term_, _freq_ from _TFREQ where _term_ in ( select _term_ from _UNQT ) order by _term_, cluster ;
NOTE: Table WORK._CLCDF created, with 243 rows and 3 columns.

MPRINT(TMTERM1):   quit ;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _UNQT;
NOTE: 테이블 WORK._UNQT 을(를) 삭제했습니다.
MPRINT(TMTERM1):   drop table _TFREQ;
NOTE: 테이블 WORK._TFREQ 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   proc transpose data=_CLCDF out=_CLCDF prefix=clus ;
MPRINT(TMTERM1):   by _term_ ;
MPRINT(TMTERM1):   var _freq_ ;
MPRINT(TMTERM1):   id cluster;
MPRINT(TMTERM1):   run ;

NOTE: 243개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDF은(는) 66개의 관측값과 6개의 변수를 가지고 있습니다.
NOTE: 프로시저 TRANSPOSE 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   data _CLCDF ;
MPRINT(TMTERM1):   length _term_ $100;
MPRINT(TMTERM1):   array a_clus ( 4 ) 4 clus1 - clus4 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   do _i_ = 1 to 4 ;
MPRINT(TMTERM1):   if a_clus( _i_ ) = . then a_clus( _i_ ) = 0 ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   sumfreq = sum( of clus1 - clus4 ) ;
MPRINT(TMTERM1):   if (clus1 = 0) or (clus1 < 0) then cdf1 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus1 ;
MPRINT(TMTERM1):   div = 5643 - 2557;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf1 = CDF( 'binomial', clus1 , propor , 2557 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf1 = 1;
MPRINT(TMTERM1):   else cdf1 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus2 = 0) or (clus2 < 0) then cdf2 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus2 ;
MPRINT(TMTERM1):   div = 5643 - 768;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf2 = CDF( 'binomial', clus2 , propor , 768 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf2 = 1;
MPRINT(TMTERM1):   else cdf2 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus3 = 0) or (clus3 < 0) then cdf3 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus3 ;
MPRINT(TMTERM1):   div = 5643 - 1266;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf3 = CDF( 'binomial', clus3 , propor , 1266 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf3 = 1;
MPRINT(TMTERM1):   else cdf3 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus4 = 0) or (clus4 < 0) then cdf4 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus4 ;
MPRINT(TMTERM1):   div = 5643 - 1052;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf4 = CDF( 'binomial', clus4 , propor , 1052 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf4 = 1;
MPRINT(TMTERM1):   else cdf4 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   saveplus=0;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),'+')=1 then do;
MPRINT(TMTERM1):   saveplus=1;
MPRINT(TMTERM1):   _term_ = ksubstr(kleft(ktrim(_term_)),3);
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),' ')>0 then _term_ = "'"||kleft(ktrim(_term_)) || "'  ";
MPRINT(TMTERM1):   else _term_ = kleft(ktrim(_term_)) || ' ';
MPRINT(TMTERM1):   if saveplus=1 then do;
MPRINT(TMTERM1):   _term_='+'||kleft(ktrim(_term_));
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   drop _i_ propor sumfreq div num saveplus;
MPRINT(TMTERM1):   run ;

NOTE: 66개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDF은(는) 66개의 관측값과 10개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   data _CLCDFTR ;
MPRINT(TMTERM1):   array a_cdf ( 4 ) cdf1 - cdf4 ;
MPRINT(TMTERM1):   array a_count ( 4 ) clus1 - clus4 ;
MPRINT(TMTERM1):   length clus 4 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   keep _term_ cdf clus doc_count;
MPRINT(TMTERM1):   do clus = 1 to 4 ;
MPRINT(TMTERM1):   cdf = a_cdf( clus ) ;
MPRINT(TMTERM1):   doc_count = a_count( clus ) ;
MPRINT(TMTERM1):   if cdf > 0 then output ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   run ;

NOTE: 66개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDFTR은(는) 243개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDF;
NOTE: 테이블 WORK._CLCDF 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMSORT):   proc sort data = _CLCDFTR THREADS out = _CLCDFTR;
MPRINT(TMSORT):   by clus descending cdf descending doc_count _term_;
MPRINT(TMSORT):   run;

NOTE: 243개의 관측값을 데이터셋 WORK._CLCDFTR.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDFTR은(는) 243개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _desc_;
MPRINT(TMTERM1):   set _CLCDFTR (rename=(clus=cluster));
MPRINT(TMTERM1):   format clus_desc $450.;
MPRINT(TMTERM1):   retain oldclus 0 clus_desc '' count 0;
MPRINT(TMTERM1):   keep _CLUSTER_ clus_desc ;
MPRINT(TMTERM1):   if _N_ = 1 then do;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   count = 1;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (count <= 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 1) then clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   else clus_desc = kleft(trim(clus_desc)) || "  " || kleft(trim(_term_));
MPRINT(TMTERM1):   count = count + 1;
MPRINT(TMTERM1):   if (_N_ = 243) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if (count > 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 243) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   count = 2;
MPRINT(TMTERM1):   clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   if (_N_ = 243) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   run;

NOTE: 243개의 관측값을 데이터셋 WORK._CLCDFTR.에서 읽었습니다.
NOTE: 데이터셋 WORK._DESC_은(는) 4개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDFTR;
NOTE: 테이블 WORK._CLCDFTR 을(를) 삭제했습니다.
MPRINT(TMTERM1):   drop view _CMB;
NOTE: View WORK._CMB 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.03 초
      

MPRINT(TM_GETHIERTERMS):  ;
MPRINT(TM_GETHIERTERMS):   data _desc_(rename=(_CLUSTER_=clus));
MPRINT(TM_GETHIERTERMS):   set _desc_;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 4개의 관측값을 데이터셋 WORK._DESC_.에서 읽었습니다.
NOTE: 데이터셋 WORK._DESC_은(는) 4개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   update EMWS5.TextCluster2_hierds set clus_desc=(select clus_desc from _desc_ where clus=(select segmnt from _level where clust=_cluster_)) where _cluster_ in (select clust from _level);
NOTE: 4 rows were updated in EMWS5.TEXTCLUSTER2_HIERDS.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.06 초
      

MPRINT(TM_GETHIERTERMS):   data _docs_ ;
MPRINT(TM_GETHIERTERMS):   set _docdata;
MPRINT(TM_GETHIERTERMS):   _SEGMNT_=.;
MPRINT(TM_GETHIERTERMS):   ancestor=.;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 499개의 관측값을 데이터셋 WORK._DOCDATA.에서 읽었습니다.
NOTE: 데이터셋 WORK._DOCS_은(는) 499개의 관측값과 51개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   create table _level as select _cluster_ as clust from EMWS5.TextCluster2_hierds where level=2;
NOTE: Table WORK._LEVEL created, with 2 rows and 1 columns.

MPRINT(TM_GETHIERTERMS):   select count(*) into :nclus from _level;
MPRINT(TM_GETHIERTERMS):   update _docs_ set ancestor=(select ancestor from _ancestors where _cluster_=cluster and tlevel=2);
NOTE: 499 rows were updated in WORK._DOCS_.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TM_GETHIERTERMS):   data _level;
MPRINT(TM_GETHIERTERMS):   set _level;
MPRINT(TM_GETHIERTERMS):   segmnt=_n_;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 2개의 관측값을 데이터셋 WORK._LEVEL.에서 읽었습니다.
NOTE: 데이터셋 WORK._LEVEL은(는) 2개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   update _docs_ set _SEGMNT_=(select segmnt from _level where clust=ancestor) where ancestor in (select clust from _level);
NOTE: 499 rows were updated in WORK._DOCS_.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TM_GETHIERTERMS):   data _docs_;
MPRINT(TM_GETHIERTERMS):   set _docs_(rename=(cluster=_CLUSTER_));
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 499개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 데이터셋 WORK._DOCS_은(는) 499개의 관측값과 51개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create view _CMB as select t1.*, t2._segmnt_ as cluster from _tmout_ t1, _docs_ t2 where t1._document_ = t2._document_ ;
NOTE: SQL view WORK._CMB has been defined.
MPRINT(TMTERM1):   quit ;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc summary data=_CMB nway ;
MPRINT(TMTERM1):   class cluster _term_ ;
MPRINT(TMTERM1):   var _count_ ;
MPRINT(TMTERM1):   output out=_TFREQ sum=total ;
MPRINT(TMTERM1):   run ;

NOTE: 5643개의 관측값을 데이터셋 WORK._TMOUT_.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 5643개의 관측값을 데이터셋 WORK._CMB.에서 읽었습니다.
NOTE: 데이터셋 WORK._TFREQ은(는) 2165개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.06 초
      

MPRINT(TMTERM1):   proc summary data=_CMB( keep= cluster _document_ ) ;
MPRINT(TMTERM1):   class cluster ;
MPRINT(TMTERM1):   var _document_ ;
MPRINT(TMTERM1):   output out=_SUM n=n ;
MPRINT(TMTERM1):   run ;

NOTE: 5643개의 관측값을 데이터셋 WORK._TMOUT_.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 5643개의 관측값을 데이터셋 WORK._CMB.에서 읽었습니다.
NOTE: 데이터셋 WORK._SUM은(는) 3개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):   data _null_ ;
MPRINT(TMTERM1):   set _SUM ;
MPRINT(TMTERM1):   if _type_ = 1 then call symput( 'CLUSIZE' || left( put( cluster, best. )), put( _freq_, best. ));
MPRINT(TMTERM1):   else if _type_ = 0 then call symput( 'CLUSALL', put( _freq_, best. )) ;
MPRINT(TMTERM1):   run ;

NOTE: 3개의 관측값을 데이터셋 WORK._SUM.에서 읽었습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _SUM;
NOTE: 테이블 WORK._SUM 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMSORT):   proc sort data = _TFREQ THREADS out = _TFREQ;
MPRINT(TMSORT):   by cluster descending _freq_;
MPRINT(TMSORT):   run;

NOTE: 2165개의 관측값을 데이터셋 WORK._TFREQ.에서 읽었습니다.
NOTE: 데이터셋 WORK._TFREQ은(는) 2165개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _UNQT( keep= _term_ _freq_ cluster ) ;
MPRINT(TMTERM1):   set _TFREQ ;
MPRINT(TMTERM1):   by cluster ;
MPRINT(TMTERM1):   if first.cluster then n_term = 0 ;
MPRINT(TMTERM1):   n_term + 1 ;
MPRINT(TMTERM1):   if n_term le 30 ;
MPRINT(TMTERM1):   run ;

NOTE: 2165개의 관측값을 데이터셋 WORK._TFREQ.에서 읽었습니다.
NOTE: 데이터셋 WORK._UNQT은(는) 60개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMSORT):   proc sort data = _UNQT THREADS nodupkey out = _UNQT( keep= _term_ );
MPRINT(TMSORT):   by _term_;
MPRINT(TMSORT):   run;

NOTE: 60개의 관측값을 데이터셋 WORK._UNQT.에서 읽었습니다.
NOTE: 중복 키값을 가지고 있는 21개의 관측값이 삭제되었습니다.
NOTE: 데이터셋 WORK._UNQT은(는) 39개의 관측값과 1개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create table _CLCDF as select distinct cluster, _term_, _freq_ from _TFREQ where _term_ in ( select _term_ from _UNQT ) order by _term_, cluster ;
NOTE: Table WORK._CLCDF created, with 78 rows and 3 columns.

MPRINT(TMTERM1):   quit ;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _UNQT;
NOTE: 테이블 WORK._UNQT 을(를) 삭제했습니다.
MPRINT(TMTERM1):   drop table _TFREQ;
NOTE: 테이블 WORK._TFREQ 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc transpose data=_CLCDF out=_CLCDF prefix=clus ;
MPRINT(TMTERM1):   by _term_ ;
MPRINT(TMTERM1):   var _freq_ ;
MPRINT(TMTERM1):   id cluster;
MPRINT(TMTERM1):   run ;

NOTE: 78개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDF은(는) 39개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 TRANSPOSE 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   data _CLCDF ;
MPRINT(TMTERM1):   length _term_ $100;
MPRINT(TMTERM1):   array a_clus ( 2 ) 4 clus1 - clus2 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   do _i_ = 1 to 2 ;
MPRINT(TMTERM1):   if a_clus( _i_ ) = . then a_clus( _i_ ) = 0 ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   sumfreq = sum( of clus1 - clus2 ) ;
MPRINT(TMTERM1):   if (clus1 = 0) or (clus1 < 0) then cdf1 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus1 ;
MPRINT(TMTERM1):   div = 5643 - 3823;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf1 = CDF( 'binomial', clus1 , propor , 3823 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf1 = 1;
MPRINT(TMTERM1):   else cdf1 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus2 = 0) or (clus2 < 0) then cdf2 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus2 ;
MPRINT(TMTERM1):   div = 5643 - 1820;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf2 = CDF( 'binomial', clus2 , propor , 1820 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf2 = 1;
MPRINT(TMTERM1):   else cdf2 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   saveplus=0;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),'+')=1 then do;
MPRINT(TMTERM1):   saveplus=1;
MPRINT(TMTERM1):   _term_ = ksubstr(kleft(ktrim(_term_)),3);
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),' ')>0 then _term_ = "'"||kleft(ktrim(_term_)) || "'  ";
MPRINT(TMTERM1):   else _term_ = kleft(ktrim(_term_)) || ' ';
MPRINT(TMTERM1):   if saveplus=1 then do;
MPRINT(TMTERM1):   _term_='+'||kleft(ktrim(_term_));
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   drop _i_ propor sumfreq div num saveplus;
MPRINT(TMTERM1):   run ;

NOTE: 39개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDF은(는) 39개의 관측값과 6개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   data _CLCDFTR ;
MPRINT(TMTERM1):   array a_cdf ( 2 ) cdf1 - cdf2 ;
MPRINT(TMTERM1):   array a_count ( 2 ) clus1 - clus2 ;
MPRINT(TMTERM1):   length clus 4 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   keep _term_ cdf clus doc_count;
MPRINT(TMTERM1):   do clus = 1 to 2 ;
MPRINT(TMTERM1):   cdf = a_cdf( clus ) ;
MPRINT(TMTERM1):   doc_count = a_count( clus ) ;
MPRINT(TMTERM1):   if cdf > 0 then output ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   run ;

NOTE: 39개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDFTR은(는) 78개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDF;
NOTE: 테이블 WORK._CLCDF 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMSORT):   proc sort data = _CLCDFTR THREADS out = _CLCDFTR;
MPRINT(TMSORT):   by clus descending cdf descending doc_count _term_;
MPRINT(TMSORT):   run;

NOTE: 78개의 관측값을 데이터셋 WORK._CLCDFTR.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDFTR은(는) 78개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _desc_;
MPRINT(TMTERM1):   set _CLCDFTR (rename=(clus=cluster));
MPRINT(TMTERM1):   format clus_desc $450.;
MPRINT(TMTERM1):   retain oldclus 0 clus_desc '' count 0;
MPRINT(TMTERM1):   keep _CLUSTER_ clus_desc ;
MPRINT(TMTERM1):   if _N_ = 1 then do;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   count = 1;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (count <= 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 1) then clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   else clus_desc = kleft(trim(clus_desc)) || "  " || kleft(trim(_term_));
MPRINT(TMTERM1):   count = count + 1;
MPRINT(TMTERM1):   if (_N_ = 78) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if (count > 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 78) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   count = 2;
MPRINT(TMTERM1):   clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   if (_N_ = 78) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   run;

NOTE: 78개의 관측값을 데이터셋 WORK._CLCDFTR.에서 읽었습니다.
NOTE: 데이터셋 WORK._DESC_은(는) 2개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDFTR;
NOTE: 테이블 WORK._CLCDFTR 을(를) 삭제했습니다.
MPRINT(TMTERM1):   drop view _CMB;
NOTE: View WORK._CMB 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):  ;
MPRINT(TM_GETHIERTERMS):   data _desc_(rename=(_CLUSTER_=clus));
MPRINT(TM_GETHIERTERMS):   set _desc_;
MPRINT(TM_GETHIERTERMS):   run;

NOTE: 2개의 관측값을 데이터셋 WORK._DESC_.에서 읽었습니다.
NOTE: 데이터셋 WORK._DESC_은(는) 2개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_GETHIERTERMS):   proc sql noprint;
MPRINT(TM_GETHIERTERMS):   update EMWS5.TextCluster2_hierds set clus_desc=(select clus_desc from _desc_ where clus=(select segmnt from _level where clust=_cluster_)) where _cluster_ in (select clust from _level);
NOTE: 2 rows were updated in EMWS5.TEXTCLUSTER2_HIERDS.

MPRINT(TM_GETHIERTERMS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.04 초
      

MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   create table EMWS5.TextCluster2_clusters as select a.clus_desc, b.* from EMWS5.TextCluster2_hierds a, EMWS5.TextCluster2_clusters b where a._cluster_=b._cluster_;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: 변수 clus_desc이(가) 파일 EMWS5.TEXTCLUSTER2_CLUSTERS에 이미 존재합니다.
NOTE: Table EMWS5.TEXTCLUSTER2_CLUSTERS created, with 9 rows and 51 columns.

MPRINT(TMC_DOC_SCORE):   update EMWS5.TextCluster2_hierds set freq=0 where clus_desc="" and _cluster_ ne 1;
NOTE: No rows were updated in EMWS5.TEXTCLUSTER2_HIERDS.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TMC_DOC_SCORE):   data _hd;
MPRINT(TMC_DOC_SCORE):   set EMWS5.TextCluster2_hierds;
MPRINT(TMC_DOC_SCORE):   cluster=_cluster_;
MPRINT(TMC_DOC_SCORE):   drop _cluster_ parent;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 17개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER2_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 WORK._HD은(는) 17개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   update _hd set freq= (select sum(freq) from EMWS5.TextCluster2_hierds where parent=cluster) where freq=. and cluster not in (select parent from EMWS5.TextCluster2_hierds where freq=.);
NOTE: 3 rows were updated in WORK._HD.

MPRINT(TMC_DOC_SCORE):   select count(*) into :empty from _hd where freq=.;
MPRINT(TMC_DOC_SCORE):   update EMWS5.TextCluster2_hierds set freq=(select freq from _hd where _cluster_=cluster);
NOTE: 17 rows were updated in EMWS5.TEXTCLUSTER2_HIERDS.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.04 초
      

MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   update _hd set freq= (select sum(freq) from EMWS5.TextCluster2_hierds where parent=cluster) where freq=. and cluster not in (select parent from EMWS5.TextCluster2_hierds where freq=.);
NOTE: 2 rows were updated in WORK._HD.

MPRINT(TMC_DOC_SCORE):   select count(*) into :empty from _hd where freq=.;
MPRINT(TMC_DOC_SCORE):   update EMWS5.TextCluster2_hierds set freq=(select freq from _hd where _cluster_=cluster);
NOTE: 17 rows were updated in EMWS5.TEXTCLUSTER2_HIERDS.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.06 초
      

MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   update _hd set freq= (select sum(freq) from EMWS5.TextCluster2_hierds where parent=cluster) where freq=. and cluster not in (select parent from EMWS5.TextCluster2_hierds where freq=.);
NOTE: 1 row was updated in WORK._HD.

MPRINT(TMC_DOC_SCORE):   select count(*) into :empty from _hd where freq=.;
MPRINT(TMC_DOC_SCORE):   update EMWS5.TextCluster2_hierds set freq=(select freq from _hd where _cluster_=cluster);
NOTE: 17 rows were updated in EMWS5.TEXTCLUSTER2_HIERDS.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.07 초
      cpu 시간            0.06 초
      

MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   update _hd set freq= (select sum(freq) from EMWS5.TextCluster2_hierds where parent=cluster) where freq=. and cluster not in (select parent from EMWS5.TextCluster2_hierds where freq=.);
NOTE: 1 row was updated in WORK._HD.

MPRINT(TMC_DOC_SCORE):   select count(*) into :empty from _hd where freq=.;
MPRINT(TMC_DOC_SCORE):   update EMWS5.TextCluster2_hierds set freq=(select freq from _hd where _cluster_=cluster);
NOTE: 17 rows were updated in EMWS5.TEXTCLUSTER2_HIERDS.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.06 초
      

MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   update _hd set freq= (select sum(freq) from EMWS5.TextCluster2_hierds where parent=cluster) where freq=. and cluster not in (select parent from EMWS5.TextCluster2_hierds where freq=.);
NOTE: 1 row was updated in WORK._HD.

MPRINT(TMC_DOC_SCORE):   select count(*) into :empty from _hd where freq=.;
MPRINT(TMC_DOC_SCORE):   update EMWS5.TextCluster2_hierds set freq=(select freq from _hd where _cluster_=cluster);
NOTE: 17 rows were updated in EMWS5.TEXTCLUSTER2_HIERDS.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.06 초
      

MPRINT(TMC_DOC_SCORE):   data EMWS5.TextCluster2_hierds(drop=plus pos sub);
MPRINT(TMC_DOC_SCORE):   set EMWS5.TextCluster2_hierds;
MPRINT(TMC_DOC_SCORE):   plus='';
MPRINT(TMC_DOC_SCORE):   if substr(CLUS_DESC, 1, 1) = "+" then plus="+ ";
MPRINT(TMC_DOC_SCORE):   if ktrim(clus_desc) ne "" then do;
MPRINT(TMC_DOC_SCORE):   if(substr(CLUS_DESC, 1, 1)) = "'" then do;
MPRINT(TMC_DOC_SCORE):   pos = findc(CLUS_DESC, "'",2);
MPRINT(TMC_DOC_SCORE):   sub = substr(CLUS_DESC,1,pos);
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   else sub = scan(CLUS_DESC, 1);
MPRINT(TMC_DOC_SCORE):   graphdesc=_CLUSTER_ || ': ' || plus || sub;
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   else graphdesc=_CLUSTER_;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 다음의 위치에서 숫자형 값이 문자형 값으로 변환되었습니다. (행):(칼럼)
      83:199   85:29    
NOTE: 17개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER2_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER2_HIERDS은(는) 17개의 관측값과 6개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMC_DOC_SCORE):   proc sort data=_docdata (rename=(cluster=_cluster_));
MPRINT(TMC_DOC_SCORE):   by _cluster_;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 499개의 관측값을 데이터셋 WORK._DOCDATA.에서 읽었습니다.
NOTE: 데이터셋 WORK._DOCDATA은(는) 499개의 관측값과 49개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMC_DOC_SCORE):   data _rmscalc;
MPRINT(TMC_DOC_SCORE):   merge _docdata(in=inhere) EMWS5.TextCluster2_clusters;
MPRINT(TMC_DOC_SCORE):   array _means(47) _mean1-_mean47;
MPRINT(TMC_DOC_SCORE):   array _svds(47) TextCluster2_SVD1 - TextCluster2_SVD47;
MPRINT(TMC_DOC_SCORE):   by _cluster_;
MPRINT(TMC_DOC_SCORE):   error=0;
MPRINT(TMC_DOC_SCORE):   do i = 1 to 47;
MPRINT(TMC_DOC_SCORE):   error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   drop i ;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 499개의 관측값을 데이터셋 WORK._DOCDATA.에서 읽었습니다.
NOTE: 9개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER2_CLUSTERS.에서 읽었습니다.
NOTE: 데이터셋 WORK._RMSCALC은(는) 499개의 관측값과 100개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TMC_DOC_SCORE):   proc summary data=_rmscalc nway;
MPRINT(TMC_DOC_SCORE):   class _cluster_;
MPRINT(TMC_DOC_SCORE):   var error;
MPRINT(TMC_DOC_SCORE):   output out=_meanerr mean=meane sum=sume;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 499개의 관측값을 데이터셋 WORK._RMSCALC.에서 읽었습니다.
NOTE: 데이터셋 WORK._MEANERR은(는) 9개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.04 초
      

MPRINT(TMC_DOC_SCORE):   data _rmsse;
MPRINT(TMC_DOC_SCORE):   set _meanerr;
MPRINT(TMC_DOC_SCORE):   if _freq_ gt 1 then do;
MPRINT(TMC_DOC_SCORE):   _rmsstd_=sqrt(sume/((_freq_-1)*(47)));
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   else do;
MPRINT(TMC_DOC_SCORE):   _rmsstd_=0;
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   keep _cluster_ _rmsstd_;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: 9개의 관측값을 데이터셋 WORK._MEANERR.에서 읽었습니다.
NOTE: 데이터셋 WORK._RMSSE은(는) 9개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   create table _clusstat2 as select a.*,b.* from EMWS5.TextCluster2_clusters a left join _rmsse b on a._cluster_=b._cluster_;
WARNING: 변수 _cluster_이(가) 파일 WORK._CLUSSTAT2에 이미 존재합니다.
NOTE: Table WORK._CLUSSTAT2 created, with 9 rows and 52 columns.

MPRINT(TMC_DOC_SCORE):   create table EMWS5.TextCluster2_clusters as select * from _clusstat2;
NOTE: Table EMWS5.TEXTCLUSTER2_CLUSTERS created, with 9 rows and 52 columns.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.04 초
      

MPRINT(TMC_SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   * path of the diagram ;
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   call symput("emwspath", strip(pathname("EMWS5")));
MPRINT(SCORE):   run;

NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(SCORE):   filename pre "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster2\PRESCORECODE.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   file pre;
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtext.tmemclus.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtext.tmpred.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtxtext.tmc_doc_score.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtext.tmsort.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtext.tmsvd.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtext.tmfast.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp;';
MPRINT(SCORE):   run;

NOTE: 파일 PRE:
      파일 이름=C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster2\PRESCORECODE.sas,
      RECFM=V,LRECL=32767,파일 크기 (바이트)=0,
      마지막 수정일=2018년 11월 17일 17시35분16초,
      생성 시간=2018년 11월 17일 17시35분16초

NOTE: 13개의 레코드를 파일 PRE에 기록했습니다.
      최소 레코드 길이는 14입니다.
      최대 레코드 길이는 62입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(SCORE):   filename tmpre "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextFilter2\PRESCORECODE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file pre MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("tmpre",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: 파일 PRE:
      파일 이름=C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster2\PRESCORECODE.sas,
      RECFM=V,LRECL=20000,파일 크기 (바이트)=452,
      마지막 수정일=2018년 11월 17일 17시35분16초,
      생성 시간=2018년 11월 17일 17시35분16초

NOTE: 23개의 레코드를 파일 PRE에 기록했습니다.
      최소 레코드 길이는 1입니다.
      최대 레코드 길이는 81입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   filename tmpre;
NOTE: Fileref TMPRE을(를) 삭제했습니다.
MPRINT(SCORE):   data _codeclusters;
MPRINT(SCORE):   set EMWS5.TextCluster2_clusters (drop=clus_desc);
MPRINT(SCORE):   run;

NOTE: 9개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER2_CLUSTERS.에서 읽었습니다.
NOTE: 데이터셋 WORK._CODECLUSTERS은(는) 9개의 관측값과 51개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(SCORE):   libname termloc "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5";
NOTE: 라이브러리 참조 TERMLOC은(는) EMWS5과(와) 같은 물리적 라이브러리를 참조합니다.
NOTE: 라이브러리 참조 'TERMLOC'이(가) 다음과 같이 할당되었습니다. 
      엔진:        V9 
      물리적 경로: C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5
MPRINT(SCORE):   * Now save code, if necessary, for search phrase;
MPRINT(SCORE):   filename _tmscore "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster2\EMPUBLISHSCORE.sas";
MPRINT(SCORE):   data _NULL_;
MPRINT(SCORE):   file _tmscore;
MPRINT(SCORE):   string= '%'||"tmc_doc_score(import="||'&em_score_output'||",export=work._newexport,";
MPRINT(SCORE):   put string;
MPRINT(SCORE):   put "      termds=termloc.TextFilter2_filtterms,configds=termloc.TextCluster2_tmconfig,";
MPRINT(SCORE):   put "      clusters=termloc.TextCluster2_clusters, ";
MPRINT(SCORE):   put "      _scrout=work.TextFilter2_out, svd_u=termloc.TextCluster2_svd_u, svd_s=termloc.TextCluster2_svd_s, prefix=TextCluster2);";
MPRINT(SCORE):   put 'data &em_score_output; set work._newexport;';
MPRINT(SCORE):   run;

NOTE: 파일 _TMSCORE:
      파일 이름=C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,파일 크기 (바이트)=0,
      마지막 수정일=2018년 11월 17일 17시35분16초,
      생성 시간=2018년 11월 17일 17시35분16초

NOTE: 5개의 레코드를 파일 _TMSCORE에 기록했습니다.
      최소 레코드 길이는 43입니다.
      최대 레코드 길이는 125입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(SCORE):   filename _tmscore;
NOTE: Fileref _TMSCORE을(를) 삭제했습니다.
MPRINT(SCORE):   filename temp;
WARNING: 파일 이름 TEMP이(가) 논리적으로 할당되지 않았습니다.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: TextCluster2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28016      *------------------------------------------------------------*;
28017      * End SCORE: TextCluster2;
28018      *------------------------------------------------------------*;

28020      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
28021      * TextCluster2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * TextCluster2: Computing metadata for TRAIN data;
28022      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS5.TextCluster2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS5.TextCluster2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS5.TextCluster2_TRAIN;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS5.TextCluster2_TRAIN out=WORK.M3668MPY noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3668MPY;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3668MPY(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3668MPY;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3668MPY;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M092OOB_ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M092OOB_;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M092OOB_;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3X415VX(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M092OOB_;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M092OOB_;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M092OOB_;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M092OOB_;
MPRINT(EMADVISECOLUMNS):   set WORK.M092OOB_;
MPRINT(EMADVISECOLUMNS):   label NAME = "변수 이름" TYPE = "유형" ROLE = "역할" LEVEL= "측도 레벨" ORDER= "순서" CREATOR= "생성자" FORMATTYPE= "출력형식 유형" FAMILY= "군" DISTRIBUTION= "분포" PRICE= "가격" LOWERLIMIT= "하한" UPPERLIMIT= "상한" REPORT= 
"리 포트" COMMENT= "주석" INDEX= "인덱스" INDEXTYPE= "인덱스 유형" LABEL= "레이블" LENGTH= "길이";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS5.TextFilter2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS5.TextFilter2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS5.TextCluster2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "TextCluster2";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextCluster2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "TEXTCLUSTER2_CLUSTER_" then do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB1" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB2" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB3" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB4" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB5" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB6" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB7" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB8" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_PROB9" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD1" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD10" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD11" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD12" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD13" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD14" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD15" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD16" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD17" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD18" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD19" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD2" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD20" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD21" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD22" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD23" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD24" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD25" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD26" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD27" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD28" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD29" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
SAS 시스템

MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD3" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD30" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD31" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD32" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD33" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD34" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD35" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD36" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD37" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD38" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD39" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD4" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD40" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD41" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD42" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD43" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD44" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD45" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD46" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD47" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD5" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD6" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD7" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD8" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER2_SVD9" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
28643      proc sort data = EMWS5.TextFilter2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS5.TextFilter2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
28644      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
28645      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 6개의 관측값을 데이터셋 EMWS5.TEXTFILTER2_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 WORK.SORTEDEMINFO은(는) 6개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

28646      proc sort data = EMWS5.TextCluster2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS5.TextCluster2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
28647      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
28648      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 4개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER2_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 WORK.TEMP_INFO은(는) 4개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

28649      data EMWS5.TextCluster2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS5.TextCluster2_EMINFO;
28650      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
28651      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
28652      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 6개의 관측값을 데이터셋 WORK.SORTEDEMINFO.에서 읽었습니다.
NOTE: 4개의 관측값을 데이터셋 WORK.TEMP_INFO.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER2_EMINFO은(는) 7개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

28653      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
28654      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
28655      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: WORK.TEMP_INFO(memtype=DATA)을(를) 삭제하는 중입니다.
NOTE: WORK.SORTEDEMINFO(memtype=DATA)을(를) 삭제하는 중입니다.
28656      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: 프로시저 DATASETS 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
