MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "2018년 11월 20일" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10시37분30초" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 분석 로그";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* 분석 로그
날짜:                2018년 11월 20일
시간:                10시37분30초
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3UAYXJY "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3UAYXJY new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "2018년 11월 20일" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10시37분30초" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "사용자:                Administrator";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "사이트:                10503192";
MPRINT(EM_DIAGRAM):   put "플랫폼:            X64_10HOME";
MPRINT(EM_DIAGRAM):   put "관리 릴리스: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM 버전:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "2018년 11월 20일" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10시37분30초" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "사용자:                Administrator";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 분석 출력";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 스코어 출력";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 리포트 출력";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
40244      proc freq data=EMWS5.TextCluster_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS5.TextCluster_VariableSet noprint;
40245      table ROLE*LEVEL/out=WORK.TextClusterMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TextClusterMETA;
40246      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_VARIABLESET.에서 읽었습니다.
NOTE: 데이터셋 WORK.TEXTCLUSTERMETA은(는) 1개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 FREQ 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.06 초
      

40247      proc print data=WORK.TextClusterMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TextClusterMETA label noobs;
40248      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
40249      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "역할" LEVEL = "측도 레벨" COUNT = "빈도 개수";
40250      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
40251      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "변수 요약";
MPRINT(EM_DIAGRAM):   run;
40252      run;

NOTE: 1개의 관측값을 데이터셋 WORK.TEXTCLUSTERMETA.에서 읽었습니다.
NOTE: 출력 결과 (프로시저: PRINT, 페이지: 4)
NOTE: 프로시저 PRINT 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

40253      title10;
MPRINT(EM_DIAGRAM):   title10;
40254      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextCluster: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextCluster: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'DataMining2018';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Beekman';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS5.TextFilter_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40574      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
40575      * TextCluster: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * TextCluster: Generation of macros and macro variables;
40576      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
40577      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

40578      %let EMEXCEPTIONSTRING=;
40579      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
40580      * TRAIN: TextCluster;
MPRINT(EM_DIAGRAM):   * TRAIN: TextCluster;
40581      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40582      %let EM_ACTION = TRAIN;
40583      %let syscc = 0;
40584      %macro main();
40585      
40586         %if %upcase(&EM_ACTION) eq CREATE %then %do;
40587            filename temp catalog 'sashelp.emtxtext.cluster_create.source';
40588            %include temp;
40589            %create();
40590         %end;
40591         %if %upcase(&EM_ACTION) eq TRAIN %then %do;
40592            filename temp catalog 'sashelp.emtxtext.cluster_train.source';
40593            %include temp;
40594            %train();
40595         %end;
40596         %if %upcase(&EM_ACTION) eq REPORT %then %do;
40597            filename temp catalog 'sashelp.emtxtext.cluster_report.source';
40598            %include temp;
40599            %report();
40600         %end;
40601         %if %upcase(&EM_ACTION) eq SCORE %then %do;
40602            filename temp catalog 'sashelp.emtxtext.cluster_score.source';
40603            %include temp;
40604            %score();
40605         %end;
40606      %mend main;
40607      
40608      %main();
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emtxtext.cluster_train.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.CLUSTER_TRAIN.SOURCE입니다.
40609     +%macro train();
40610     +
40611     +    %global last_parse_node last_filter_node last_prescore_node server_err
40612     +      parsevar EM_SASMSG;
40613     +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
40614     +    %let EM_SASMSG=TMINE;
40615     +    %let syscc=0;
40616     +
40617     +    filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
40618     +    %include temp;
40619     +    filename temp catalog 'sashelp.emtxtext.tm_cluster.source';
40620     +    %include temp;
40621     +    filename temp catalog 'sashelp.emtxtext.tm_apply_tmutil.source';
40622     +    %include temp;
40623     +    filename temp catalog 'sashelp.emtxtext.tm_svd_do_samp.source';
40624     +    %include temp;
40625     +    filename temp;
40626     +
40627     +    %tm_get_last_filter(eminfo=&EM_IMPORT_DATA_EMINFO,em_lib=&em_lib,
40628     +                        em_variableset=&em_data_variableset);
40629     +    %if &EMEXCEPTIONSTRING ne %then %goto end_cluster_train;
40630     +    %let lastparsenode=&last_parse_node;
40631     +    %let lastfilternode=&last_filter_node;
40632     +    %let lastprescore=&last_prescore_node;
40633     +    %if &lastfilternode=&lastparsenode %then %do;
40634     +        %let EMEXCEPTIONSTRING = EMTOOL.NOFILTERNODE;
40635     +        %goto end_cluster_train;
40636     +    %end;
40637     +
40638     +    /*populate last tm node dataset so tm_get_last_filter is not called in score*/
40639     +    %em_getname(key=last_tm_nodes, type=data);
40640     +    data &em_user_last_tm_nodes;
40641     +        set &EM_IMPORT_DATA_EMINFO;
40642     +    run;
40643     +
40644     +
40645     +    %em_getname(key=tmconfig, type=data);
40646     +    %em_getname(key=terms, type=data);
40647     +    %em_getname(key=docs, type=data);
40648     +    %em_getname(key=clusters, type=data);
40649     +    %em_getname(key=graph_table, type=data);
40650     +    %em_getname(key=svd_u, type=data);
40651     +    %em_getname(key=tmconfig, type=data);
40652     +    %em_getname(key=svd_s, type=data);
40653     +    %em_getname(key=emoutstat, type=data);
40654     +    %em_getname(key=hierds, type=data);
40655     +
40656     +
40657     +
40658     +    /* get target variable info */
40659     +    %let targetvar = ;
40660     +    data _null_;
40661     +       set &em_data_variableset(where=(ROLE='TARGET' and USE in('Y' 'D')
40662     +                                       and LEVEL ne 'INTERVAL'));
40663     +       if _N_=1 then call symput('targetvar', strip(NAME));
40664     +    run;
40665     +
40666     +
40667     +
40668     +    /* set up terms strings and initial config table */
40669     +    proc sql noprint;
40670     +      create table &EM_USER_tmconfig as
40671     +         select *
40672     +         from &EM_LIB..&last_filter_node._tmconfig;
40673     +    quit;
40674     +
40675     +
40676     +    proc sql noprint;
40677     +       select  cellwgt into: _cellweight
40678     +       from &em_user_tmconfig;
40679     +       select termwgt into: _termwgt
40680     +       from &em_user_tmconfig;
40681     +    quit;
40682     +
40683     +    data _keepdocs (keep=_DOCUMENT_ %if &targetvar ne %then &targetvar; );
40684     +        set &EM_IMPORT_DATA;
40685     +    run;
40686     +
40687     +    %tm_apply_tmutil(data=&EM_LIB..&last_filter_node._tmout,
40688     +                       terms=&EM_LIB..&last_filter_node._terms,
40689     +                       docs=&EM_IMPORT_DATA,
40690     +                       keepdocs=_keepdocs,
40691     +                       reduceF=2,
40692     +                       termweight=&_termwgt,
40693     +                       cellweight=&_cellweight,
40694     +                       outdata=_outtmutil_,
40695     +                       outterms=_newkey,
40696     +                       outweights=_weights,
40697     +                       targetvar=&targetvar,
40698     +                       memloc=_tmmem);
40699     +
40700     +                       /* get the svd dimensions on the documents */
40701     +    %tm_svd_do_samp(data=_outtmutil_,docs=_keepdocs, maxK=&em_property_maxK, res=&em_property_resolution,cellwgt=&_cellweight,in_global=_weights,
40702     +                     rowVar=_termnum_,colVar=_document_,entryVar=_count_,u=&EM_USER_SVD_U,v=_svdv,s=&EM_USER_svd_S,
40703     +                     colpro=_svdcolpro,rowpro=_svdrowpro, normcol=normcol, normrow=normrow,prefix=&EM_NODEID);
40704     +
40705     +    %if(&syscc >4 ) %then %do;
40706     +        %goto end_cluster_train;
40707     +    %end;
40708     +
40709     +    proc sql noprint;
40710     +       create table &EM_USER_TERMS(drop=index) as
40711     +       select a.*,b.*
40712     +       from &EM_LIB..&last_filter_node._terms a left join _svdrowpro b
40713     +       on a.key = b.index;
40714     +    quit;
40715     +
40716     +    %tm_cluster(data=&EM_LIB..&last_filter_node._tmout,
40717     +        terms=&EM_LIB..&last_filter_node._terms,
40718     +        docs=&EM_IMPORT_DATA,
40719     +        svdColPro=_svdcolpro,
40720     +        maxNumTerms=&em_property_ndescterms,
40721     +        numClus=&em_property_nclusters,
40722     +        numType=&em_property_exactormaximum,
40723     +        algorithm=&em_property_algorithm,
40724     +        outdocs=&EM_USER_DOCS,
40725     +        outclusters=&EM_USER_CLUSTERS,
40726     +        hierds=&EM_USER_HIERDS,
40727     +        emoutstat=&EM_USER_emoutstat,
40728     +        prefixstring= &EM_NODEID);
40729     +
40730     +    %if &emexceptionstring ne %then %goto end_cluster_train;
40731     +
40732     +    %if &em_property_algorithm=2.0 %then %do;
40733     +
40734     +        data &em_user_hierds(drop=plus);
40735     +            set &em_user_hierds;
40736     +            plus='';
40737     +            if substr(CLUS_DESC, 1, 1) = "+" then plus="+ ";
40738     +            graphdesc=_CLUSTER_ || ': ' || plus || scan(CLUS_DESC, 1);
40739     +        run;
40740     +    %end;
40741     +
40742     +
40743     +    * add the info to EMINFO to forward on to other nodes ;
40744     +   data &EM_DATA_EMINFO;
40745     +      length TARGET KEY $32 DATA $43;
40746     +
40747     +      key="LastTMNode";
40748     +      data="&EM_NODEID";
40749     +      output;
40750     +
40751     +      key="LastTMNodeType";
40752     +      data="TextCluster";
40753     +      output;
40754     +
40755     +      key="LastTextCluster";
40756     +      data="&EM_NODEID";
40757     +      output;
40758     +
40759     +      key="PRESCORECODE";
40760     +      data="&EM_NODEID";
40761     +      output;
40762     +   run;
40763     +
40764     +    proc sql noprint;
40765     +        select count(*) into :svdkeep
40766     +            from &em_user_svd_s
40767     +            where keep=1;
40768     +        select count(*) into :cluscnt
40769     +            from &em_user_clusters;
40770     +    quit;
40771     +   data &EM_USER_tmconfig;
40772     +         set &EM_USER_TMCONFIG;
40773     +         clus_alg = "&em_property_algorithm";
40774     +         maxsvd = &em_property_maxk;
40775     +         svdkeep=&svdkeep;
40776     +         last_prescore = "&last_prescore_node";
40777     +      run;
40778     +
40779     +    %em_metachange(name=&EM_NODEID._CLUSTER_, role=SEGMENT, level=NOMINAL);
40780     +    %do i=1 %to &svdkeep;
40781     +         %em_metachange(name=&EM_NODEID._SVD&i, role=INPUT, level=INTERVAL);
40782     +    %end;
40783     +    %do i=1 %to &cluscnt;
40784     +         %em_metachange(name=&EM_NODEID._PROB&i, role=REJECTED);
40785     +    %end;
40786     +
40787     +%end_cluster_train:
40788     +    filename temp;
40789     +    %if &tm_debug =0 %then %do;
40790     +        proc sql noprint;
40791     +              drop table _svdcolpro;
40792     +              drop table _svdrowpro;
40793     +              drop table _newkey ;
40794     +              drop table _keepdocs ;
40795     +        quit;
40796     +    %end;
40797     +
40798     +%mend train;
40799     +
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TM_GET_LAST_FILTER.SOURCE입니다.
40800     +/* ****************************************************************
40801     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
40802     + *
40803     + * Name:             tm_get_last_filter.sas
40804     + * Product:          SAS Text Miner
40805     + * Language:         Sas
40806     + * Script:
40807     + *
40808     + * Usage:
40809     + *
40810     + * Purpose:  macro to get the last filter node and the last parse node in the
40811     + *   diagram that corresponds to the current parse variable.  If there is no filter
40812     + *   node, the filter node is set to the last parse node.
40813     + *
40814     + *
40815     + *
40816     + * History:
40817     + * 14Aug09 Initial Coding
40818     + *
40819     + * Notes:
40820     + *    Returns an error in the following cases:
40821     + *      1. There is no preceding parse node.
40822     + *      2. There is no parse node with the current parse variable.
40823     + *
40824     + * Last Modified By:
40825     + * Last Modified On: Wed Sep 23 15:35:04 2009
40826     + *
40827     + * End
40828     + * ************************************************************** */
40829     +%macro tm_get_last_filter(eminfo=,em_lib=, em_variableset=);
40830     +   %let last_parse_node=;
40831     +   %let last_filter_node=;
40832     +   %let last_prescore_node=;
40833     +   %let server_err=;
40834     +   %let EMEXCEPTIONSTRING=;
40835     +   %let syscc=0;
40836     +
40837     +    /* verify that setinit for SAS Text Miner is currently active */
40838     +    %if %sysfunc(sysprod(PRODNUM107)) ne 1 %then %do;
40839     +       %let EMEXCEPTIONSTRING = EMTOOL.NOTMLICENSE;
40840     +        %goto end_macro;
40841     +        %end;
40842     +
40843     +
40844     +    * find last filter or text parse node if no filter node. ;
40845     +   %if %sysfunc(exist(&eminfo)) %then %do;
40846     +      proc sql noprint;
40847     +      select data into :last_parse_node from &eminfo where key="LastTextParsing";
40848     +         select data into :last_filter_node from &eminfo where key="LastTextFilter";
40849     +         select data into :last_prescore_node from &eminfo where kupcase(key)="PRESCORECODE";
40850     +      quit;
40851     +
40852     +   %end;
40853     +
40854     +   %if &last_parse_node= %then %do;
40855     +      %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGNODE;
40856     +      %goto end_macro;
40857     +      %end;
40858     +
40859     +   %else %if &last_filter_node= %then %let last_filter_node = %ktrim(&last_parse_node);
40860     +   %else %let last_filter_node = %ktrim(&last_filter_node);
40861     +   %let last_parse_node = %ktrim(&last_parse_node);
40862     +
40863     +   * Check to make sure parse variable is present and still exists;
40864     +   %let parsevar = ;
40865     +   proc sql noprint;
40866     +    select parsevar into :parsevar
40867     +    from &em_lib..&last_filter_node._tmconfig;
40868     +    quit;
40869     +
40870     +    *check for dropped parsevar on input dataset;
40871     +       %let parsevarOK= ;
40872     +       %let parsevarN=%kupcase(%ktrim(&parsevar));
40873     +       data _null_;
40874     +         set &em_variableset(where=(kupcase(NAME)="&parsevarN" and USE in('Y' 'D')));
40875     +         if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
40876     +         run;
40877     +       %if(&parsevarOK eq ) %then %do;
40878     +          %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGVAR;
40879     +          %goto end_macro;
40880     +          %end;
40881     +%end_macro:
40882     +
40883     +%mend tm_get_last_filter;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tm_cluster.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TM_CLUSTER.SOURCE입니다.
40885     +   /* ****************************************************************
40886     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
40887     + *
40888     + * Name:             tm_cluster.sas
40889     + * Support:          rualbr Russell Albright
40890     + * Product:
40891     + * Language:         Sas
40892     + * Script:
40893     + *
40894     + * Usage:
40896     + !Inputs into %tm_train_cluster
40897     + * doc = doc datset from a tm node
40898     + * data =  out datset from a tm node
40899     + * terms = terms dataset from  tm node
40900     + * svdcolpro = column projections data set
40901     + * cellweight setting
40902     + * termweight setting
40903     + * maxSvddim = Maximum number of dimension to calculate
40904     + * svdres= <HIGH, MED, or LOW>
40905     + * maxNumTerms - maximum number of term to use for descriptive terms
40906     + * numClus = number of clusters to use
40907     + * numType=<MAXIMUM or EXACT> Max means that <= maximum will actually be used.
40908     + * threads = the number of threads you would like emclus to use
40911     + !Outputs from %tm_train_cluster
40912     + * outdocs - a doc table with the cluster restults on it.
40913     + * outclusters- an output cluster table with the descriptive terms on it (future story)
40914     + *
40915     + * Example call
40916     + *
40917     + *%tm_cluster(data=tmn.text_out_t,
40918     + *             terms=tmn.terms,
40919     + *             docs=testdata._train,
40920     + *             svdcolpro=tmn._svdcolpro,
40921     + *             maxNumTerms=5,
40922     + *             numClus=40,
40923     + *             numType=MAXIMUM,
40924     + *             outdocs=docsresult,
40925     + *             hierds=_hierds,
40926     + *             emoutstat=_emoutstat,
40927     + *             outclusters= clusterResult);
40928     + *
40929     + *
40930     + * Purpose: Perform the clustering on out,term, doc from parse or filter node
40931     + *
40932     + * History:
40933     + *
40934     + *
40935     + * Notes:
40936     + *
40937     + * Last Modified By:
40938     + * Last Modified On: Thu Jan 08 17:22:43 2009
40939     + *
40940     + * End
40941     + * ************************************************************** */
40943     +%macro tm_cluster(data=,
40944     +                     terms=,
40945     +                     docs=,
40946     +                     svdColPro=,
40947     +                     maxNumTerms=,
40948     +                     numClus=,
40949     +                     numType=MAXIMUM,
40950     +                     algorithm=,
40951     +                     outdocs=,
40952     +                     hierds=_hierds,
40953     +                     emoutstat=_emoutstat,
40954     +                     outclusters=,
40955     +                     prefixString=,
40956     +                     threads=);
40959     +    %local _cleanedout ;
40960     +    %local _numRepDocs;
40961     +    %global systmutil;
40962     +    %let systmutil = ;
40963     +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
40965     +    filename temp catalog 'sashelp.emtext.tmgetncl.source';
40966     +    %include temp;
40967     +    filename temp catalog 'sashelp.emtext.tmfast.source';
40968     +    %include temp;
40970     +    filename temp catalog 'sashelp.emtext.tmemclus.source';
40971     +    %include temp;
40973     +    filename temp catalog 'sashelp.emtext.tmpred.source';
40974     +    %include temp;
40976     +    filename temp catalog 'sashelp.emtext.tmsort.source';
40977     +    %include temp;
40979     +    %let tmdata=&data;
40980     +    %let tmterms=&terms;
40981     +    %let tmdocs=&docs;
40982     +    %let emexceptionstring=;
40985     +    /* check some basic size requirements to proceed.*/
40986     +    proc sql noprint;
40987     +       select count(*) into: numTerms
40988     +       from &terms a
40989     +       where a.numdocs>=2 and _ispar in('+',' ')
40990     +       ;
40991     +       select count (*) into: numdocs
40992     +       from &docs a;
40993     +    quit;
40995     +    %if (&numterms < 10)  OR (&numdocs< 8) %then %do;
40996     +        %let emexceptionstring=EMTOOL.INSUFFICIENTDATA;
40997     +        %goto end_train_cluster;
40998     +    %end;
41000     +    /* Get number of kept svd variables */
41001     +    %let pid = %sysfunc(open(&svdcolpro));
41002     +    %let svdkeep=%eval(%sysfunc(attrn(&pid,nvars))-1);
41003     +    %let rc = %sysfunc(close(&pid));
41006     +   /************************ Find clusters *************************************/
41008     +   %if %upcase(&numType) = MAXIMUM %then %do;   /* numClus = MAXIMUM */
41010     +      /* Call tmgetncl to find the recommended number of clusters. */
41012     +      %tmGetNcl(data=&svdcolpro,
41013     +               maxclusters=&numClus,
41014     +               vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep),
41015     +               tempDS=_clusTemp1,
41016     +               clusDS=_clusTemp,
41017     +               threads=
41018     +            );
41020     +      /* error returned in above macro */
41021     +      %if (&syscc >4 ) %then %do;
41022     +         %let emexceptionstring= &SYSERRORTEXT;
41023     +         %goto end_train_cluster;
41024     +      %end;
41026     +      /* Store the recommended number into a macro variable. */
41028     +      proc sql noprint;
41029     +         select max(nclus) into: numClus
41030     +         from _clusTemp
41031     +         ;
41032     +      quit;
41035     +      %if not (&numClus > 1) %then %do;
41036     +        %let numClus = 2;
41037     +      %end;
41040     +       %if &tm_debug =0  %then %do;
41041     +          proc sql nowarn noprint;
41042     +              drop table _clustemp;
41043     +              drop table _clustemp1;
41044     +           quit;
41045     +       %end;
41047     +   %end;  /* &numtype = MAXIMUM */
41049     +   %else  %do;
41050     +       %let numClus = %left(&numClus);/*&numtype=EXACT*/
41051     +   %end;
41053     +    proc sql noprint;
41054     +        select count(*) into: nobs
41055     +        from &svdcolpro;
41056     +    quit;
41058     +   %if %left(&algorithm)=2.0 %then %do; /* Hierarchical clustering */
41059     +        filename temp catalog 'sashelp.emtxtext.tmgethclus.source';
41060     +        %include temp;
41062     +        filename temp catalog 'sashelp.emtext.tmhclus.source';
41063     +        %include temp;
41064     +        filename temp catalog 'sashelp.emtext.tmtree.source';
41065     +        %include temp;
41067     +        %if &nobs < &numClus and  %upcase(&numType) = EXACT %then %do;
41068     +            %let emexceptionstring=EMTOOL.TOOFEWOBSTOCLUS;
41069     +            %goto end_train_cluster;
41070     +        %end;
41072     +        %tmgethclus(outtree=_outtree,
41073     +                    idvar=index,
41074     +                    inDS=&svdcolpro,
41075     +                    outDS=&outdocs,
41076     +                    fastOut=_fastclusstat,
41077     +                    textClusDS=_clusstat,
41078     +                    vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep),
41079     +                    nobs=&nobs,
41080     +                    nclus=&numClus,
41081     +                    hierds=&hierds,
41082     +                    svdkeep=&svdkeep,
41083     +                    prefix=&prefixString);
41084     +        %if &EMEXCEPTIONSTRING ne %then %goto end_train_cluster;
41086     +        data _clusstat;
41087     +            set _clusstat(rename=(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep.=_mean1-_mean&svdkeep.));
41088     +        run;
41090     +        data _clustermean;
41091     +          set _clusstat(keep=_cluster_ _mean1-_mean&svdkeep. rename=(_cluster_=cluster));
41092     +        run;
41094     +        proc sql noprint;
41095     +            drop table _outtree;
41096     +        quit;
41097     +   %end;
41098     +   %else %do; /* Expectation-maximization */
41099     +       /* Call %anl_tmfast to create cluster stat data set that will be used as an input for %anl_tmemclus. */
41100     +          %tmFast(data=&svdcolpro,
41101     +             clusters=&numClus,
41102     +             outstat=_fastclusstat,
41103     +             outseed=,
41104     +                id=,
41105     +             out=,
41106     +             vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep)
41107     +             );
41108     +          run;
41110     +          /* If some of the clusters are too small (frequency less than 5) and &g_numClusFlag=MAXIMUM, */
41111     +          /* reassign value for &cluster macro var from WORK.&s_reportID._fastclusstat data set. */
41113     +       %if %upcase(&numType) = MAXIMUM %then
41114     +       %do;   /* &ClusType = MAXIMUM */
41116     +          proc sql noprint;
41117     +             select max(CLUSTER) into :numClus
41118     +             from _fastclusstat
41119     +             where upcase(_TYPE_)='SEED'
41120     +             ;
41121     +          quit;
41123     +          %let numClus = %left(&numClus);
41125     +       %end;  /* &ClusType = MAXIMUM */
41126     +       %else %do; /* &ClusType = EXACT */
41127     +          %if &nobs < &numClus %then %do;
41128     +            %let emexceptionstring=EMTOOL.TOOFEWOBSTOCLUS;
41129     +            %goto end_train_cluster;
41130     +          %end;
41131     +       %end;
41133     +       %tmEMClus(data=&svdcolpro,
41134     +                role=TRAIN,
41135     +                clusters=&numClus,
41136     +                seed=_fastclusstat,
41137     +                outstat=&emoutstat,
41138     +                out=_tmutildoc,
41139     +                vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep),
41140     +                cov=,
41141     +                iter=5,
41142     +                secclus=,
41143     +                seciter=,
41144     +                min=,
41145     +                method=,
41146     +                eps=.1,
41147     +                init=FASTCLUS,
41148     +                print=NONE,
41149     +                p=,
41150     +                outliers=,
41151     +                decvar=0,
41152     +                initstd=,
41153     +                dist=,
41154     +                secstd=,
41155     +                nobs=,
41156     +                threads=&threads.
41157     +             );
41158     +       run;
41161     +       /* Run %anl_tmpred macro to assign documents to clusters with the largest posterior probability */
41162     +       /* and to calculate cluster frequency. */
41164     +       %tmPred (inds=_tmutildoc,
41165     +                outds=&outdocs,
41166     +              clusters=&numClus,
41167     +              type=max,
41168     +              freqds=_clusstat,
41169     +              compress=1
41170     +              );
41171     +        data &outdocs;
41172     +           set &outdocs;
41173     +           rename prob1-prob&numClus = &prefixString._prob1-&prefixString._prob&numclus;
41174     +        run;
41178     +       /* Transpose the output data set to contain cluster ID and cluster frequency. */
41180     +        data _clusstat;
41181     +            array c(&numClus) _c1-_c&numClus;
41182     +            set _clusstat;
41183     +            /*keep _CLUSTER_ Freq;*/
41184     +            totalobs=0;
41185     +            do _CLUSTER_ = 1 to &numClus;
41186     +                Freq = c(_CLUSTER_);
41187     +                totalobs=totalobs+c(_CLUSTER_);
41188     +                output;
41189     +            end;
41190     +            call symput ('totNumDocs', totalobs);
41191     +        run;
41193     +       %if &totNumDocs = 0 %then
41194     +       %do;   /*&totNumDocs = 0 */
41195     +           goto end_train_cluster;
41196     +       %end; /*&totNumDocs = 0 */
41198     +       /* Calculate cluster percentage. */
41199     +       data _clusstat;
41200     +          set _clusstat;
41201     +          Percent = Freq/&totNumDocs;
41202     +       run;
41204     +       data _clustermean(rename=(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep. = _mean1-_mean&svdkeep.));
41205     +          set &emoutstat(keep=cluster _TYPE_ &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.);
41206     +          if _TYPE_ = "MEAN";
41207     +            keep cluster &prefixstring._SVD1 - &prefixstring._SVD&svdkeep. ;
41208     +      run;
41209     +  %end;
41211     +      proc sql;
41212     +      create table _meandocs(drop=cluster) as
41213     +      select a.*, b.*
41214     +      from &outdocs a left join _clustermean b
41215     +      on a._cluster_=b.cluster
41216     +      ;
41217     +      quit;
41218     +       /*calulate residual for each doc */
41219     +      data _rmscalc;
41220     +          merge _meandocs(in=inhere) _clusstat;
41221     +          array _means(&svdkeep) _mean1-_mean&svdkeep.;
41222     +          array _svds(&svdkeep) &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.;
41223     +          by _cluster_;
41224     +          error=0;
41225     +          do i = 1 to &svdkeep;
41226     +             error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
41227     +          end;
41228     +         /*error=sqrt(error);*/
41229     +          drop i;
41230     +       run;
41231     +    /*calc standardized residual for clusters*/
41232     +       proc summary data=_rmscalc nway;
41233     +          class _cluster_;
41234     +          var error;
41235     +          output out=_meanerr mean=meane sum=sume;
41236     +       run;
41238     +       data _rmsse;
41239     +          set _meanerr;
41240     +          /* original code divides by number of svd dims*/
41241     +          if _freq_ gt 1 then do;
41242     +              _rmsstd_=sqrt(sume/((_freq_-1)*(&svdkeep.)));
41243     +          end;
41244     +          else do;
41245     +              _rmsstd_=0;
41246     +          end;
41247     +          keep _cluster_  _rmsstd_;
41248     +       run;
41251     +       proc sql;
41252     +           create table _clusstat2(drop=cluster) as
41253     +           select a.*,b.*
41254     +           from _clustermean a left join _rmsse b
41255     +           on a.cluster=b._cluster_;
41257     +           create table &outclusters as
41258     +           select  a.*, b.freq, b.percent
41259     +           from _clusstat2(keep=_cluster_ %str(_mean1-_mean&svdkeep) _rmsstd_) a right join _clusstat b
41260     +           on a._cluster_=b._cluster_
41261     +           where b.freq>0 ;
41262     +       quit;
41265     +    filename temp catalog 'sashelp.emtext.tmterm1.source';
41266     +    %include temp / nosource2;
41268     +   /****************** Find descriptive terms for clusters ***************************/
41271     +   /* Add _term_ variable to WORK._terms data set to prepare it as an
41272     +   /* input to %tmterm1 macro. The variable is added from &EM_LIB..&last_filter_node._terms data set. */
41274     +   proc sort data=&tmterms out=_terms_;
41275     +        by key _ispar;
41276     +   run;
41278     +   data _terms_;
41279     +       set _terms_;
41280     +       by key _ispar;
41281     +       if first.key then
41282     +          output;
41283     +       else;
41284     +   run;
41286     +    /* Concatenate + to terms */
41287     +    data _terms_;
41288     +        set _terms_;
41289     +        if _ispar='+' then
41290     +            Term=_ispar || ' ' || term;
41291     +    run;
41293     +   %tmsort(data=&tmdata,
41294     +         out=_tmout_,
41295     +         by=_termnum_,
41296     +            options=,
41297     +         threads=threads);
41300     +   data _tmout_;
41301     +      merge _tmout_ (in=_A_)
41302     +            _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
41303     +      by _termnum_;
41304     +      if _A_;
41305     +   run;
41307     +   /* Create _segmnt_ variable in WORK._docs data set to prepare it to be an */
41308     +   /* input to %tmterm1 macro. Set it equal to _cluster_ variable. */
41310     +   %if &algorithm=2.0 %then %do;
41311     +        data _docs_;
41312     +            set &outdocs (rename=(index=_document_) keep=index _cluster_ _finalcluster_);
41313     +            _SEGMNT_=_finalcluster_;
41314     +        run;
41315     +        proc sql noprint;
41316     +            select max(_cluster_) into :numclus from &outclusters;
41317     +        quit;
41318     +   %end;
41319     +   %else %do;
41320     +       data _docs_;
41321     +        set &outdocs (rename=(index=_document_) keep=index _cluster_);
41322     +         _SEGMNT_=_cluster_;;
41323     +       run;
41325     +   %end;
41327     +   /* Run %tmterm1 macro to determine descriptive terms for clusters. */
41328     +   %tmterm1(DSN_TPARS=_tmout_,
41329     +        DSN_CLUS=_docs_,
41330     +        DSN_DESC=_desc_,
41331     +        N_DESC_TERMS=&maxnumterms,
41332     +        N_CLUS=&numclus,
41333     +        top_freq=%eval(&maxnumterms*2),
41334     +        key=);
41336     +    /* Add cluster descriptive terms to clusters table. */
41337     +   %tmsort(data=&outclusters,
41338     +         out=&outclusters,
41339     +         by=_cluster_,
41340     +            options=,
41341     +         threads=threads);
41343     +   %tmsort(data=_desc_,
41344     +         out=_desc_,
41345     +         by=_cluster_,
41346     +            options=,
41347     +         threads=threads);
41349     +   data _desc_;
41350     +      merge &outclusters _desc_;
41351     +      by _cluster_;
41352     +   run;
41354     +   %tmsort(data=_desc_,
41355     +         out=&outclusters,
41356     +         by=_cluster_,
41357     +            options=,
41358     +         threads=threads);
41360     +   %if &algorithm=2.0 %then %do;
41362     +        %tmsort(data=&HIERDS,
41363     +         out=&HIERDS,
41364     +         by=_cluster_,
41365     +            options=,
41366     +         threads=threads);
41368     +        data &HIERds;
41369     +            merge &outCLUSTERS &HIERds (keep=_cluster_ parent level in=P);
41370     +            by _cluster_;
41371     +            clust=_cluster_;
41372     +            drop _cluster_;
41373     +            if P;
41374     +        run;
41376     +        %let empty=1;
41378     +        /* Be sure that all parent clusters are on outclusters ds */
41379     +        proc sql noprint;
41380     +            create table &outclusters as
41381     +                select a._cluster_, b.* from &hierds (rename=(clust=_CLUSTER_)) a
41382     +                left join &outclusters b
41383     +                on a._cluster_=b._cluster_;
41384     +        quit;
41386     +        %do %while (&empty);
41387     +            proc sql noprint;
41388     +                update &outclusters set freq=
41389     +                    (select sum(freq) from &HIERDS
41390     +                    where parent=_cluster_), percent=
41391     +                    (select sum(percent) from &HIERDS
41392     +                    where parent=_cluster_)
41393     +                    where freq=. and _cluster_ not in
41394     +                    (select parent from &hierds where freq=.);
41395     +                select count(*) into :empty from &outclusters
41396     +                    where freq=.;
41397     +                update &hierds set freq=(select freq from &outclusters where _cluster_=clust);
41398     +            quit;
41399     +            data &HIERds;
41400     +                merge &OUTCLUSTERS &HIERds (
41401     +                    rename=(clust=_cluster_) keep=clust parent level in=P);
41402     +                by _cluster_;
41403     +                clust=_cluster_;
41404     +                drop _cluster_;
41405     +                if P;
41406     +            run;
41407     +        %end;
41409     +        data &hierds;
41410     +            set &hierds(rename=(CLUST=_CLUSTER_) keep=clust FREQ CLUS_DESC PARENT level);
41411     +        run;
41412     +        data &outclusters;
41413     +            set &outclusters;
41414     +            if _rmsstd_ ne .;
41415     +        run;
41417     +        data &outdocs;
41418     +            set &outdocs (drop=_FINALCLUSTER_ _SUBCLUSTER_);
41419     +            label _CLUSTER_=Cluster ID;
41420     +        run;
41422     +    %end;
41424     +   %end_train_cluster:
41426     +       filename temp;
41428     +       %if &tm_debug =0  %then %do;
41429     +          proc sql nowarn noprint;
41430     +              drop table _clusstat;
41431     +              drop table _clusstat2;
41432     +              drop table _fastclusstat;
41433     +              drop table _clustermean;
41434     +              drop table _meandocs;
41435     +              drop table _rmscalc;
41436     +              drop table _rmsse;
41437     +              drop table _meanerr;
41438     +              drop table _tmutildoc;
41439     +              drop table _desc_;
41440     +              drop table _terms_;
41441     +              drop table _docs_;
41442     +              drop table _tmout_;
41443     +           quit;
41444     +       %end;
41447     +%mend;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tm_apply_tmutil.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TM_APPLY_TMUTIL.SOURCE입니다.
41449     + /*****************************************************************
41450     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
41451     + *
41452     + * Name:             tm_apply_tmutil.sas
41453     + * Support:          rualbr Russell Albright
41454     + * Product:
41455     + * Language:         Sas
41456     + * Script:
41457     + *
41458     + * Usage:
41459     + *
41460     + * data= out data set from tgparse
41461     + * terms= terms from tgparse
41462     + * offsets=  addoffset data set form tgparse
41463     + * docs=  data set of document id's and potentially target, not required unless target weighting is used.
41464     + * keepdocs= list of docs to keep. This is a subset of the original docs data set. Not required.
41465     + * reduceF=defaults to log(n) if not specified, eliminates terms if not in at least that many docs
41466     + *     use reduceF=1 to retain all terms.
41467     + * termweight= none, entropy, mi,
41468     + * cellweight= none, log, bin,
41469     + * synnum= Input synonym data set of _termnum_, parent ID pairs
41470     + * synchar= Input synonym data set of term,termrole, parent, parentrole. This data set will
41471     + * get converted to synnym format by the macro tm_convert_syns.
41472     + * targetvar= name of variable on doc dataset contining targetvar.
41473     + * outdata= output out dataset with no more children on this dataset
41474     + * outterms= output terms dataset with dup terms eliminated
41475     + * outweights= weight vector for the terms
41476     + * outoffsets= subsetted outtable with childterms replaced with parents
41477     + * applyweight = , indicates if the weight settings are to be applied to the output OUT table. 0 no, 1 yes.
41478     + * memloc= string for tmutil to use to store its memory pointer. Normally the default can just be used.
41479     + * keeponly=Y  If set to Y (default), then only kept terms are output in terms table.
41480     + *
41481     + * Purpose: Massage the out and key from docparse so that they can bes used
41482     + * in data mining applications.
41483     + *
41484     + * History:
41485     + *
41486     + * Notes:
41487     + *
41488     + * Last Modified By:
41489     + * Last Modified On: Tue Mar 05 16:32:57 2013
41490     + *
41491     + * End
41492     + * ************************************************************** */
41495     +%macro tm_apply_tmutil(data=, terms=,docs=,offsets=,keepdocs=,termweight=none,
41496     +                            cellweight=none,reduceF=,outdata=,outterms=,outweights=,
41497     +                            outoffsets=, synnum=,synchar=, targetvar=, applyweight = 0,
41498     +                            memloc=tmutil_loc,keeponly=Y,repOnly=N);
41499     +     %local keepdocs tempF reduceF synnum  terms  paraExist sentExist;
41502     +    %let EMEXCEPTIONSTRING=;
41503     +    %let syscc=0;
41504     +    %let systmutil=0;
41508     +    /* Find terms to drop */
41509     +        %if &keepdocs ne %then %do;
41510     +          proc sql noprint;
41511     +                create view _keepdata as
41512     +                select * from &data where _DOCUMENT_ in
41513     +                (select _DOCUMENT_ from &keepdocs);
41514     +          quit;
41515     +        %end;
41516     +          %else %do;
41518     +             proc sql noprint;
41519     +                 create view _keepdata as
41520     +                 select * from &data;
41521     +             quit;
41523     +           %let keepdocs=&docs;
41524     +        %end;
41527     +    /* set default on reduceF*/
41528     +         %if &reduceF = %then %do;
41529     +            proc sql noprint;
41530     +           select count(*) into :numdocs from &docs;
41531     +        quit;
41532     +        %let tempF = %sysfunc(log10(%eval(&numdocs+1)));
41533     +        %let reduceF= %sysfunc(floor(&tempF));
41534     +         %end;
41537     +    /* find synnum if synchar supplied */
41539     +    %if &synchar ne %then %do;
41540     +            filename temp catalog 'sashelp.emtxtext.tm_convert_syns.source';
41541     +            %include temp;
41542     +            %tm_convert_syns(insyns= &synchar, outsyns=_myOutsyns ,
41543     +                         interms=&terms,
41544     +                          outterms=newterms );
41545     +                %let numsyns=0;
41546     +                proc sql;
41547     +                   select count(*) into: numsyns
41548     +                   from _myOutsyns;
41549     +                quit;
41550     +                %if &numsyns >0 %then %do;
41551     +                   %Let synnum=_myOutsyns;
41552     +                   %let terms=newterms;
41553     +                %end;
41554     +    %end;
41555     +    /* get the out and key in the proper format*/
41556     +    proc tmutil data=_keepdata key= &terms doc=&keepdocs
41557     +        %if &targetvar ne %then target=&targetvar;
41558     +        ;
41559     +        control init memloc="&memloc";
41560     +            %if &synnum ne %then syn syndata=&synnum force;
41561     +         ;
41562     +    run;
41563     +    %if &syscc >4 %then %goto end_tm_apply_tmutil;
41564     +    %if &reduceF>1 %then %do;
41565     +           proc tmutil;
41566     +           control memloc="&memloc";
41567     +               select reduceF=&reduceF;
41568     +        run;
41569     +   %end;
41570     +    %if &syscc >4 %then %goto end_tm_apply_tmutil;
41572     +     proc tmutil;
41573     +        control memloc="&memloc" release;
41574     +        weight termwgt=&termweight cellwgt=&cellweight;
41575     +            output key=_termstmutil  keyformat=default
41576     +               %if &keeponly eq Y %then keeponly;
41577     +               %if &applyweight  eq 0 %then unweighted ;
41578     +               out=&outdata;
41579     +    run;
41580     +    %if &syscc >4 %then %goto end_tm_apply_tmutil;
41582     +    proc sql noprint;
41583     +           create table _distinctterms as
41584     +           select distinct key,term, role, attribute
41585     +           from &terms;
41587     +       create table &outterms as
41588     +       select  b.term, b.role,b.attribute ,a.*
41589     +       from _termstmutil a left join  _distinctterms b
41590     +       on a.key=b.key;
41591     +       ;
41592     +       %if &outweights ne %then %do;
41593     +          create table &outweights as
41594     +          select distinct a.key as index, a.weight as gwgt
41595     +          from &outterms(where=(_ispar in('+',' '))) a inner join
41596     +                         _distinctterms b
41597     +          on a.key =b.key;
41598     +       %end;
41600     +     quit;
41601     +     %if &offsets ne and &outoffsets ne %then %do;
41603     +        %let paraExist=0; %let sentExist=0;
41604     +        data _null_;
41605     +          dsid=open("&offsets");
41606     +          para=varnum(dsid,'_paragraph_');
41607     +          sent=varnum(dsid,'_sentence_');
41608     +          if para ge 1 then call symput('paraExist',1);
41609     +          if sent ge 1 then call symput('sentExist',1);
41610     +          run;
41613     +        proc sql noprint;
41614     +        create table &outoffsets as
41615     +           select  a._document_,
41616     +              %if &paraExist=1 %then a._paragraph_, ;
41617     +              %if &sentExist=1 %then a._sentence_,;
41618     +              a._offset_, a._length_, b.parent_id as _termnum_
41619     +                 from &offsets a, _termstmutil (where=(_ispar ne "+" and keep="Y")) b
41620     +                 where a._termnum_ = b.key;
41621     +              quit;
41622     +       %end;
41626     +     %end_tm_apply_tmutil:
41628     +     %if ^%symexist(tm_debug) %then %let tm_debug=0;
41629     +       %if &tm_debug =0  %then %do;
41630     +          proc sql noprint;
41631     +            drop table _termstmutil;
41632     +            drop table _distinctterms;
41633     +            drop view _keepdata;
41634     +            %if &synchar ne and &synnum ne  %then drop table &synnum; ;
41635     +         quit;
41636     +     %end;
41637     +     %if &syscc >4 and &systmutil > 4 %then %do;
41638     +           %let EMEXCEPTIONSTRING = EMTOOL.TMUTIL,&systmutil;
41639     +           %put emexceptionstring= "&EMEXCEPTIONSTRING";
41640     +           %let syscc=0;
41641     +     %end;
41643     +%mend;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tm_svd_do_samp.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TM_SVD_DO_SAMP.SOURCE입니다.
41645     +   /* ****************************************************************
41646     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
41647     + *
41648     + * Name:             tm_svd_do_samp.sas
41649     + * Product:
41650     + * Language:         Sas
41651     + * Script:
41652     + *
41653     + * Usage:
41654     + *
41655     + * data=out dataset containing only repreentative terms
41656     + * maxK= max number of dimensions to use to computer svd
41657     + * res=<high, med, low> guidenceon what number of dims to choose
41658     + * cellwgt= <none, log, binary>
41659     + * in_global= dataset with index, weight variables
41660     + * rowVar= name of the variable representing row(term)
41661     + * colVar= name of the variable representing col
41662     + * entryVar=count for row,col
41663     + * u= name of output u matrix
41664     + * v= name of output v matrix
41665     + * s= name of output s matrix
41666     + * colpro=dataset to hold projections for terms
41667     + * rowpro= datset to hold projections for docs
41668     + * normcol=<normcol> extra option to add to normalize docs
41669     + * normrow=<normrow> extra option to add to normalize terms
41670     + * docs =<document data set of ids that are being analyzed.
41671     +*      docs needs to be input explicit since some docs may have not terms
41672     + *
41673     + * Purpose: macro to run svd and compute projections, first without mpling
41674     + * and then with sampling onon.
41675     + *
41676     + * History:
41677     + *
41678     + * Notes:
41679     + *
41680     + * Last Modified By:
41681     + * Last Modified On: Thu Jan 08 17:22:43 2009
41682     + *
41683     + * End
41684     + * ************************************************************** */
41685     +%macro tm_svd_do_samp(data=,docs=,maxK=,res=,cellwgt=,in_global=,
41686     +                     rowVar=,colVar=,entryVar=,u=,v=,s=,
41687     +                     colpro=,rowpro=,normcol=, normrow=,prefix=SVD);
41689     +   %local svdkeep;
41690     +   %let syscc=0;
41691     +   proc sort data=&data; by _termnum_; run;
41693     +   proc spsvd data=&data max_k = &maxK res = &res
41694     +       local = &cellWgt global =none in_global = &in_global;
41695     +       row _termnum_;
41696     +       col _document_;
41697     +       entry _count_;
41698     +       output  u = &U v = &V s = &s;
41699     +   run;
41701     +   /*try sampling if out of memory occurred*/
41702     +   %if(&syscc eq 1111) %then %do;
41703     +      %let syscc=0; /*reset syscc*/
41704     +      proc spsvd data = &data max_k = &maxK res = &res
41705     +          local = &cellWgt global = none in_global = &in_global ;
41706     +          row &rowVar;
41707     +          col &colVar;
41708     +          entry &entryVar;
41709     +          output u = &U v = &V s = &s;
41710     +          sample allow;
41711     +      run;
41712     +   %end;
41713     +    %if &syscc > 4 %then %do;
41714     +       %let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
41715     +       %goto end_svd_do_samp;
41716     +    %end;
41719     +   /* if resolution is used, the matrix U/V must be truncated to the set number of dim.*/
41720     +   proc sql noprint;
41721     +       select count(*) into: svdkeep
41722     +       from &s
41723     +       where keep=1;
41724     +    quit;
41726     +    %let svdkeep=%left(&svdkeep);
41727     +    data &U;
41728     +    set &U(keep= index col1-col&svdkeep);
41729     +    run;
41731     +    data &V;
41732     +    set &V(keep= index col1-col&svdkeep);
41733     +    run;
41734     +    %if &colpro ne %then %do;
41735     +       /* when sampling weights may have wrong dimensions*/
41736     +       proc sql noprint;
41737     +          create table new_global as
41738     +             select a.*
41739     +             from &in_global a, &U b
41740     +             where a.index = b.index;
41741     +       quit;
41744     +        proc sort data=&data; by &colVar; run;
41745     +        proc spsvd data=&data IN_U=&U
41746     +            local = &cellWgt global = none in_global = new_global ;
41747     +            row &rowVar;
41748     +            col &colVar;
41749     +            entry &entryVar;
41750     +            output colpro=&colpro bigpro normcol prefix="&prefix._SVD";
41751     +        run;
41753     +        proc sort data=&docs(keep=_document_)  out=_docids;
41754     +        by _document_;
41755     +        run;
41757     +        data &colpro;
41758     +           merge &colpro _docids(rename=(_document_=index));
41759     +        by index;
41760     +        run;
41763     +        data &colpro;
41764     +          set  &colpro;
41765     +          array svd_array &prefix._SVD1 - &prefix._SVD&SVDKEEP;
41766     +          do i = 1 to dim(svd_array);
41767     +             if svd_array(i)=. then svd_array(i)=0;
41768     +          end;
41769     +          drop i;
41770     +        run;
41771     +    %end;
41773     +    %if &syscc > 4 %then %do;
41774     +       %let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
41775     +       %goto end_svd_do_samp;
41776     +    %end;
41778     +    %if &rowpro ne %then %do;
41779     +        proc sort data=&data; by &rowVar; run;
41780     +        /* when sampling weights may have wrong dimensions*/
41781     +       proc sql;
41782     +          create table new_global as
41783     +             select a.*
41784     +             from &in_global a, &U b
41785     +             where a.index = b.index;
41786     +       quit;
41788     +        proc spsvd data=&data IN_V=&V
41789     +            local = &cellWgt global = none in_global = new_global ;
41790     +            row &rowVar; col &colVar; entry &entryVar;
41791     +            output wordPro = &rowpro bigpro normrow prefix="&prefix._SVD";
41792     +        run;
41793     +    %end;
41795     +    %if &syscc > 4 %then %do;
41796     +       %let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
41797     +       %goto end_svd_do_samp;
41798     +    %end;
41800     +   %end_svd_do_samp:
41802     +%mend;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP을(를) 삭제했습니다.
MPRINT(TM_GET_LAST_FILTER):   * find last filter or text parse node if no filter node. ;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select data into :last_parse_node from EMWS5.TextFilter_EMINFO where key="LastTextParsing";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_filter_node from EMWS5.TextFilter_EMINFO where key="LastTextFilter";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_prescore_node from EMWS5.TextFilter_EMINFO where kupcase(key)="PRESCORECODE";
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_GET_LAST_FILTER):   * Check to make sure parse variable is present and still exists;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select parsevar into :parsevar from EMWS5.TextFilter_tmconfig;
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TM_GET_LAST_FILTER):   *check for dropped parsevar on input dataset;
MPRINT(TM_GET_LAST_FILTER):   data _null_;
MPRINT(TM_GET_LAST_FILTER):   set EMWS5.TextCluster_VariableSet(where=(kupcase(NAME)="REVIEW" and USE in('Y' 'D')));
MPRINT(TM_GET_LAST_FILTER):   if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
MPRINT(TM_GET_LAST_FILTER):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_VARIABLESET.에서 읽었습니다.
      WHERE (KUPCASE(NAME)='REVIEW') and USE in ('D', 'Y');
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS5.TextCluster_last_tm_nodes;
MPRINT(TRAIN):   set EMWS5.TextFilter_EMINFO;
MPRINT(TRAIN):   run;

NOTE: 6개의 관측값을 데이터셋 EMWS5.TEXTFILTER_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_LAST_TM_NODES은(는) 6개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   set EMWS5.TextCluster_VariableSet(where=(ROLE='TARGET' and USE in('Y' 'D') and LEVEL ne 'INTERVAL'));
MPRINT(TRAIN):   if _N_=1 then call symput('targetvar', strip(NAME));
MPRINT(TRAIN):   run;

NOTE: 0개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_VARIABLESET.에서 읽었습니다.
      WHERE (ROLE='TARGET') and USE in ('D', 'Y') and (LEVEL not = 'INTERVAL');
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   create table EMWS5.TextCluster_tmconfig as select * from EMWS5.TextFilter_tmconfig;
NOTE: Table EMWS5.TEXTCLUSTER_TMCONFIG created, with 1 rows and 29 columns.

MPRINT(TRAIN):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   select cellwgt into: _cellweight from EMWS5.TextCluster_tmconfig;
MPRINT(TRAIN):   select termwgt into: _termwgt from EMWS5.TextCluster_tmconfig;
MPRINT(TRAIN):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):   data _keepdocs (keep=_DOCUMENT_ );
MPRINT(TRAIN):   set EMWS5.TextFilter_TRAIN;
MPRINT(TRAIN):   run;

NOTE: 500개의 관측값을 데이터셋 EMWS5.TEXTPARSING_TRAIN.에서 읽었습니다.
NOTE: 500개의 관측값을 데이터셋 EMWS5.TEXTFILTER_DOC_IDS.에서 읽었습니다.
NOTE: 500개의 관측값을 데이터셋 EMWS5.TEXTFILTER_TRAIN.에서 읽었습니다.
NOTE: 데이터셋 WORK._KEEPDOCS은(는) 500개의 관측값과 1개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.08 초
      cpu 시간            0.07 초
      

MPRINT(TM_APPLY_TMUTIL):   proc sql noprint;
MPRINT(TM_APPLY_TMUTIL):   create view _keepdata as select * from EMWS5.TextFilter_tmout where _DOCUMENT_ in (select _DOCUMENT_ from _keepdocs);
NOTE: SQL view WORK._KEEPDATA has been defined.
MPRINT(TM_APPLY_TMUTIL):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_APPLY_TMUTIL):   proc tmutil data=_keepdata key= EMWS5.TextFilter_terms doc=_keepdocs ;
MPRINT(TM_APPLY_TMUTIL):   control init memloc="_tmmem";
MPRINT(TM_APPLY_TMUTIL):   ;
MPRINT(TM_APPLY_TMUTIL):   run;

WARNING:  The input DOC data set contained documents numbered larger than those on the input DATA data set.
NOTE: 3627개의 관측값을 데이터셋 EMWS5.TEXTFILTER_TMOUT.에서 읽었습니다.
NOTE: 499개의 관측값을 데이터셋 WORK._KEEPDOCS.에서 읽었습니다.
NOTE: 3627개의 관측값을 데이터셋 WORK._KEEPDATA.에서 읽었습니다.
NOTE: 1659개의 관측값을 데이터셋 EMWS5.TEXTFILTER_TERMS_DATA.에서 읽었습니다.
      WHERE KEEP='Y';
NOTE: 1660개의 관측값을 데이터셋 EMWS5.TEXTFILTER_TERM_STRINGS.에서 읽었습니다.
NOTE: 500개의 관측값을 데이터셋 WORK._KEEPDOCS.에서 읽었습니다.
NOTE: 프로시저 TMUTIL 실행(총 프로세스 시간):
      실행 시간           0.16 초
      cpu 시간            0.12 초
      

MPRINT(TM_APPLY_TMUTIL):   proc tmutil;
MPRINT(TM_APPLY_TMUTIL):   control memloc="_tmmem";
MPRINT(TM_APPLY_TMUTIL):   select reduceF=2;
MPRINT(TM_APPLY_TMUTIL):   run;

NOTE: 프로시저 TMUTIL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TM_APPLY_TMUTIL):   proc tmutil;
MPRINT(TM_APPLY_TMUTIL):   control memloc="_tmmem" release;
MPRINT(TM_APPLY_TMUTIL):   weight termwgt=ENTROPY cellwgt=LOG;
MPRINT(TM_APPLY_TMUTIL):   output key=_termstmutil keyformat=default keeponly unweighted out=_outtmutil_;
MPRINT(TM_APPLY_TMUTIL):   run;

NOTE: 데이터셋 WORK._TERMSTMUTIL은(는) 485개의 관측값과 8개의 변수를 가지고 있습니다.
NOTE: 데이터셋 WORK._OUTTMUTIL_은(는) 2453개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 TMUTIL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TM_APPLY_TMUTIL):   proc sql noprint;
MPRINT(TM_APPLY_TMUTIL):   create table _distinctterms as select distinct key,term, role, attribute from EMWS5.TextFilter_terms;
NOTE: Table WORK._DISTINCTTERMS created, with 1659 rows and 4 columns.

MPRINT(TM_APPLY_TMUTIL):   create table _newkey as select b.term, b.role,b.attribute ,a.* from _termstmutil a left join _distinctterms b on a.key=b.key;
NOTE: Table WORK._NEWKEY created, with 485 rows and 11 columns.

MPRINT(TM_APPLY_TMUTIL):   ;
MPRINT(TM_APPLY_TMUTIL):   create table _weights as select distinct a.key as index, a.weight as gwgt from _newkey(where=(_ispar in('+',' '))) a inner join _distinctterms b on a.key =b.key;
NOTE: Table WORK._WEIGHTS created, with 485 rows and 2 columns.

MPRINT(TM_APPLY_TMUTIL):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.15 초
      cpu 시간            0.15 초
      

MPRINT(TRAIN):  ;
MPRINT(TM_SVD_DO_SAMP):   proc sort data=_outtmutil_;
MPRINT(TM_SVD_DO_SAMP):   by _termnum_;
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: 2453개의 관측값을 데이터셋 WORK._OUTTMUTIL_.에서 읽었습니다.
NOTE: 데이터셋 WORK._OUTTMUTIL_은(는) 2453개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_SVD_DO_SAMP):   proc spsvd data=_outtmutil_ max_k = 100 res = LOW local = LOG global =none in_global = _weights;
MPRINT(TM_SVD_DO_SAMP):   row _termnum_;
MPRINT(TM_SVD_DO_SAMP):   col _document_;
MPRINT(TM_SVD_DO_SAMP):   entry _count_;
MPRINT(TM_SVD_DO_SAMP):   output u = EMWS5.TextCluster_svd_u v = _svdv s = EMWS5.TextCluster_svd_s;
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: P has been set to 25.
NOTE: Restart 1, Converged 39
NOTE: Restart 2, Converged 54
NOTE: Restart 3, Converged 67
NOTE: Restart 4, Converged 85
NOTE: Restart 5, Converged 98
NOTE: Singular values have converged.  Creating data sets.
NOTE: Restarted 5 times.
NOTE: Using value of 45 for K.
NOTE: 2453개의 관측값을 데이터셋 WORK._OUTTMUTIL_.에서 읽었습니다.
NOTE: 485개의 관측값을 데이터셋 WORK._WEIGHTS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_SVD_U은(는) 485개의 관측값과 101개의 변수를 가지고 있습니다.
NOTE: 데이터셋 WORK._SVDV은(는) 430개의 관측값과 101개의 변수를 가지고 있습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_SVD_S은(는) 100개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: 프로시저 SPSVD 실행(총 프로세스 시간):
      실행 시간           0.38 초
      cpu 시간            0.37 초
      

MPRINT(TM_SVD_DO_SAMP):   proc sql noprint;
MPRINT(TM_SVD_DO_SAMP):   select count(*) into: svdkeep from EMWS5.TextCluster_svd_s where keep=1;
MPRINT(TM_SVD_DO_SAMP):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TM_SVD_DO_SAMP):   data EMWS5.TextCluster_svd_u;
MPRINT(TM_SVD_DO_SAMP):   set EMWS5.TextCluster_svd_u(keep= index col1-col45);
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: 485개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_SVD_U.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_SVD_U은(는) 485개의 관측값과 46개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_SVD_DO_SAMP):   data _svdv;
MPRINT(TM_SVD_DO_SAMP):   set _svdv(keep= index col1-col45);
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: 430개의 관측값을 데이터셋 WORK._SVDV.에서 읽었습니다.
NOTE: 데이터셋 WORK._SVDV은(는) 430개의 관측값과 46개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_SVD_DO_SAMP):   proc sql noprint;
MPRINT(TM_SVD_DO_SAMP):   create table new_global as select a.* from _weights a, EMWS5.TextCluster_svd_u b where a.index = b.index;
NOTE: Table WORK.NEW_GLOBAL created, with 485 rows and 2 columns.

MPRINT(TM_SVD_DO_SAMP):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TM_SVD_DO_SAMP):   proc sort data=_outtmutil_;
MPRINT(TM_SVD_DO_SAMP):   by _document_;
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: 2453개의 관측값을 데이터셋 WORK._OUTTMUTIL_.에서 읽었습니다.
NOTE: 데이터셋 WORK._OUTTMUTIL_은(는) 2453개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_SVD_DO_SAMP):   proc spsvd data=_outtmutil_ IN_U=EMWS5.TextCluster_svd_u local = LOG global = none in_global = new_global ;
MPRINT(TM_SVD_DO_SAMP):   row _termnum_;
MPRINT(TM_SVD_DO_SAMP):   col _document_;
MPRINT(TM_SVD_DO_SAMP):   entry _count_;
MPRINT(TM_SVD_DO_SAMP):   output colpro=_svdcolpro bigpro normcol prefix="TextCluster_SVD";
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: 2453개의 관측값을 데이터셋 WORK._OUTTMUTIL_.에서 읽었습니다.
NOTE: 485개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_SVD_U.에서 읽었습니다.
NOTE: 485개의 관측값을 데이터셋 WORK.NEW_GLOBAL.에서 읽었습니다.
NOTE: 데이터셋 WORK._SVDCOLPRO은(는) 430개의 관측값과 46개의 변수를 가지고 있습니다.
NOTE: 프로시저 SPSVD 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_SVD_DO_SAMP):   proc sort data=_keepdocs(keep=_document_) out=_docids;
MPRINT(TM_SVD_DO_SAMP):   by _document_;
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: 500개의 관측값을 데이터셋 WORK._KEEPDOCS.에서 읽었습니다.
NOTE: 데이터셋 WORK._DOCIDS은(는) 500개의 관측값과 1개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_SVD_DO_SAMP):   data _svdcolpro;
MPRINT(TM_SVD_DO_SAMP):   merge _svdcolpro _docids(rename=(_document_=index));
MPRINT(TM_SVD_DO_SAMP):   by index;
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: 430개의 관측값을 데이터셋 WORK._SVDCOLPRO.에서 읽었습니다.
NOTE: 500개의 관측값을 데이터셋 WORK._DOCIDS.에서 읽었습니다.
NOTE: 데이터셋 WORK._SVDCOLPRO은(는) 500개의 관측값과 46개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_SVD_DO_SAMP):   data _svdcolpro;
MPRINT(TM_SVD_DO_SAMP):   set _svdcolpro;
MPRINT(TM_SVD_DO_SAMP):   array svd_array TextCluster_SVD1 - TextCluster_SVD45;
MPRINT(TM_SVD_DO_SAMP):   do i = 1 to dim(svd_array);
MPRINT(TM_SVD_DO_SAMP):   if svd_array(i)=. then svd_array(i)=0;
MPRINT(TM_SVD_DO_SAMP):   end;
MPRINT(TM_SVD_DO_SAMP):   drop i;
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: 500개의 관측값을 데이터셋 WORK._SVDCOLPRO.에서 읽었습니다.
NOTE: 데이터셋 WORK._SVDCOLPRO은(는) 500개의 관측값과 46개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_SVD_DO_SAMP):   proc sort data=_outtmutil_;
MPRINT(TM_SVD_DO_SAMP):   by _termnum_;
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: 2453개의 관측값을 데이터셋 WORK._OUTTMUTIL_.에서 읽었습니다.
NOTE: 데이터셋 WORK._OUTTMUTIL_은(는) 2453개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
SAS 시스템

      

MPRINT(TM_SVD_DO_SAMP):   proc sql;
MPRINT(TM_SVD_DO_SAMP):   create table new_global as select a.* from _weights a, EMWS5.TextCluster_svd_u b where a.index = b.index;
NOTE: Table WORK.NEW_GLOBAL created, with 485 rows and 2 columns.

MPRINT(TM_SVD_DO_SAMP):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TM_SVD_DO_SAMP):   proc spsvd data=_outtmutil_ IN_V=_svdv local = LOG global = none in_global = new_global ;
MPRINT(TM_SVD_DO_SAMP):   row _termnum_;
MPRINT(TM_SVD_DO_SAMP):   col _document_;
MPRINT(TM_SVD_DO_SAMP):   entry _count_;
MPRINT(TM_SVD_DO_SAMP):   output wordPro = _svdrowpro bigpro normrow prefix="TextCluster_SVD";
MPRINT(TM_SVD_DO_SAMP):   run;

NOTE: 2453개의 관측값을 데이터셋 WORK._OUTTMUTIL_.에서 읽었습니다.
NOTE: 430개의 관측값을 데이터셋 WORK._SVDV.에서 읽었습니다.
NOTE: 485개의 관측값을 데이터셋 WORK.NEW_GLOBAL.에서 읽었습니다.
NOTE: 데이터셋 WORK._SVDROWPRO은(는) 485개의 관측값과 46개의 변수를 가지고 있습니다.
NOTE: 프로시저 SPSVD 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   create table EMWS5.TextCluster_terms(drop=index) as select a.*,b.* from EMWS5.TextFilter_terms a left join _svdrowpro b on a.key = b.index;
NOTE: Table EMWS5.TEXTCLUSTER_TERMS created, with 1659 rows and 58 columns.

MPRINT(TRAIN):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.08 초
      cpu 시간            0.06 초
      

MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmgetncl.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTEXT.TMGETNCL.SOURCE입니다.
41805     +
41806     + /*
41807     +  Macro:   tmgetncl.sas
41808     +  Purpose: To obtain a default number of clusters
41809     +  Syntax:  %tmgetncl(data=, maxclusters=, vars=);
41810     +
41811     +  Required Parameters:  data=      The input data set.
41812     +
41813     +  Optional Parameters:  vars=      Variables to be used
41814     +
41815     +  History:
41816     +  2001/01/23 - Bill Wheeler - Initial Coding.
41817     +
41818     +*/
41819     + %MACRO tmgetncl(data=, maxclusters=, vars=, tempDS=,
41820     +                 clusDS=, threads=THREADS);
41821     +
41822     +  %if &maxclusters= %then %let maxclusters = 40;
41823     +
41824     +  %if &vars ^= %then %let var = var &vars;
41825     +  %else %let var = ;
41826     +
41827     +  /* run PROC FASTCLUS with maxClusters clusters */
41828     +  proc fastclus data = &data noprint
41829     +    maxclusters = &maxclusters
41830     +    mean = &tempDS;
41831     +    &var
41832     +    ;
41833     +    run;
41834     +
41835     +  /* use PROC CLUSTER with the MEAN data set from FASTCLUS */
41836     +  proc cluster data = &tempDS
41837     +    method = WARD
41838     +    pseudo
41839     +    noprint
41840     +    outtree = &tempDS;
41841     +    &var;
41842     +  run;
41843     +
41844     +  %if (&SYSERR > 4) %then %do;
41845     +    data &clusDS; nclus = 0; run;
41846     +    %goto exit;
41847     +  %end;
41848     +
41849     +  /* sort and get rid of missing values in the outtree data set */
41850     +  %tmsort(data=&tempDS(where=(_ccc_ > -99999.0) keep = _ncl_ _ccc_),
41851     +        out=&tempDS, by=_ncl_, options=, threads=&threads);
41852     +
41853     +  data &clusDS; set &tempDS;
41854     +    keep nclus;
41855     +    retain loclclus -1 loclccc 0 maxccc 0 maxclus 0
41856     +   jclus -1 maxjump -1 nclus 0 jccc 0 prevjump 0 jump 0 occc 0 oncl 0;
41857     +
41858     +   if _N_ = 1 then do;
41859     +     maxccc = _ccc_;
41860     +     maxclus = _ncl_;
41861     +     nclus = _ncl_;
41862     +     occc = _ccc_;
41863     +     oncl = _ncl_;
41864     +   end;
41865     +   else if (_N_ = 2) then do;
41866     +     jump = _ccc_ - occc;
41867     +     if (jump > 0) then do;
41868     +       maxjump = jump;
41869     +       jclus = _ncl_;
41870     +     end;
41871     +     if (_ccc_ > maxccc) then do;
41872     +       maxccc = _ccc_;
41873     +       maxclus = _ncl_;
41874     +     end;
41875     +     occc = _ccc_;
41876     +     oncl = _ncl_;
41877     +   end;
41878     +
41879     +   else if (_N_ > 2) then do;
41880     +     prevjump = jump;
41881     +     jump = _ccc_ - occc;
41882     +
41883     +     if ((prevjump > 0) & (jump < 0) & (loclclus < 0)) then do;
41884     +        loclclus = oncl;
41885     +        loclccc = occc;
41886     +     end;
41887     +     if (_ccc_ > maxccc) then do;
41888     +       maxccc = _ccc_;
41889     +       maxclus = _ncl_;
41890     +     end;
41891     +     if ((jump > 0) & (jump > maxjump)) then do;
41892     +       jclus = _ncl_;
41893     +       maxjump = jump;
41894     +       jccc = _ccc_;
41895     +     end;
41896     +
41897     +     occc = _ccc_;
41898     +     oncl = _ncl_;
41899     +
41900     +     if ((loclclus > 0) & (jclus > 0)) then nclus = MIN(loclclus, jclus);
41901     +     else if (loclclus > 0) then nclus = loclclus;
41902     +     else if (jclus > 0) then nclus = jclus;
41903     +     else nclus = maxclus;
41904     +   end;
41905     +  run;
41906     +
41907     +  %exit: ;
41908     +
41909     +%MEND tmgetncl;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmfast.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTEXT.TMFAST.SOURCE입니다.
41910     + /*
41911     +
41912     +  Macro:   tmfast.sas
41913     +  Purpose: Call proc fastclus with given defaults and parameters.
41914     +  Syntax:  %tmfast(data=, clusters=, outstat=, vars=);
41915     +
41916     +  Required Parameters:  data=      The input data set.
41917     +                        clusters=  The maximum number of clusters
41918     +
41919     +  Optional Parameters:  vars=      Variables to be used
41920     +                        outstat=   The name of the OUTSTAT data set
41921     +                        outseed=   The name of the OUTSEED data set
41922     +
41923     +  Either outstat or outseed mut be given, but not both.
41924     +  History:
41925     +  2001/01/16 - Bill Wheeler - Initial Coding.
41926     +
41927     +*/
41928     +%MACRO tmfast(data=, clusters=, outstat=, outseed=,
41929     +                 id=, out=, vars=);
41930     + /* defaults */
41931     + %if (&id ne ) %then %let id = id &id;
41932     + %if (&out ne ) %then %let out = out = &out;
41933     + %if (&vars ne ) %then %let var = var &vars;
41934     + %else %let var = ;
41935     +
41936     + %if &outseed= %then
41937     + %do;
41938     +   proc fastclus data = &data
41939     +   maxclusters = &clusters noprint
41940     +   outstat = &outstat &out;
41941     +   &var;
41942     +   &id;
41943     + %end;
41944     + %else
41945     + %do;
41946     +   proc fastclus data = &data
41947     +   maxclusters = &clusters noprint
41948     +   outseed = &outseed &out;
41949     +   &var;
41950     +   &id;
41951     + %end;
41952     +%MEND tmfast;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmemclus.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTEXT.TMEMCLUS.SOURCE입니다.
41953     +
41954     + /*
41955     +
41956     +  Macro:   tmemclus.sas
41957     +  Purpose: Call proc emclus with given defaults and parameters.
41958     +  Syntax:  %tmemclus(data=, role=, clusters=, seed=,
41959     +                   outstat=, out=, vars=, cov=, iter=, secclus=,
41960     +                   seciter=, min=, method=, eps=, init=, print=,
41961     +                   p=, outliers=, decvar=, initstd=, dist=,
41962     +                   secstd=, nobs=, threads=);
41963     +  Required Parameters:  data=      The input data set.
41964     +                        role=      Train or score
41965     +                        clusters=  The number of primary clusters
41966     +
41967     +  Optional Parameters:  vars=      Variables to be used
41968     +                   cov=       Type of covariance matrix
41969     +                   iter=      Number of EM iterations
41970     +                   secclus    Number of secondary clusters
41971     +                   seciter    Number of k-means iterations
41972     +                   min=       Minimum number of obs in a cluster
41973     +                   method=    Standard or scaled
41974     +                   eps=       Stopping tolerance
41975     +                   init=      Random, Fastclus, or Emclus
41976     +                   print=     All, last, or none
41977     +                   p=
41978     +                   outliers=  Keep, cluster, or ignore
41979     +                   outstat=   Name of OUTSTAT data set
41980     +                   out=       Name of OUT data set
41981     +                   seed=      Name of SEED data set
41982     +                   decvar=    Proportion to decrease variances
41983     +                   initstd=   Initial standard deviation
41984     +                   dist=      Minimum distance between clusters
41985     +                   secstd=    Secondary cluster max std dev.
41986     +                   nobs=      Number of obs read in each iteration
41987     +  History:
41988     +  2001/01/16 - Bill Wheeler - Initial Coding.
41989     +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
41990     +*/
41991     +%MACRO tmemclus(data=, role=, clusters=, seed=,
41992     + outstat=, out=, vars=, cov=, iter=, secclus=,
41993     + seciter=, min=, method=, eps=, init=, print=,
41994     + p=, outliers=, decvar=, initstd=, dist=, secstd=, nobs=, threads=);
41995     +
41996     + %local saveout saveseed op1 op2 op3 op4;
41997     +
41998     + %LET saveout = &out;
41999     + %LET saveseed = &outstat;
42000     +
42001     + /* defaults */
42002     + %if &role= %then %let role = TRAIN;
42003     + %if &seed ne %then %let seed = seed=&seed;
42004     + %if &vars= %then %let var = ;
42005     + %else %let var = var &vars;
42006     + %if &cov ne %then %let cov = cov = &cov;
42007     + %if &iter ne %then %let iter = iter = &iter;
42008     + %if &init ne %then %let init = init = &init;
42009     + %if &eps ne  %then %let eps = eps = &eps;
42010     + %if &min ne %then %let min = min = &min;
42011     + %if &seciter ne %then %let seciter = seciter = &seciter;
42012     + %if &print ne %then %let print = print = &print;
42013     + %if &p ne %then %let p = p = &p;
42014     + %if &outliers ne %then %let outliers = outliers = &outliers;
42015     + %if &method ne %then %let method = method = &method;
42016     + %if &decvar ne %then %let decvar = decvar = &decvar;
42017     + %if &outstat ne %then %let outstat = outstat = &outstat;
42018     + %if &out ne %then %let out = out = &out;
42019     + %if (&threads >= 0)  %then %let threads = threads = &threads;
42020     + %else %let threads = ;
42021     +
42022     + %LET op1 = ;
42023     + %LET op2 = ;
42024     + %LET op3 = ;
42025     + %LET op4 = ;
42026     + %if ^(&initstd=) %then %let op1 = %str(initstd = &initstd);
42027     + %if ^(&dist=) %then %let op2 = %str(dist = &dist);
42028     + %if ^(&secstd=) %then %let op3 = %str(secstd = &secstd);
42029     + %if ^(&nobs=) %then %let op4 = %str(nobs = &nobs);
42030     +
42031     +
42032     + %IF &SYSVER < 9 %THEN %DO;
42033     +    %LET cov = ;
42034     +    %LET decvar = ;
42035     +    %LET outliers = ;
42036     +    %LET out = ;
42037     + %END;
42038     +
42039     +
42040     + %if %upcase(&role) = TRAIN %then
42041     + %do;
42042     +   proc emclus data = &data
42043     +   clusters = &clusters
42044     +   &seed
42045     +   &outstat
42046     +   &out
42047     +   &init
42048     +   &eps
42049     +   &method
42050     +   &secclus
42051     +   &min
42052     +   &print
42053     +   &outliers
42054     +   &iter
42055     +   &op1 &op2
42056     +   &op3 &op4
42057     +   &decvar
42058     +   &cov
42059     +   &threads
42060     +   ;
42061     +   &var;
42062     + %end;
42063     + %else
42064     +  %do;
42065     +    proc emclus data = &data
42066     +    role = score
42067     +    clusters = &clusters
42068     +    &seed
42069     +    &out
42070     +    &cov
42071     +    ;
42072     +    &var;
42073     +  %end;
42074     +
42075     + %IF &SYSVER < 9 and &saveout ^= %THEN %DO;
42076     +   proc emclus data = &data
42077     +   role = score
42078     +   clusters = &clusters
42079     +   seed = &saveseed
42080     +   &saveout
42081     +   ;
42082     +   &var;
42083     + %END;
42084     +
42085     +
42086     +%MEND tmemclus;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmpred.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTEXT.TMPRED.SOURCE입니다.
42087     +
42088     +/*
42089     +  Macro: tmpred(inds,outds,clusters,type=,ignore=,freqDS=)
42090     +
42091     +  Description: This macro will take output from
42092     +     emclus and generate predicted
42093     +      predicted clusters.
42094     +
42095     +  Parms: inds - input data set, produced by emclus.
42096     +   outds - data set with clusters created by this macro.
42097     +   clusters - number of clusters that should be on this data set
42098     +   type - valid values: 'max' or 'prob'.  Max will just take the
42099     +      cluster with the highest probability as the predicted cluster.
42100     +      In the case of a tie the first cluster with that value will
42101     +       selected.
42102     +      Prob will attempt to select multiple clusters based on
42103     +      how many clusters were requested.  That is if 3 clusters
42104     +      were requested, any cluster with prob>1/3 will be selected
42105     +      as the predicted cluster. THIS OPTION IS UNTESTED.
42106     +*/
42107     +
42108     +%macro tmpred(inds,outds,clusters,type=, ignore=0, freqDS=, compress=1);
42109     +
42110     +  %local _str newfreqDS _flag;
42111     +
42112     +  * set the optional arguments;
42113     +  %if &type= %then %let type=max;
42114     +  %if &ignore = 1 %then %let
42115     +    _str = if _CLUSTER_ = &clusters then _CLUSTER_ = .;
42116     +  %else %let _str = ;
42117     +  %if %str(&freqDS) ^= %str() %then %do;
42118     +   %let newfreqDS = &freqDS(keep=_c1-_c&clusters);
42119     +   %let _flag = 1;
42120     +  %end;
42121     +  %else %let _flag = 0;
42122     +
42123     +  %if &compress = 1 %then %let compress = compress=Y;
42124     +  %else %let compress = ;
42125     +
42126     +  data &outds(&compress drop=_c1-_c&clusters)
42127     +    %if &_flag = 1 %then %do;
42128     +    &newfreqDS
42129     +    %end;
42130     +    ;
42131     +    set &inds end=eof;
42132     +   * array for holding all probabilities;
42133     +    array _p prob1--prob&clusters;
42134     +    array _c(&clusters);
42135     +    retain _c 0;
42136     +   * get rid of working columns;
42137     +    drop _max_ _i /*prob1--prob&clusters*/ _WARN_;
42138     +    /* keep the largest probability and the cluster */
42139     +    _max_ = 0;
42140     +    do _i = 1 to &clusters;
42141     +      if _p(_i) > _max_ then do;
42142     +        _max_ = _p(_i);
42143     +        _CLUSTER_ = _i;
42144     +      end;
42145     +    end;
42146     +    if (_CLUSTER_ >= 1) and (_CLUSTER_ <= &clusters) then
42147     +      _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
42148     +    else _CLUSTER_ = .;
42149     +    &_str;
42150     +    %if &_flag = 1 %then %do;
42151     +      if eof then do;
42152     +        output &freqDS;
42153     +                output &outDS;
42154     +          end;
42155     +          else output &outDS;
42156     +        %end;
42157     +
42158     +    run;
42159     +%mend tmpred;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmsort.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTEXT.TMSORT.SOURCE입니다.
42160     + /*
42161     +PROC SORT macro
42162     +
42163     +%tmsort(data=, out=, by=);
42164     +
42165     +data=      - name of input data set (outtree data set from PROC CLUSTER)
42166     +out=       - name of the output data set
42167     +by=        - by statement
42168     +options=   - proc options
42169     +*/
42170     +
42171     +%macro tmsort(data=, out=, by=, options=, threads=THREADS);
42172     +  %if %BQUOTE(&out) ^= %then %let out = out =  &out;
42173     +  %if &SYSVER < 9 %then %let threads = ;
42174     +
42175     +  proc sort data = %STR(&data) &threads &options
42176     +    &out;
42177     +    by &by;
42178     +  run;
42179     +
42180     +%mend tmsort;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   select count(*) into: numTerms from EMWS5.TextFilter_terms a where a.numdocs>=2 and _ispar in('+',' ') ;
MPRINT(TM_CLUSTER):   select count (*) into: numdocs from EMWS5.TextFilter_TRAIN a;
MPRINT(TM_CLUSTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TMGETNCL):   proc fastclus data = _svdcolpro noprint maxclusters = 10 mean = _clusTemp1;
MPRINT(TMGETNCL):   var TextCluster_SVD1 - TextCluster_SVD45 ;
MPRINT(TMGETNCL):   run;

NOTE: 데이터셋 WORK._CLUSTEMP1은(는) 10개의 관측값과 52개의 변수를 가지고 있습니다.
NOTE: 프로시저 FASTCLUS 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMGETNCL):   proc cluster data = _clusTemp1 method = WARD pseudo noprint outtree = _clusTemp1;
MPRINT(TMGETNCL):   var TextCluster_SVD1 - TextCluster_SVD45;
MPRINT(TMGETNCL):   run;

NOTE: 데이터셋 WORK._CLUSTEMP1은(는) 19개의 관측값과 61개의 변수를 가지고 있습니다.
NOTE: 프로시저 CLUSTER 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMSORT):   proc sort data = _clusTemp1(where=(_ccc_ > -99999.0) keep = _ncl_ _ccc_) out = _clusTemp1;
MPRINT(TMSORT):   by _ncl_;
MPRINT(TMSORT):   run;

NOTE: 9개의 관측값을 데이터셋 WORK._CLUSTEMP1.에서 읽었습니다.
      WHERE _ccc_>-99999;
NOTE: 데이터셋 WORK._CLUSTEMP1은(는) 9개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TMGETNCL):  ;
MPRINT(TMGETNCL):   data _clusTemp;
MPRINT(TMGETNCL):   set _clusTemp1;
MPRINT(TMGETNCL):   keep nclus;
MPRINT(TMGETNCL):   retain loclclus -1 loclccc 0 maxccc 0 maxclus 0 jclus -1 maxjump -1 nclus 0 jccc 0 prevjump 0 jump 0 occc 0 oncl 0;
MPRINT(TMGETNCL):   if _N_ = 1 then do;
MPRINT(TMGETNCL):   maxccc = _ccc_;
MPRINT(TMGETNCL):   maxclus = _ncl_;
MPRINT(TMGETNCL):   nclus = _ncl_;
MPRINT(TMGETNCL):   occc = _ccc_;
MPRINT(TMGETNCL):   oncl = _ncl_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   else if (_N_ = 2) then do;
MPRINT(TMGETNCL):   jump = _ccc_ - occc;
MPRINT(TMGETNCL):   if (jump > 0) then do;
MPRINT(TMGETNCL):   maxjump = jump;
MPRINT(TMGETNCL):   jclus = _ncl_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   if (_ccc_ > maxccc) then do;
MPRINT(TMGETNCL):   maxccc = _ccc_;
MPRINT(TMGETNCL):   maxclus = _ncl_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   occc = _ccc_;
MPRINT(TMGETNCL):   oncl = _ncl_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   else if (_N_ > 2) then do;
MPRINT(TMGETNCL):   prevjump = jump;
MPRINT(TMGETNCL):   jump = _ccc_ - occc;
MPRINT(TMGETNCL):   if ((prevjump > 0) & (jump < 0) & (loclclus < 0)) then do;
MPRINT(TMGETNCL):   loclclus = oncl;
MPRINT(TMGETNCL):   loclccc = occc;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   if (_ccc_ > maxccc) then do;
MPRINT(TMGETNCL):   maxccc = _ccc_;
MPRINT(TMGETNCL):   maxclus = _ncl_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   if ((jump > 0) & (jump > maxjump)) then do;
MPRINT(TMGETNCL):   jclus = _ncl_;
MPRINT(TMGETNCL):   maxjump = jump;
MPRINT(TMGETNCL):   jccc = _ccc_;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   occc = _ccc_;
MPRINT(TMGETNCL):   oncl = _ncl_;
MPRINT(TMGETNCL):   if ((loclclus > 0) & (jclus > 0)) then nclus = MIN(loclclus, jclus);
MPRINT(TMGETNCL):   else if (loclclus > 0) then nclus = loclclus;
MPRINT(TMGETNCL):   else if (jclus > 0) then nclus = jclus;
MPRINT(TMGETNCL):   else nclus = maxclus;
MPRINT(TMGETNCL):   end;
MPRINT(TMGETNCL):   run;

NOTE: 9개의 관측값을 데이터셋 WORK._CLUSTEMP1.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLUSTEMP은(는) 9개의 관측값과 1개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMGETNCL):   ;
MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   select max(nclus) into: numClus from _clusTemp ;
MPRINT(TM_CLUSTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   select count(*) into: nobs from _svdcolpro;
MPRINT(TM_CLUSTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtxtext.tmgethclus.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TMGETHCLUS.SOURCE입니다.
42181     +
42182     + /* ****************************************************************
42183     + * Copyright (C) 2010 by SAS Institute Inc., Cary, NC 27513
42184     + *
42185     + * Name:             tmgethclus.sas
42186     + * Product:
42187     + * Language:         Sas
42188     + * Script:
42189     + *
42190     + * Usage:
42191     +
42192     + !Inputs into %tmgethclus
42193     + * idVar = name of document index variable
42194     + * inDS = input data set containing svd dim
42195     + * vars = variables to copy to outtree
42196     + * nobs = number of observations in inDS
42197     + * nclus = number of clusters
42198     +
42199     +
42200     + !Outputs from %tmgethclus
42201     + * outtree = temp dataset to hold outtree
42202     + * outDS = output docs data set
42203     + * fastOut = temp data set for large data
42204     + * textclusDS = output clusters data set
42205     + *
42206     + * Example call
42207     + *
42208     + *%tmgethclus(outtree=_outtree,
42209     + *                   idvar=index,
42210     + *                   inDS=_docs,
42211     + *                   outDS=&outdocs,
42212     + *                   fastOut=_fastclusstat,
42213     + *                   textClusDS=&clusters,
42214     + *                   vars=%str(col1-col&svdkeep),
42215     + *                   nobs=400,
42216     + *                   nclus=10);
42217     + *
42218     + *
42219     + * Purpose: Perform the hierarchical clustering on out, term, doc from parse or filter node
42220     + *
42221     + * History:
42222     + *
42223     + *
42224     + * Notes:
42225     + *
42226     + * Last Modified By:
42227     + * Last Modified On: Tue Jul 27 10:38:10 2010
42228     + *
42229     + * End
42230     + * ************************************************************** */
42231     +
42232     +%macro tmGetHClus(outtree=,idVar=,inDS=,outDS=,fastOut=,textclusDS=,vars=,nobs=,
42233     +                nclus=,hierds=,svdkeep=,prefix=);
42234     +    %let syscc=0;
42235     +    %let emexceptionstring=;
42236     +    %let varString=&vars;
42237     +    %let id=&idvar;
42238     +    %let nLargeClusters=200;
42239     +    %if (&nClus > &nLargeClusters) %then
42240     +        %let nLargeClusters = %eval(&nClus + 1);
42241     +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
42242     +    %let temp1 =&inDS;
42243     +
42244     +    proc fastclus data = &temp1 noprint
42245     +       maxclusters = &nLargeClusters
42246     +       out = &fastOut
42247     +       mean = _outseeds ;
42248     +       id &id;
42249     +       var &varString;
42250     +    run;
42251     +
42252     +    data _outseeds;
42253     +        set _outseeds;
42254     +        rename CLUSTER=_SUBCLUSTER_;
42255     +        drop _CRIT_ _FREQ_ _RMSSTD_ _RADIUS_ _NEAR_ _GAP_;
42256     +    run;
42257     +
42258     +    /* run PROC CLUSTER */
42259     +
42260     +    proc cluster data=_outseeds out=&outtree method=WARD noprint;
42261     +        copy _SUBCLUSTER_;
42262     +        var %STR(&varString);
42263     +    run;
42264     +
42265     +    %tmsort(data=&outtree, out=, by=descending _height_, options=, threads=);
42266     +    %let keepobs=%eval(2*&nclus-1);
42267     +    %let leaves=0;
42268     +
42269     +    proc sql noprint;
42270     +      create table _subtree2 as select * from &outtree where _name_ like 'CL%';
42271     +      select count(*) into :rowcnt from &outtree;
42272     +    quit;
42273     +    data _subtree; set _subtree2 (obs=&keepobs); run;
42274     +
42275     +    %do %while (&leaves<&nclus and &keepobs < &rowcnt);
42276     +        proc sql noprint;
42277     +            select count(*) into :leaves from _subtree
42278     +            where _NAME_ not in (select _PARENT_ from _subtree);
42279     +            select count(*) into :rowcnt from &outtree;
42280     +        quit;
42281     +        %if &leaves<&nclus %then %do;
42282     +            %let keepobs=%eval(&keepobs + 1);
42283     +            data _subtree; set _subtree2 (obs=&keepobs); run;
42284     +        %end;
42285     +    %end;
42286     +    %if &nclus > 1 %then %do;
42287     +
42288     +        filename temp catalog 'sashelp.emtxtext.tmhiertree.source';
42289     +        %include temp;
42290     +        %tmhiertree(_subtree, &outtree, &fastout, &hierds, &svdkeep, &prefix);
42291     +
42292     +         %if &syscc>4 or &emexceptionstring ne %then %goto end_macro;
42293     +
42294     +    %end;
42295     +    %else %do;
42296     +        %let clusnum=;
42297     +        proc sql noprint;
42298     +            select input(substr(_name_,3),8.) into :clusnum from _subtree;
42299     +        quit;
42300     +        %let clusnum=%left(&clusnum);
42301     +        data &fastout;
42302     +            set &fastout;
42303     +            _CLUSTER_=&clusnum;
42304     +            _FINALCLUSTER_=&clusnum;
42305     +            _SUBCLUSTER_=&clusnum;
42306     +        run;
42307     +        data &hierds;
42308     +            set _subtree;
42309     +        run;
42310     +    %end;
42311     +
42312     +    data &outDS;
42313     +        set &fastOut;
42314     +    run;
42315     +
42316     +      /* get data set clause */
42317     +    %let textString =(keep=_CLUSTER_ _SUBCLUSTER_ _FINALCLUSTER_ &vars);
42318     +    %let empty=1;
42319     +    %let currentpars=1;
42320     +    %let newpars=;
42321     +    %let level=2;
42322     +    data &hierds;
42323     +        set &hierds;
42324     +        _cluster_=input(substr(_name_,3),8.);
42325     +        parent=input(substr(_parent_,3),8.);
42326     +        if _cluster_=1 then level=1;
42327     +        else level=.;
42328     +        drop _name_ _parent_;
42329     +    run;
42330     +    /* add tree levels to hierds */
42331     +    %do %while (&empty > 0);
42332     +        data &hierds (drop=newparstr cnt i);
42333     +            array newpars(%eval(2*&nclus)) $ _TEMPORARY_;
42334     +            set &hierds end=lastrow;
42335     +            retain cnt;
42336     +            if _n_=1 then cnt=1;
42337     +            if parent in (&currentpars) then do;
42338     +                newpars(cnt)=put(left(_cluster_),8.);
42339     +                cnt = cnt + 1;
42340     +                level=&level;
42341     +            end;
42342     +            if lastrow then do;
42343     +                i=2;
42344     +                newparstr=put(newpars(1),$%eval(&nclus*10).);
42345     +                do while (i < cnt);
42346     +                    newparstr=CATX(', ', newparstr, newpars(i));
42347     +                    i = i + 1;
42348     +                end;
42349     +                call symput('newpars',newparstr);
42350     +            end;
42351     +        run;
42352     +        %let level=%eval(&level + 1);
42353     +        %let currentpars=&newpars;
42354     +        %let newpars=;
42355     +        proc sql noprint;
42356     +            select count(*) into :empty from &hierds where level=.;
42357     +        quit;
42358     +    %end;
42359     +
42360     +      /* get outstat data set */
42361     +    proc summary
42362     +        data = &outds &textString
42363     +        noprint;
42364     +        var &vars;
42365     +        class _CLUSTER_;
42366     +        output out = &textclusds;
42367     +    run;
42368     +
42369     +    data _NULL_;
42370     +        set &textclusds(where=(_CLUSTER_ = . and _STAT_ = 'N'));
42371     +        call symput('_TOT_', _FREQ_);
42372     +    run;
42373     +
42374     +    data &textclusds;
42375     +        set &textclusds(where=(_STAT_='MEAN'));
42376     + /*       _WEIGHT_ = _FREQ_/(&_TOT_);*/
42377     +        if _CLUSTER_ = . then delete;
42378     +        drop _TYPE_ _STAT_;
42379     +    run;
42380     +
42381     +    proc sql noprint;
42382     +        select sum(_FREQ_) into :totNumDocs
42383     +        from &textclusds;
42384     +    quit;
42385     +
42386     +    data &textclusds (rename=(_FREQ_=Freq));
42387     +        set &textclusds;
42388     +        Percent=_FREQ_/&totNumDocs;
42389     +    run;
42390     +
42391     +    proc sort data=&textclusds; by _cluster_; run;
42392     +
42393     +%end_macro:
42394     +    %if &tm_debug =0  %then %do;
42395     +    proc sql noprint;
42396     +        drop table _outseeds;
42397     +        drop table _subtree;
42398     +        drop table _subtree2;
42399     +    quit;
42400     +    %end;
42401     +%mend;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmhclus.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTEXT.TMHCLUS.SOURCE입니다.
42402     +
42403     + /* macro to run PROC CLUSTER
42404     +
42405     +%tmhclus(data=, outtree=, method=, copy=, outliers=, vars=);
42406     +
42407     + data=     -  input data set
42408     + outtree=  -  output data set to be input into PROC TREE
42409     + method=   -  which method to use, defaults to WARD
42410     + copy=     -  varibles to copy to outtree data set,
42411     +              id variable is needed
42412     + outliers= -  YES or NO (allow outliers ?)
42413     +*/
42414     +%macro tmhclus(data=, outtree=, method=, copy=, trim=, k=, vars=);
42415     +   %if (&trim ne .) %then %let trim = trim = &trim;
42416     +   %else %let trim = ;
42417     +   %if (&k ne .) %then %let k = k = &k;
42418     +   %else %let k = ;
42419     +
42420     +   %if &method= %then %let method = WARD;
42421     +   %if &copy ^= %then %let copy = copy &copy;
42422     +   %if &vars ne %then %let var = var &vars;
42423     +   %else %let var = ;
42424     +
42425     +   proc cluster data = &data
42426     +      outtree =   &outtree
42427     +      method = &method
42428     +      &trim &k noprint;
42429     +        &copy;
42430     +      &var;
42431     +   run;
42432     +%mend tmhclus;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmtree.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTEXT.TMTREE.SOURCE입니다.
42433     +
42434     + /*
42435     +PROC TREE macro
42436     +
42437     +%tmtree(data=, out=, nclusters=, id=);
42438     +
42439     +data=      - name of input data set (outtree data set from PROC CLUSTER)
42440     +out=       - name of the output data set
42441     +nclusters= - number of clusters
42442     +id=        - id variable (eg _document_)
42443     +
42444     +*/
42445     +
42446     +%macro tmtree(data=, out=, nclusters=, id=, copy=);
42447     +  %if &copy ^= %then %let copy = copy &copy;
42448     +  %if %str(&id) ^= %str() %then
42449     +    %let id = id &id;
42450     +  proc tree data = &data noprint
42451     +    out = &out
42452     +        nclusters = &nclusters;
42453     +   &id;
42454     +   &copy;
42455     +
42456     +%mend tmtree;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TMGETHCLUS):   proc fastclus data = _svdcolpro noprint maxclusters = 200 out = _fastclusstat mean = _outseeds ;
MPRINT(TMGETHCLUS):   id index;
MPRINT(TMGETHCLUS):   var TextCluster_SVD1 - TextCluster_SVD45;
MPRINT(TMGETHCLUS):   run;

NOTE: 데이터셋 WORK._FASTCLUSSTAT은(는) 500개의 관측값과 48개의 변수를 가지고 있습니다.
NOTE: 데이터셋 WORK._OUTSEEDS은(는) 200개의 관측값과 52개의 변수를 가지고 있습니다.
NOTE: 프로시저 FASTCLUS 실행(총 프로세스 시간):
      실행 시간           0.12 초
      cpu 시간            0.12 초
      

MPRINT(TMGETHCLUS):   data _outseeds;
MPRINT(TMGETHCLUS):   set _outseeds;
MPRINT(TMGETHCLUS):   rename CLUSTER=_SUBCLUSTER_;
MPRINT(TMGETHCLUS):   drop _CRIT_ _FREQ_ _RMSSTD_ _RADIUS_ _NEAR_ _GAP_;
MPRINT(TMGETHCLUS):   run;

NOTE: 200개의 관측값을 데이터셋 WORK._OUTSEEDS.에서 읽었습니다.
NOTE: 데이터셋 WORK._OUTSEEDS은(는) 200개의 관측값과 46개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMGETHCLUS):   proc cluster data=_outseeds out=_outtree method=WARD noprint;
MPRINT(TMGETHCLUS):   copy _SUBCLUSTER_;
MPRINT(TMGETHCLUS):   var TextCluster_SVD1 - TextCluster_SVD45;
MPRINT(TMGETHCLUS):   run;

NOTE: 데이터셋 WORK._OUTTREE은(는) 399개의 관측값과 62개의 변수를 가지고 있습니다.
NOTE: 프로시저 CLUSTER 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TMSORT):   proc sort data = _outtree ;
MPRINT(TMSORT):   by descending _height_;
MPRINT(TMSORT):   run;

NOTE: 399개의 관측값을 데이터셋 WORK._OUTTREE.에서 읽었습니다.
NOTE: 데이터셋 WORK._OUTTREE은(는) 399개의 관측값과 62개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMGETHCLUS):  ;
MPRINT(TMGETHCLUS):   proc sql noprint;
MPRINT(TMGETHCLUS):   create table _subtree2 as select * from _outtree where _name_ like 'CL%';
NOTE: Table WORK._SUBTREE2 created, with 199 rows and 62 columns.

MPRINT(TMGETHCLUS):   select count(*) into :rowcnt from _outtree;
MPRINT(TMGETHCLUS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.03 초
      

MPRINT(TMGETHCLUS):   data _subtree;
MPRINT(TMGETHCLUS):   set _subtree2 (obs=7);
MPRINT(TMGETHCLUS):   run;

NOTE: 7개의 관측값을 데이터셋 WORK._SUBTREE2.에서 읽었습니다.
NOTE: 데이터셋 WORK._SUBTREE은(는) 7개의 관측값과 62개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMGETHCLUS):   proc sql noprint;
MPRINT(TMGETHCLUS):   select count(*) into :leaves from _subtree where _NAME_ not in (select _PARENT_ from _subtree);
MPRINT(TMGETHCLUS):   select count(*) into :rowcnt from _outtree;
MPRINT(TMGETHCLUS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMGETHCLUS):   data _subtree;
MPRINT(TMGETHCLUS):   set _subtree2 (obs=8);
MPRINT(TMGETHCLUS):   run;

NOTE: 8개의 관측값을 데이터셋 WORK._SUBTREE2.에서 읽었습니다.
NOTE: 데이터셋 WORK._SUBTREE은(는) 8개의 관측값과 62개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMGETHCLUS):   proc sql noprint;
MPRINT(TMGETHCLUS):   select count(*) into :leaves from _subtree where _NAME_ not in (select _PARENT_ from _subtree);
MPRINT(TMGETHCLUS):   select count(*) into :rowcnt from _outtree;
MPRINT(TMGETHCLUS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMGETHCLUS):   data _subtree;
MPRINT(TMGETHCLUS):   set _subtree2 (obs=9);
MPRINT(TMGETHCLUS):   run;

NOTE: 9개의 관측값을 데이터셋 WORK._SUBTREE2.에서 읽었습니다.
NOTE: 데이터셋 WORK._SUBTREE은(는) 9개의 관측값과 62개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMGETHCLUS):   proc sql noprint;
MPRINT(TMGETHCLUS):   select count(*) into :leaves from _subtree where _NAME_ not in (select _PARENT_ from _subtree);
MPRINT(TMGETHCLUS):   select count(*) into :rowcnt from _outtree;
MPRINT(TMGETHCLUS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMGETHCLUS):   filename temp catalog 'sashelp.emtxtext.tmhiertree.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMTXTEXT.TMHIERTREE.SOURCE입니다.
42457     +
42458     +%macro tmHierTree(subtree, outtree, fastout, leavesds, svdkeep, prefix);
42459     +%let cnt=1;
42460     +%let round=1;
42461     +
42462     +proc sql noprint;
42463     +    create table &subtree as select * from &subtree where _name_ like 'CL%';
42464     +quit;
42465     +
42466     +
42467     +%do %while (&cnt > 0);
42468     +    proc sql noprint;
42469     +
42470     +        create table leaves as select _name_
42471     +            from %if &round=1 %then &subtree; %else nosingle;
42472     +            where _name_ not in (select _parent_
42473     +                from %if &round=1 %then &subtree; %else nosingle;);
42474     +        create table singlepar as select _name_ as n
42475     +            from %if &round=1 %then &subtree; %else nosingle;
42476     +            where _parent_ not in (select _parent_
42477     +            from %if &round=1 %then &subtree; %else nosingle;
42478     +            where _name_ not eq n) and _parent_ ne '';
42479     +        /* find the leaves with a parent of only one child */
42480     +        create table leaves2 as select * from singlepar where n in (select _name_ from leaves);
42481     +        select count(*) into :cnt from leaves2;
42482     +        /* remove these leaves, we'll use their parent */
42483     +        %if &round=1 %then %do;
42484     +            create table nosingle as select * from &subtree where _name_ not in
42485     +                (select n from leaves2);
42486     +            %let round=2;
42487     +        %end;
42488     +        %else %do;
42489     +            delete from nosingle where _name_ in (select n from leaves2);
42490     +        %end;
42491     +    quit;
42492     +
42493     +%end;
42494     +
42495     +data &fastout;
42496     +    set &fastout;
42497     +    format _name_ $ 5.;
42498     +    _name_='CL'||left(cluster);
42499     +run;
42500     +%let nosingle=nosingle;
42501     +proc sort data=&fastout; by _name_; run;
42502     +proc sort data=&nosingle; by _name_; run;
42503     +proc sort data=&outtree; by _name_; run;
42504     +
42505     +%let clusts=;
42506     +proc sql noprint;
42507     +    create table newpars(
42508     +            _name_ char(8),
42509     +            parent char(8));
42510     +    insert into newpars values('CL1','CL1');
42511     +    select count(*) into :clusts from &outtree where _name_ like 'CL%';
42512     +quit;
42513     +%global parent;
42514     +%do i=2 %to &clusts;
42515     +    %tracePar(&outtree, &nosingle, CL&i);
42516     +%end;
42517     +
42518     +proc sort data=newpars; by _name_; run;
42519     +data &fastout;
42520     +    merge &fastout(rename=(cluster=_SUBCLUSTER_)) newpars;
42521     +    by _name_;
42522     +    _CLUSTER_=input(substr(parent,3.),8.);
42523     +    cluster=parent;
42524     +    drop parent _name_;
42525     +run;
42526     +
42527     +/* Find closest leaf cluster to those belonging to a parent cluster */
42528     +proc sql noprint;
42529     +    create table _calctree as select * from &outtree where _name_ like 'CL%';
42530     +quit;
42531     +proc distance data=_calctree out=_calctree method=EUCLID nostd;
42532     +    var RATIO (&prefix._SVD1-&prefix._SVD&svdkeep);
42533     +    id _name_;
42534     +run;
42535     +proc mds data=_calctree out=_calctree level=ratio dimension=2 noprint; run;
42536     +
42537     +%let cnt=0;
42538     +proc sql noprint;
42539     +    create table _parclustree as select distinct *, count(*) into :cnt
42540     +        from &fastout where cluster not in
42541     +        (select _name_ from leaves);
42542     +    create table _leafdims as select _name_ as leafname, dim1 as leafdim1, dim2 as leafdim2
42543     +        from _calctree
42544     +        where _name_ in (select _name_ from leaves);
42545     +    create table _nonleafdims as select _name_, dim1, dim2 from _calctree
42546     +        where _name_ in (select cluster from _parclustree);
42547     +    create table _parclustree as select a.*, b.* from _leafdims a, _nonleafdims b;
42548     +
42549     +quit;
42550     +data _parclustree;
42551     +    set _parclustree;
42552     +    distance=sqrt((dim1-leafdim1)**2+(dim2-leafdim2)**2);
42553     +run;
42554     +
42555     +proc sql noprint;
42556     +    create table _reroute as select _name_, min(distance) as distance
42557     +        from _parclustree group by _name_;
42558     +    create table _rerouteclus as select a._name_, a.distance, leafname
42559     +        from _reroute a, _parclustree b where a._name_ ne '' and
42560     +        a._name_=b._name_ and a.distance=b.distance;
42561     +    update &fastout set cluster=(select leafname from _rerouteclus
42562     +        where _name_=cluster) where cluster in (select _name_ from _rerouteclus);
42563     +quit;
42564     +
42565     +data &fastout;
42566     +    set &fastout;
42567     +    _FINALCLUSTER_=_CLUSTER_;
42568     +    _CLUSTER_=input(substr(cluster,3.),8.);
42569     +    drop cluster;
42570     +run;
42571     +data &leavesds;
42572     +    set nosingle;
42573     +run;
42574     +proc sql noprint;
42575     +    drop table leaves;
42576     +    drop table singlepar;
42577     +    drop table leaves2;
42578     +    drop table _calctree;
42579     +    drop table _leafdims;
42580     +    drop table _nonleafdims;
42581     +    drop table _parclustree;
42582     +    drop table _reroute;
42583     +    drop table _rerouteclus;
42584     +    drop table newpars;
42585     +    drop table nosingle;
42586     +quit;
42587     +
42588     +%mend;
42589     +%macro tracePar(outtree, clusds, obsrv);
42590     +
42591     +    %let parent=;
42592     +    /* check if _name_ is already in clusds */
42593     +    proc sql noprint;
42594     +        select _parent_ into :parent from &clusds where _name_="&obsrv";
42595     +    quit;
42596     +    %if %ktrim(&parent) eq and %ktrim(&obsrv) ne 'CL1' %then %do;
42597     +        /* check if _parent_ of _name_ is already in clusds --remove? */
42598     +        proc sql noprint;
42599     +            select _parent_ into :parent from &outtree where _name_="&obsrv";
42600     +        quit;
42601     +        %let parent=&parent;
42602     +        proc sql noprint;
42603     +            select count(*) into :exists from &clusds where _name_="&parent";
42604     +        quit;
42605     +        %if &exists < 1 %then %do;
42606     +            proc sql noprint;
42607     +                select parent into :parent from newpars where _name_="&parent";
42608     +                insert into newpars values("&obsrv","&parent");
42609     +            quit;
42610     +        %end;
42611     +        %else %do;
42612     +            proc sql noprint;
42613     +                insert into newpars values("&obsrv", "&parent");
42614     +            quit;
42615     +        %end;
42616     +    %end;
42617     +    %else %do;
42618     +        proc sql noprint;
42619     +            insert into newpars values("&obsrv", "&obsrv");
42620     +        quit;
42621     +    %end;
42622     +%mend;
42623     +
42624     +
42625     +
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(TMHIERTREE):   proc sql noprint;
MPRINT(TMHIERTREE):   create table _subtree as select * from _subtree where _name_ like 'CL%';
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table WORK._SUBTREE created, with 9 rows and 62 columns.

MPRINT(TMHIERTREE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMHIERTREE):   proc sql noprint;
MPRINT(TMHIERTREE):   create table leaves as select _name_ from _subtree where _name_ not in (select _parent_ from _subtree);
NOTE: Table WORK.LEAVES created, with 4 rows and 1 columns.

MPRINT(TMHIERTREE):   create table singlepar as select _name_ as n from _subtree where _parent_ not in (select _parent_ from _subtree where _name_ not eq n) and _parent_ ne '';
NOTE: Table WORK.SINGLEPAR created, with 2 rows and 1 columns.

MPRINT(TMHIERTREE):   create table leaves2 as select * from singlepar where n in (select _name_ from leaves);
NOTE: Table WORK.LEAVES2 created, with 1 rows and 1 columns.

MPRINT(TMHIERTREE):   select count(*) into :cnt from leaves2;
MPRINT(TMHIERTREE):   create table nosingle as select * from _subtree where _name_ not in (select n from leaves2);
NOTE: Table WORK.NOSINGLE created, with 8 rows and 62 columns.

MPRINT(TMHIERTREE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.14 초
      cpu 시간            0.14 초
      

MPRINT(TMHIERTREE):   proc sql noprint;
MPRINT(TMHIERTREE):   create table leaves as select _name_ from nosingle where _name_ not in (select _parent_ from nosingle);
NOTE: Table WORK.LEAVES created, with 4 rows and 1 columns.

MPRINT(TMHIERTREE):   create table singlepar as select _name_ as n from nosingle where _parent_ not in (select _parent_ from nosingle where _name_ not eq n) and _parent_ ne '';
NOTE: Table WORK.SINGLEPAR created, with 1 rows and 1 columns.

MPRINT(TMHIERTREE):   create table leaves2 as select * from singlepar where n in (select _name_ from leaves);
NOTE: Table WORK.LEAVES2 created, with 0 rows and 1 columns.

MPRINT(TMHIERTREE):   select count(*) into :cnt from leaves2;
MPRINT(TMHIERTREE):   delete from nosingle where _name_ in (select n from leaves2);
NOTE: No rows were deleted from WORK.NOSINGLE.

MPRINT(TMHIERTREE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.15 초
      cpu 시간            0.15 초
      

MPRINT(TMHIERTREE):   data _fastclusstat;
MPRINT(TMHIERTREE):   set _fastclusstat;
MPRINT(TMHIERTREE):   format _name_ $ 5.;
MPRINT(TMHIERTREE):   _name_='CL'||left(cluster);
MPRINT(TMHIERTREE):   run;

NOTE: 다음의 위치에서 숫자형 값이 문자형 값으로 변환되었습니다. (행):(칼럼)
      46:83   
NOTE: 500개의 관측값을 데이터셋 WORK._FASTCLUSSTAT.에서 읽었습니다.
NOTE: 데이터셋 WORK._FASTCLUSSTAT은(는) 500개의 관측값과 49개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMHIERTREE):   proc sort data=_fastclusstat;
MPRINT(TMHIERTREE):   by _name_;
MPRINT(TMHIERTREE):   run;

NOTE: 500개의 관측값을 데이터셋 WORK._FASTCLUSSTAT.에서 읽었습니다.
NOTE: 데이터셋 WORK._FASTCLUSSTAT은(는) 500개의 관측값과 49개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMHIERTREE):   proc sort data=nosingle;
MPRINT(TMHIERTREE):   by _name_;
MPRINT(TMHIERTREE):   run;

NOTE: 8개의 관측값을 데이터셋 WORK.NOSINGLE.에서 읽었습니다.
NOTE: 데이터셋 WORK.NOSINGLE은(는) 8개의 관측값과 62개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMHIERTREE):   proc sort data=_outtree;
MPRINT(TMHIERTREE):   by _name_;
MPRINT(TMHIERTREE):   run;

NOTE: 399개의 관측값을 데이터셋 WORK._OUTTREE.에서 읽었습니다.
NOTE: 데이터셋 WORK._OUTTREE은(는) 399개의 관측값과 62개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TMHIERTREE):   proc sql noprint;
MPRINT(TMHIERTREE):   create table newpars( _name_ char(8), parent char(8));
NOTE: Table WORK.NEWPARS created, with 0 rows and 2 columns.
MPRINT(TMHIERTREE):   insert into newpars values('CL1','CL1');
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TMHIERTREE):   select count(*) into :clusts from _outtree where _name_ like 'CL%';
MPRINT(TMHIERTREE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.03 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL2";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   insert into newpars values("CL2", "CL2");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL3";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   insert into newpars values("CL3", "CL3");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL4";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   insert into newpars values("CL4", "CL4");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL5";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   insert into newpars values("CL5", "CL5");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL6";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   insert into newpars values("CL6", "CL6");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL7";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   insert into newpars values("CL7", "CL7");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL8";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL8";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL5";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   insert into newpars values("CL8", "CL5");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL9";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   insert into newpars values("CL9", "CL9");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL10";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL10";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL7";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   insert into newpars values("CL10", "CL7");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL11";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL11";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL2";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   insert into newpars values("CL11", "CL2");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL12";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL12";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL9";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   insert into newpars values("CL12", "CL9");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL13";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL13";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL3";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   insert into newpars values("CL13", "CL3");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL14";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL14";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL9";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   insert into newpars values("CL14", "CL9");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL15";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL15";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL8";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL8";
MPRINT(TRACEPAR):   insert into newpars values("CL15","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL16";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL16";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL15";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL15";
MPRINT(TRACEPAR):   insert into newpars values("CL16","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL17";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL17";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL10";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL10";
MPRINT(TRACEPAR):   insert into newpars values("CL17","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL18";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL18";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL14";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL14";
MPRINT(TRACEPAR):   insert into newpars values("CL18","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL19";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL19";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL14";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL14";
MPRINT(TRACEPAR):   insert into newpars values("CL19","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL20";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL20";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL16";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL16";
MPRINT(TRACEPAR):   insert into newpars values("CL20","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL21";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL21";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL2";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   insert into newpars values("CL21", "CL2");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL22";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL22";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL11";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL11";
MPRINT(TRACEPAR):   insert into newpars values("CL22","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL23";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL23";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL18";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL18";
MPRINT(TRACEPAR):   insert into newpars values("CL23","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL24";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL24";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL12";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL12";
MPRINT(TRACEPAR):   insert into newpars values("CL24","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL25";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL25";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL12";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL12";
MPRINT(TRACEPAR):   insert into newpars values("CL25","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL26";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL26";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL10";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL10";
MPRINT(TRACEPAR):   insert into newpars values("CL26","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL27";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL27";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL25";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL25";
MPRINT(TRACEPAR):   insert into newpars values("CL27","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL28";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL28";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL5";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   insert into newpars values("CL28", "CL5");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL29";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL29";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL17";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL17";
MPRINT(TRACEPAR):   insert into newpars values("CL29","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL30";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL30";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL20";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL20";
MPRINT(TRACEPAR):   insert into newpars values("CL30","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL31";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL31";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL7";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   insert into newpars values("CL31", "CL7");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL32";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL32";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL16";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL16";
MPRINT(TRACEPAR):   insert into newpars values("CL32","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL33";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL33";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL24";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL24";
MPRINT(TRACEPAR):   insert into newpars values("CL33","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.03 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL34";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL34";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL11";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL11";
MPRINT(TRACEPAR):   insert into newpars values("CL34","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL35";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL35";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL31";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL31";
MPRINT(TRACEPAR):   insert into newpars values("CL35","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL36";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL36";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL30";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL30";
MPRINT(TRACEPAR):   insert into newpars values("CL36","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL37";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL37";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL29";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL29";
MPRINT(TRACEPAR):   insert into newpars values("CL37","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL38";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL38";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL32";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL32";
MPRINT(TRACEPAR):   insert into newpars values("CL38","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL39";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL39";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL20";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL20";
MPRINT(TRACEPAR):   insert into newpars values("CL39","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL40";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL40";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL34";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL34";
MPRINT(TRACEPAR):   insert into newpars values("CL40","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL41";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL41";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL32";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL32";
MPRINT(TRACEPAR):   insert into newpars values("CL41","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL42";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL42";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL28";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL28";
MPRINT(TRACEPAR):   insert into newpars values("CL42","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL43";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL43";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL8";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL8";
MPRINT(TRACEPAR):   insert into newpars values("CL43","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL44";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL44";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL42";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL42";
MPRINT(TRACEPAR):   insert into newpars values("CL44","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL45";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL45";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL21";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL21";
MPRINT(TRACEPAR):   insert into newpars values("CL45","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL46";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL46";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL35";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL35";
MPRINT(TRACEPAR):   insert into newpars values("CL46","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL47";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL47";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL23";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL23";
MPRINT(TRACEPAR):   insert into newpars values("CL47","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL48";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL48";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL39";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL39";
MPRINT(TRACEPAR):   insert into newpars values("CL48","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL49";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL49";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL24";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL24";
MPRINT(TRACEPAR):   insert into newpars values("CL49","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL50";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL50";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL21";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL21";
MPRINT(TRACEPAR):   insert into newpars values("CL50","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL51";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL51";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL26";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL26";
MPRINT(TRACEPAR):   insert into newpars values("CL51","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL52";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL52";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL37";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL37";
MPRINT(TRACEPAR):   insert into newpars values("CL52","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL53";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL53";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL36";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL36";
MPRINT(TRACEPAR):   insert into newpars values("CL53","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL54";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL54";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL18";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL18";
MPRINT(TRACEPAR):   insert into newpars values("CL54","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL55";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL55";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL50";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL50";
MPRINT(TRACEPAR):   insert into newpars values("CL55","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL56";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL56";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL43";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL43";
MPRINT(TRACEPAR):   insert into newpars values("CL56","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL57";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL57";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL13";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL13";
MPRINT(TRACEPAR):   insert into newpars values("CL57","CL3     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL58";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL58";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL47";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL47";
MPRINT(TRACEPAR):   insert into newpars values("CL58","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL59";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL59";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL13";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL13";
MPRINT(TRACEPAR):   insert into newpars values("CL59","CL3     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL60";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL60";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL15";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL15";
MPRINT(TRACEPAR):   insert into newpars values("CL60","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL61";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL61";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL40";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL40";
MPRINT(TRACEPAR):   insert into newpars values("CL61","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL62";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL62";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL28";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL28";
MPRINT(TRACEPAR):   insert into newpars values("CL62","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL63";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL63";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL22";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL22";
MPRINT(TRACEPAR):   insert into newpars values("CL63","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL64";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL64";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL40";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL40";
MPRINT(TRACEPAR):   insert into newpars values("CL64","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL65";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL65";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL57";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL57";
MPRINT(TRACEPAR):   insert into newpars values("CL65","CL3     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL66";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL66";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL26";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL26";
MPRINT(TRACEPAR):   insert into newpars values("CL66","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL67";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL67";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL22";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL22";
MPRINT(TRACEPAR):   insert into newpars values("CL67","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL68";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL68";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL29";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL29";
MPRINT(TRACEPAR):   insert into newpars values("CL68","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL69";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL69";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL50";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL50";
MPRINT(TRACEPAR):   insert into newpars values("CL69","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL70";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL70";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL31";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL31";
MPRINT(TRACEPAR):   insert into newpars values("CL70","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL71";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL71";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL54";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL54";
MPRINT(TRACEPAR):   insert into newpars values("CL71","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.03 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL72";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL72";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL54";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL54";
MPRINT(TRACEPAR):   insert into newpars values("CL72","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL73";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL73";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL57";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL57";
MPRINT(TRACEPAR):   insert into newpars values("CL73","CL3     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL74";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL74";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL63";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL63";
MPRINT(TRACEPAR):   insert into newpars values("CL74","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL75";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL75";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL41";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL41";
MPRINT(TRACEPAR):   insert into newpars values("CL75","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL76";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL76";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL27";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL27";
MPRINT(TRACEPAR):   insert into newpars values("CL76","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL77";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL77";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL34";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL34";
MPRINT(TRACEPAR):   insert into newpars values("CL77","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL78";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL78";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL30";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL30";
MPRINT(TRACEPAR):   insert into newpars values("CL78","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL79";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL79";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL62";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL62";
MPRINT(TRACEPAR):   insert into newpars values("CL79","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL80";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL80";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL38";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL38";
MPRINT(TRACEPAR):   insert into newpars values("CL80","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL81";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL81";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL46";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL46";
MPRINT(TRACEPAR):   insert into newpars values("CL81","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL82";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL82";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL48";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL48";
MPRINT(TRACEPAR):   insert into newpars values("CL82","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL83";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL83";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL73";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL73";
MPRINT(TRACEPAR):   insert into newpars values("CL83","CL3     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL84";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL84";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL71";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL71";
MPRINT(TRACEPAR):   insert into newpars values("CL84","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL85";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL85";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL56";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL56";
MPRINT(TRACEPAR):   insert into newpars values("CL85","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL86";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL86";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL45";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL45";
MPRINT(TRACEPAR):   insert into newpars values("CL86","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL87";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL87";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL65";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL65";
MPRINT(TRACEPAR):   insert into newpars values("CL87","CL3     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL88";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL88";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL59";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL59";
MPRINT(TRACEPAR):   insert into newpars values("CL88","CL3     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL89";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL89";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL66";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL66";
MPRINT(TRACEPAR):   insert into newpars values("CL89","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL90";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL90";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL74";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL74";
MPRINT(TRACEPAR):   insert into newpars values("CL90","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL91";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL91";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL55";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL55";
MPRINT(TRACEPAR):   insert into newpars values("CL91","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL92";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL92";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL39";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL39";
MPRINT(TRACEPAR):   insert into newpars values("CL92","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL93";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL93";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL59";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL59";
MPRINT(TRACEPAR):   insert into newpars values("CL93","CL3     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL94";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL94";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL69";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL69";
MPRINT(TRACEPAR):   insert into newpars values("CL94","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL95";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL95";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL19";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL19";
MPRINT(TRACEPAR):   insert into newpars values("CL95","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL96";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL96";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL48";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL48";
MPRINT(TRACEPAR):   insert into newpars values("CL96","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL97";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL97";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL60";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL60";
MPRINT(TRACEPAR):   insert into newpars values("CL97","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL98";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL98";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL67";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL67";
MPRINT(TRACEPAR):   insert into newpars values("CL98","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL99";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL99";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL68";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL68";
MPRINT(TRACEPAR):   insert into newpars values("CL99","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL100";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL100";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL35";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL35";
MPRINT(TRACEPAR):   insert into newpars values("CL100","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL101";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL101";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL86";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL86";
MPRINT(TRACEPAR):   insert into newpars values("CL101","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL102";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL102";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL63";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL63";
MPRINT(TRACEPAR):   insert into newpars values("CL102","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL103";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL103";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL95";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL95";
MPRINT(TRACEPAR):   insert into newpars values("CL103","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL104";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL104";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL23";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL23";
MPRINT(TRACEPAR):   insert into newpars values("CL104","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL105";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL105";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL38";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL38";
MPRINT(TRACEPAR):   insert into newpars values("CL105","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL106";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL106";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL60";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL60";
MPRINT(TRACEPAR):   insert into newpars values("CL106","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL107";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL107";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL53";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL53";
MPRINT(TRACEPAR):   insert into newpars values("CL107","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL108";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL108";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL52";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL52";
MPRINT(TRACEPAR):   insert into newpars values("CL108","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL109";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL109";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL87";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL87";
MPRINT(TRACEPAR):   insert into newpars values("CL109","CL3     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL110";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL110";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL52";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL52";
MPRINT(TRACEPAR):   insert into newpars values("CL110","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL111";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL111";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL79";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL79";
MPRINT(TRACEPAR):   insert into newpars values("CL111","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL112";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL112";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL69";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL69";
MPRINT(TRACEPAR):   insert into newpars values("CL112","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL113";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL113";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL36";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL36";
MPRINT(TRACEPAR):   insert into newpars values("CL113","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL114";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL114";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL27";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL27";
MPRINT(TRACEPAR):   insert into newpars values("CL114","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL115";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL115";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL81";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL81";
MPRINT(TRACEPAR):   insert into newpars values("CL115","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL116";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL116";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL70";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL70";
MPRINT(TRACEPAR):   insert into newpars values("CL116","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL117";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL117";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL80";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL80";
MPRINT(TRACEPAR):   insert into newpars values("CL117","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL118";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL118";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL49";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL49";
MPRINT(TRACEPAR):   insert into newpars values("CL118","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL119";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL119";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL64";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL64";
MPRINT(TRACEPAR):   insert into newpars values("CL119","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL120";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL120";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL58";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL58";
MPRINT(TRACEPAR):   insert into newpars values("CL120","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL121";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL121";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL93";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL93";
MPRINT(TRACEPAR):   insert into newpars values("CL121","CL3     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL122";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL122";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL33";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL33";
MPRINT(TRACEPAR):   insert into newpars values("CL122","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL123";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL123";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL86";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL86";
MPRINT(TRACEPAR):   insert into newpars values("CL123","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL124";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL124";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL94";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL94";
MPRINT(TRACEPAR):   insert into newpars values("CL124","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL125";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL125";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL56";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL56";
MPRINT(TRACEPAR):   insert into newpars values("CL125","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL126";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL126";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL101";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL101";
MPRINT(TRACEPAR):   insert into newpars values("CL126","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL127";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL127";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL25";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL25";
MPRINT(TRACEPAR):   insert into newpars values("CL127","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL128";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL128";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL82";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL82";
MPRINT(TRACEPAR):   insert into newpars values("CL128","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL129";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL129";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL72";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL72";
MPRINT(TRACEPAR):   insert into newpars values("CL129","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL130";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL130";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL85";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL85";
MPRINT(TRACEPAR):   insert into newpars values("CL130","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL131";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL131";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL62";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL62";
MPRINT(TRACEPAR):   insert into newpars values("CL131","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL132";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL132";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL97";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL97";
MPRINT(TRACEPAR):   insert into newpars values("CL132","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL133";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL133";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL17";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL17";
MPRINT(TRACEPAR):   insert into newpars values("CL133","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL134";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL134";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL46";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL46";
MPRINT(TRACEPAR):   insert into newpars values("CL134","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL135";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL135";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL113";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL113";
MPRINT(TRACEPAR):   insert into newpars values("CL135","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL136";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL136";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL70";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL70";
MPRINT(TRACEPAR):   insert into newpars values("CL136","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL137";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL137";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL61";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL61";
MPRINT(TRACEPAR):   insert into newpars values("CL137","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL138";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL138";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL53";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL53";
MPRINT(TRACEPAR):   insert into newpars values("CL138","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL139";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL139";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL51";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL51";
MPRINT(TRACEPAR):   insert into newpars values("CL139","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL140";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL140";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL76";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL76";
MPRINT(TRACEPAR):   insert into newpars values("CL140","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.03 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL141";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL141";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL44";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL44";
MPRINT(TRACEPAR):   insert into newpars values("CL141","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL142";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL142";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL65";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL65";
MPRINT(TRACEPAR):   insert into newpars values("CL142","CL3     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL143";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL143";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL92";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL92";
MPRINT(TRACEPAR):   insert into newpars values("CL143","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL144";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL144";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL42";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL42";
MPRINT(TRACEPAR):   insert into newpars values("CL144","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL145";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL145";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL64";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL64";
MPRINT(TRACEPAR):   insert into newpars values("CL145","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL146";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL146";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL51";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL51";
MPRINT(TRACEPAR):   insert into newpars values("CL146","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL147";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL147";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL129";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL129";
MPRINT(TRACEPAR):   insert into newpars values("CL147","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL148";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL148";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL83";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL83";
MPRINT(TRACEPAR):   insert into newpars values("CL148","CL3     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL149";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL149";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL101";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL101";
MPRINT(TRACEPAR):   insert into newpars values("CL149","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL150";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL150";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL74";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL74";
MPRINT(TRACEPAR):   insert into newpars values("CL150","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL151";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL151";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL66";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL66";
MPRINT(TRACEPAR):   insert into newpars values("CL151","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL152";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL152";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL139";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL139";
MPRINT(TRACEPAR):   insert into newpars values("CL152","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL153";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL153";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL100";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL100";
MPRINT(TRACEPAR):   insert into newpars values("CL153","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL154";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL154";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL33";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL33";
MPRINT(TRACEPAR):   insert into newpars values("CL154","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL155";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL155";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL122";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL122";
MPRINT(TRACEPAR):   insert into newpars values("CL155","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL156";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL156";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL75";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL75";
MPRINT(TRACEPAR):   insert into newpars values("CL156","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL157";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL157";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL90";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL90";
MPRINT(TRACEPAR):   insert into newpars values("CL157","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL158";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL158";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL67";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL67";
MPRINT(TRACEPAR):   insert into newpars values("CL158","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL159";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL159";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL37";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL37";
MPRINT(TRACEPAR):   insert into newpars values("CL159","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL160";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL160";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL45";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL45";
MPRINT(TRACEPAR):   insert into newpars values("CL160","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL161";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL161";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL84";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL84";
MPRINT(TRACEPAR):   insert into newpars values("CL161","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL162";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL162";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL58";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL58";
MPRINT(TRACEPAR):   insert into newpars values("CL162","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL163";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL163";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL78";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL78";
MPRINT(TRACEPAR):   insert into newpars values("CL163","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL164";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL164";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL44";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL44";
MPRINT(TRACEPAR):   insert into newpars values("CL164","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL165";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL165";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL111";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL111";
MPRINT(TRACEPAR):   insert into newpars values("CL165","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL166";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL166";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL49";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL49";
MPRINT(TRACEPAR):   insert into newpars values("CL166","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL167";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL167";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL98";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL98";
MPRINT(TRACEPAR):   insert into newpars values("CL167","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL168";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL168";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL121";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL121";
MPRINT(TRACEPAR):   insert into newpars values("CL168","CL3     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL169";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL169";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL47";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL47";
MPRINT(TRACEPAR):   insert into newpars values("CL169","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL170";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL170";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL133";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL133";
MPRINT(TRACEPAR):   insert into newpars values("CL170","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL171";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL171";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL41";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL41";
MPRINT(TRACEPAR):   insert into newpars values("CL171","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL172";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL172";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL43";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL43";
MPRINT(TRACEPAR):   insert into newpars values("CL172","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL173";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL173";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL88";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL88";
MPRINT(TRACEPAR):   insert into newpars values("CL173","CL3     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL174";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL174";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL103";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL103";
MPRINT(TRACEPAR):   insert into newpars values("CL174","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL175";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL175";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL76";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL76";
MPRINT(TRACEPAR):   insert into newpars values("CL175","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL176";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL176";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL145";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL145";
MPRINT(TRACEPAR):   insert into newpars values("CL176","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL177";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL177";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL119";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL119";
MPRINT(TRACEPAR):   insert into newpars values("CL177","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL178";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL178";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL104";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL104";
MPRINT(TRACEPAR):   insert into newpars values("CL178","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.03 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL179";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL179";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL124";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL124";
MPRINT(TRACEPAR):   insert into newpars values("CL179","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL180";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL180";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL176";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL176";
MPRINT(TRACEPAR):   insert into newpars values("CL180","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL181";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL181";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL77";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL77";
MPRINT(TRACEPAR):   insert into newpars values("CL181","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL182";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL182";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL160";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL160";
MPRINT(TRACEPAR):   insert into newpars values("CL182","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL183";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL183";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL89";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL89";
MPRINT(TRACEPAR):   insert into newpars values("CL183","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL184";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL184";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL132";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL132";
MPRINT(TRACEPAR):   insert into newpars values("CL184","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL185";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL185";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL154";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL154";
MPRINT(TRACEPAR):   insert into newpars values("CL185","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL186";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL186";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL168";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL168";
MPRINT(TRACEPAR):   insert into newpars values("CL186","CL3     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL187";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL187";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL126";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL126";
MPRINT(TRACEPAR):   insert into newpars values("CL187","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL188";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL188";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL114";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL114";
MPRINT(TRACEPAR):   insert into newpars values("CL188","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL189";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL189";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL72";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL72";
MPRINT(TRACEPAR):   insert into newpars values("CL189","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL190";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL190";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL127";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL127";
MPRINT(TRACEPAR):   insert into newpars values("CL190","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL191";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL191";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL61";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL61";
MPRINT(TRACEPAR):   insert into newpars values("CL191","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL192";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL192";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL19";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL19";
MPRINT(TRACEPAR):   insert into newpars values("CL192","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL193";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL193";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL68";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL68";
MPRINT(TRACEPAR):   insert into newpars values("CL193","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL194";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL194";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL91";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL91";
MPRINT(TRACEPAR):   insert into newpars values("CL194","CL2     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL195";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL195";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL164";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL164";
MPRINT(TRACEPAR):   insert into newpars values("CL195","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL196";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL196";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL170";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL170";
MPRINT(TRACEPAR):   insert into newpars values("CL196","CL7     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL197";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL197";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL130";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL130";
MPRINT(TRACEPAR):   insert into newpars values("CL197","CL5     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL198";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL198";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL73";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL73";
MPRINT(TRACEPAR):   insert into newpars values("CL198","CL3     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from nosingle where _name_="CL199";
NOTE: No rows were selected.
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select _parent_ into :parent from _outtree where _name_="CL199";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select count(*) into :exists from nosingle where _name_="CL192";
MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TRACEPAR):   proc sql noprint;
MPRINT(TRACEPAR):   select parent into :parent from newpars where _name_="CL192";
MPRINT(TRACEPAR):   insert into newpars values("CL199","CL9     ");
NOTE: 1 row was inserted into WORK.NEWPARS.

MPRINT(TRACEPAR):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):  ;
MPRINT(TMHIERTREE):   proc sort data=newpars;
MPRINT(TMHIERTREE):   by _name_;
MPRINT(TMHIERTREE):   run;

NOTE: 199개의 관측값을 데이터셋 WORK.NEWPARS.에서 읽었습니다.
NOTE: 데이터셋 WORK.NEWPARS은(는) 199개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMHIERTREE):   data _fastclusstat;
MPRINT(TMHIERTREE):   merge _fastclusstat(rename=(cluster=_SUBCLUSTER_)) newpars;
MPRINT(TMHIERTREE):   by _name_;
MPRINT(TMHIERTREE):   _CLUSTER_=input(substr(parent,3.),8.);
MPRINT(TMHIERTREE):   cluster=parent;
MPRINT(TMHIERTREE):   drop parent _name_;
MPRINT(TMHIERTREE):   run;

WARNING: 입력 데이터셋으로 BY 변수 _name_에 대해 여러 길이가 지정되었습니다. 예상하지 못한 결과를 발생시킬 수 있습니다.
NOTE: 500개의 관측값을 데이터셋 WORK._FASTCLUSSTAT.에서 읽었습니다.
NOTE: 199개의 관측값을 데이터셋 WORK.NEWPARS.에서 읽었습니다.
NOTE: 데이터셋 WORK._FASTCLUSSTAT은(는) 500개의 관측값과 50개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMHIERTREE):   proc sql noprint;
MPRINT(TMHIERTREE):   create table _calctree as select * from _outtree where _name_ like 'CL%';
NOTE: Table WORK._CALCTREE created, with 199 rows and 62 columns.

MPRINT(TMHIERTREE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMHIERTREE):   proc distance data=_calctree out=_calctree method=EUCLID nostd;
MPRINT(TMHIERTREE):   var RATIO (TextCluster_SVD1-TextCluster_SVD45);
MPRINT(TMHIERTREE):   id _name_;
MPRINT(TMHIERTREE):   run;

WARNING: Found negative value(s) in the ratio variable(s). The distance matrix may be meaningless.
NOTE: 데이터셋 WORK._CALCTREE은(는) 199개의 관측값과 200개의 변수를 가지고 있습니다.
NOTE: 프로시저 DISTANCE 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.04 초
      

MPRINT(TMHIERTREE):   proc mds data=_calctree out=_calctree level=ratio dimension=2 noprint;
MPRINT(TMHIERTREE):   run;

NOTE: Convergence reached in 10 iterations.
NOTE: 데이터셋 WORK._CALCTREE은(는) 201개의 관측값과 7개의 변수를 가지고 있습니다.
NOTE: 프로시저 MDS 실행(총 프로세스 시간):
      실행 시간           1.68 초
      cpu 시간            1.67 초
      

MPRINT(TMHIERTREE):   proc sql noprint;
MPRINT(TMHIERTREE):   create table _parclustree as select distinct *, count(*) into :cnt from _fastclusstat where cluster not in (select _name_ from leaves);
WARNING: INTO clause is ignored in the CREATE TABLE statement.
WARNING: INTO clause specifies fewer host variables than columns listed in the SELECT clause.
NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK._PARCLUSTREE created, with 45 rows and 51 columns.

MPRINT(TMHIERTREE):   create table _leafdims as select _name_ as leafname, dim1 as leafdim1, dim2 as leafdim2 from _calctree where _name_ in (select _name_ from leaves);
NOTE: Table WORK._LEAFDIMS created, with 4 rows and 3 columns.

MPRINT(TMHIERTREE):   create table _nonleafdims as select _name_, dim1, dim2 from _calctree where _name_ in (select cluster from _parclustree);
NOTE: Table WORK._NONLEAFDIMS created, with 6 rows and 3 columns.

MPRINT(TMHIERTREE):   create table _parclustree as select a.*, b.* from _leafdims a, _nonleafdims b;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._PARCLUSTREE created, with 24 rows and 6 columns.

MPRINT(TMHIERTREE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.12 초
      cpu 시간            0.11 초
      

MPRINT(TMHIERTREE):   data _parclustree;
MPRINT(TMHIERTREE):   set _parclustree;
MPRINT(TMHIERTREE):   distance=sqrt((dim1-leafdim1)**2+(dim2-leafdim2)**2);
MPRINT(TMHIERTREE):   run;

NOTE: 결측값을 사용한 연산의 결과로 결측값을 생성했습니다.
      생성 정보: (발생횟수) || (행):(칼럼). 
      8 || 456:114   8 || 456:137   8 || 456:143   8 || 456:153   
NOTE: 24개의 관측값을 데이터셋 WORK._PARCLUSTREE.에서 읽었습니다.
NOTE: 데이터셋 WORK._PARCLUSTREE은(는) 24개의 관측값과 7개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):   proc sql noprint;
MPRINT(TMHIERTREE):   create table _reroute as select _name_, min(distance) as distance from _parclustree group by _name_;
NOTE: Table WORK._REROUTE created, with 5 rows and 2 columns.

MPRINT(TMHIERTREE):   create table _rerouteclus as select a._name_, a.distance, leafname from _reroute a, _parclustree b where a._name_ ne '' and a._name_=b._name_ and a.distance=b.distance;
NOTE: Table WORK._REROUTECLUS created, with 4 rows and 3 columns.

MPRINT(TMHIERTREE):   update _fastclusstat set cluster=(select leafname from _rerouteclus where _name_=cluster) where cluster in (select _name_ from _rerouteclus);
WARNING: Character expression will be truncated when assigned to character column cluster.
NOTE: 43 rows were updated in WORK._FASTCLUSSTAT.

MPRINT(TMHIERTREE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.09 초
      cpu 시간            0.09 초
      

MPRINT(TMHIERTREE):   data _fastclusstat;
MPRINT(TMHIERTREE):   set _fastclusstat;
MPRINT(TMHIERTREE):   _FINALCLUSTER_=_CLUSTER_;
MPRINT(TMHIERTREE):   _CLUSTER_=input(substr(cluster,3.),8.);
MPRINT(TMHIERTREE):   drop cluster;
MPRINT(TMHIERTREE):   run;

NOTE: 500개의 관측값을 데이터셋 WORK._FASTCLUSSTAT.에서 읽었습니다.
NOTE: 데이터셋 WORK._FASTCLUSSTAT은(는) 500개의 관측값과 50개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):   data EMWS5.TextCluster_hierds;
MPRINT(TMHIERTREE):   set nosingle;
MPRINT(TMHIERTREE):   run;

NOTE: 8개의 관측값을 데이터셋 WORK.NOSINGLE.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_HIERDS은(는) 8개의 관측값과 62개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMHIERTREE):   proc sql noprint;
MPRINT(TMHIERTREE):   drop table leaves;
NOTE: 테이블 WORK.LEAVES 을(를) 삭제했습니다.
MPRINT(TMHIERTREE):   drop table singlepar;
NOTE: 테이블 WORK.SINGLEPAR 을(를) 삭제했습니다.
MPRINT(TMHIERTREE):   drop table leaves2;
NOTE: 테이블 WORK.LEAVES2 을(를) 삭제했습니다.
MPRINT(TMHIERTREE):   drop table _calctree;
NOTE: 테이블 WORK._CALCTREE 을(를) 삭제했습니다.
MPRINT(TMHIERTREE):   drop table _leafdims;
NOTE: 테이블 WORK._LEAFDIMS 을(를) 삭제했습니다.
MPRINT(TMHIERTREE):   drop table _nonleafdims;
NOTE: 테이블 WORK._NONLEAFDIMS 을(를) 삭제했습니다.
MPRINT(TMHIERTREE):   drop table _parclustree;
NOTE: 테이블 WORK._PARCLUSTREE 을(를) 삭제했습니다.
MPRINT(TMHIERTREE):   drop table _reroute;
NOTE: 테이블 WORK._REROUTE 을(를) 삭제했습니다.
MPRINT(TMHIERTREE):   drop table _rerouteclus;
NOTE: 테이블 WORK._REROUTECLUS 을(를) 삭제했습니다.
MPRINT(TMHIERTREE):   drop table newpars;
NOTE: 테이블 WORK.NEWPARS 을(를) 삭제했습니다.
MPRINT(TMHIERTREE):   drop table nosingle;
NOTE: 테이블 WORK.NOSINGLE 을(를) 삭제했습니다.
MPRINT(TMHIERTREE):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.07 초
      cpu 시간            0.06 초
      

MPRINT(TMGETHCLUS):  ;
MPRINT(TMGETHCLUS):   data EMWS5.TextCluster_docs;
MPRINT(TMGETHCLUS):   set _fastclusstat;
MPRINT(TMGETHCLUS):   run;

NOTE: 500개의 관측값을 데이터셋 WORK._FASTCLUSSTAT.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_DOCS은(는) 500개의 관측값과 50개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.01 초
      

MPRINT(TMGETHCLUS):   data EMWS5.TextCluster_hierds;
MPRINT(TMGETHCLUS):   set EMWS5.TextCluster_hierds;
MPRINT(TMGETHCLUS):   _cluster_=input(substr(_name_,3),8.);
MPRINT(TMGETHCLUS):   parent=input(substr(_parent_,3),8.);
MPRINT(TMGETHCLUS):   if _cluster_=1 then level=1;
MPRINT(TMGETHCLUS):   else level=.;
MPRINT(TMGETHCLUS):   drop _name_ _parent_;
MPRINT(TMGETHCLUS):   run;

NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_HIERDS은(는) 8개의 관측값과 63개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMGETHCLUS):   data EMWS5.TextCluster_hierds (drop=newparstr cnt i);
MPRINT(TMGETHCLUS):   array newpars(8) $ _TEMPORARY_;
MPRINT(TMGETHCLUS):   set EMWS5.TextCluster_hierds end=lastrow;
MPRINT(TMGETHCLUS):   retain cnt;
MPRINT(TMGETHCLUS):   if _n_=1 then cnt=1;
MPRINT(TMGETHCLUS):   if parent in (1) then do;
MPRINT(TMGETHCLUS):   newpars(cnt)=put(left(_cluster_),8.);
MPRINT(TMGETHCLUS):   cnt = cnt + 1;
MPRINT(TMGETHCLUS):   level=2;
MPRINT(TMGETHCLUS):   end;
MPRINT(TMGETHCLUS):   if lastrow then do;
MPRINT(TMGETHCLUS):   i=2;
MPRINT(TMGETHCLUS):   newparstr=put(newpars(1),$40.);
MPRINT(TMGETHCLUS):   do while (i < cnt);
MPRINT(TMGETHCLUS):   newparstr=CATX(', ', newparstr, newpars(i));
MPRINT(TMGETHCLUS):   i = i + 1;
MPRINT(TMGETHCLUS):   end;
MPRINT(TMGETHCLUS):   call symput('newpars',newparstr);
MPRINT(TMGETHCLUS):   end;
MPRINT(TMGETHCLUS):   run;

NOTE: 다음의 위치에서 숫자형 값이 문자형 값으로 변환되었습니다. (행):(칼럼)
      31:40   
NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_HIERDS은(는) 8개의 관측값과 63개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMGETHCLUS):   proc sql noprint;
MPRINT(TMGETHCLUS):   select count(*) into :empty from EMWS5.TextCluster_hierds where level=.;
MPRINT(TMGETHCLUS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMGETHCLUS):   data EMWS5.TextCluster_hierds (drop=newparstr cnt i);
MPRINT(TMGETHCLUS):   array newpars(8) $ _TEMPORARY_;
MPRINT(TMGETHCLUS):   set EMWS5.TextCluster_hierds end=lastrow;
MPRINT(TMGETHCLUS):   retain cnt;
MPRINT(TMGETHCLUS):   if _n_=1 then cnt=1;
MPRINT(TMGETHCLUS):   if parent in (2, 3) then do;
MPRINT(TMGETHCLUS):   newpars(cnt)=put(left(_cluster_),8.);
MPRINT(TMGETHCLUS):   cnt = cnt + 1;
MPRINT(TMGETHCLUS):   level=3;
MPRINT(TMGETHCLUS):   end;
MPRINT(TMGETHCLUS):   if lastrow then do;
MPRINT(TMGETHCLUS):   i=2;
MPRINT(TMGETHCLUS):   newparstr=put(newpars(1),$40.);
MPRINT(TMGETHCLUS):   do while (i < cnt);
MPRINT(TMGETHCLUS):   newparstr=CATX(', ', newparstr, newpars(i));
MPRINT(TMGETHCLUS):   i = i + 1;
MPRINT(TMGETHCLUS):   end;
MPRINT(TMGETHCLUS):   call symput('newpars',newparstr);
MPRINT(TMGETHCLUS):   end;
MPRINT(TMGETHCLUS):   run;

NOTE: 다음의 위치에서 숫자형 값이 문자형 값으로 변환되었습니다. (행):(칼럼)
      39:40   
NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_HIERDS은(는) 8개의 관측값과 63개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMGETHCLUS):   proc sql noprint;
MPRINT(TMGETHCLUS):   select count(*) into :empty from EMWS5.TextCluster_hierds where level=.;
MPRINT(TMGETHCLUS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMGETHCLUS):   data EMWS5.TextCluster_hierds (drop=newparstr cnt i);
MPRINT(TMGETHCLUS):   array newpars(8) $ _TEMPORARY_;
MPRINT(TMGETHCLUS):   set EMWS5.TextCluster_hierds end=lastrow;
MPRINT(TMGETHCLUS):   retain cnt;
MPRINT(TMGETHCLUS):   if _n_=1 then cnt=1;
MPRINT(TMGETHCLUS):   if parent in (4) then do;
MPRINT(TMGETHCLUS):   newpars(cnt)=put(left(_cluster_),8.);
MPRINT(TMGETHCLUS):   cnt = cnt + 1;
MPRINT(TMGETHCLUS):   level=4;
MPRINT(TMGETHCLUS):   end;
MPRINT(TMGETHCLUS):   if lastrow then do;
MPRINT(TMGETHCLUS):   i=2;
MPRINT(TMGETHCLUS):   newparstr=put(newpars(1),$40.);
MPRINT(TMGETHCLUS):   do while (i < cnt);
MPRINT(TMGETHCLUS):   newparstr=CATX(', ', newparstr, newpars(i));
MPRINT(TMGETHCLUS):   i = i + 1;
MPRINT(TMGETHCLUS):   end;
MPRINT(TMGETHCLUS):   call symput('newpars',newparstr);
MPRINT(TMGETHCLUS):   end;
MPRINT(TMGETHCLUS):   run;

NOTE: 다음의 위치에서 숫자형 값이 문자형 값으로 변환되었습니다. (행):(칼럼)
      47:40   
NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_HIERDS은(는) 8개의 관측값과 63개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMGETHCLUS):   proc sql noprint;
MPRINT(TMGETHCLUS):   select count(*) into :empty from EMWS5.TextCluster_hierds where level=.;
MPRINT(TMGETHCLUS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMGETHCLUS):   data EMWS5.TextCluster_hierds (drop=newparstr cnt i);
MPRINT(TMGETHCLUS):   array newpars(8) $ _TEMPORARY_;
MPRINT(TMGETHCLUS):   set EMWS5.TextCluster_hierds end=lastrow;
MPRINT(TMGETHCLUS):   retain cnt;
MPRINT(TMGETHCLUS):   if _n_=1 then cnt=1;
MPRINT(TMGETHCLUS):   if parent in (5, 6) then do;
MPRINT(TMGETHCLUS):   newpars(cnt)=put(left(_cluster_),8.);
MPRINT(TMGETHCLUS):   cnt = cnt + 1;
MPRINT(TMGETHCLUS):   level=5;
MPRINT(TMGETHCLUS):   end;
MPRINT(TMGETHCLUS):   if lastrow then do;
MPRINT(TMGETHCLUS):   i=2;
MPRINT(TMGETHCLUS):   newparstr=put(newpars(1),$40.);
MPRINT(TMGETHCLUS):   do while (i < cnt);
MPRINT(TMGETHCLUS):   newparstr=CATX(', ', newparstr, newpars(i));
MPRINT(TMGETHCLUS):   i = i + 1;
MPRINT(TMGETHCLUS):   end;
MPRINT(TMGETHCLUS):   call symput('newpars',newparstr);
MPRINT(TMGETHCLUS):   end;
MPRINT(TMGETHCLUS):   run;

NOTE: 다음의 위치에서 숫자형 값이 문자형 값으로 변환되었습니다. (행):(칼럼)
      55:40   
NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_HIERDS은(는) 8개의 관측값과 63개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMGETHCLUS):   proc sql noprint;
MPRINT(TMGETHCLUS):   select count(*) into :empty from EMWS5.TextCluster_hierds where level=.;
MPRINT(TMGETHCLUS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TMGETHCLUS):   proc summary data = EMWS5.TextCluster_docs (keep=_CLUSTER_ _SUBCLUSTER_ _FINALCLUSTER_ TextCluster_SVD1 - TextCluster_SVD45) noprint;
MPRINT(TMGETHCLUS):   var TextCluster_SVD1 - TextCluster_SVD45;
MPRINT(TMGETHCLUS):   class _CLUSTER_;
MPRINT(TMGETHCLUS):   output out = _clusstat;
MPRINT(TMGETHCLUS):   run;

NOTE: 500개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_DOCS.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLUSSTAT은(는) 25개의 관측값과 49개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.07 초
      

MPRINT(TMGETHCLUS):   data _NULL_;
MPRINT(TMGETHCLUS):   set _clusstat(where=(_CLUSTER_ = . and _STAT_ = 'N'));
MPRINT(TMGETHCLUS):   call symput('_TOT_', _FREQ_);
MPRINT(TMGETHCLUS):   run;

NOTE: 다음의 위치에서 숫자형 값이 문자형 값으로 변환되었습니다. (행):(칼럼)
      63:31   
NOTE: 1개의 관측값을 데이터셋 WORK._CLUSSTAT.에서 읽었습니다.
      WHERE (_CLUSTER_=.) and (_STAT_='N');
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMGETHCLUS):   data _clusstat;
MPRINT(TMGETHCLUS):   set _clusstat(where=(_STAT_='MEAN'));
MPRINT(TMGETHCLUS):   if _CLUSTER_ = . then delete;
MPRINT(TMGETHCLUS):   drop _TYPE_ _STAT_;
MPRINT(TMGETHCLUS):   run;

NOTE: 5개의 관측값을 데이터셋 WORK._CLUSSTAT.에서 읽었습니다.
      WHERE _STAT_='MEAN';
NOTE: 데이터셋 WORK._CLUSSTAT은(는) 4개의 관측값과 47개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMGETHCLUS):   proc sql noprint;
MPRINT(TMGETHCLUS):   select sum(_FREQ_) into :totNumDocs from _clusstat;
MPRINT(TMGETHCLUS):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TMGETHCLUS):   data _clusstat (rename=(_FREQ_=Freq));
MPRINT(TMGETHCLUS):   set _clusstat;
MPRINT(TMGETHCLUS):   Percent=_FREQ_/ 498;
MPRINT(TMGETHCLUS):   run;

NOTE: 4개의 관측값을 데이터셋 WORK._CLUSSTAT.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLUSSTAT은(는) 4개의 관측값과 48개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMGETHCLUS):   proc sort data=_clusstat;
MPRINT(TMGETHCLUS):   by _cluster_;
MPRINT(TMGETHCLUS):   run;

NOTE: 4개의 관측값을 데이터셋 WORK._CLUSSTAT.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLUSSTAT은(는) 4개의 관측값과 48개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   data _clusstat;
MPRINT(TM_CLUSTER):   set _clusstat(rename=(TextCluster_SVD1 - TextCluster_SVD45=_mean1-_mean45));
MPRINT(TM_CLUSTER):   run;

NOTE: 4개의 관측값을 데이터셋 WORK._CLUSSTAT.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLUSSTAT은(는) 4개의 관측값과 48개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_CLUSTER):   data _clustermean;
MPRINT(TM_CLUSTER):   set _clusstat(keep=_cluster_ _mean1-_mean45 rename=(_cluster_=cluster));
MPRINT(TM_CLUSTER):   run;

NOTE: 4개의 관측값을 데이터셋 WORK._CLUSSTAT.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLUSTERMEAN은(는) 4개의 관측값과 46개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.03 초
      

MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   drop table _outtree;
NOTE: 테이블 WORK._OUTTREE 을(를) 삭제했습니다.
MPRINT(TM_CLUSTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(TM_CLUSTER):   proc sql;
MPRINT(TM_CLUSTER):   create table _meandocs(drop=cluster) as select a.*, b.* from EMWS5.TextCluster_docs a left join _clustermean b on a._cluster_=b.cluster ;
NOTE: Table WORK._MEANDOCS created, with 500 rows and 95 columns.

MPRINT(TM_CLUSTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.04 초
      

MPRINT(TM_CLUSTER):   data _rmscalc;
MPRINT(TM_CLUSTER):   merge _meandocs(in=inhere) _clusstat;
MPRINT(TM_CLUSTER):   array _means(45) _mean1-_mean45;
MPRINT(TM_CLUSTER):   array _svds(45) TextCluster_SVD1 - TextCluster_SVD45;
MPRINT(TM_CLUSTER):   by _cluster_;
MPRINT(TM_CLUSTER):   error=0;
MPRINT(TM_CLUSTER):   do i = 1 to 45;
MPRINT(TM_CLUSTER):   error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
MPRINT(TM_CLUSTER):   end;
MPRINT(TM_CLUSTER):   drop i;
MPRINT(TM_CLUSTER):   run;

NOTE: 결측값을 사용한 연산의 결과로 결측값을 생성했습니다.
      생성 정보: (발생횟수) || (행):(칼럼). 
      90 || 303:131   
NOTE: 500개의 관측값을 데이터셋 WORK._MEANDOCS.에서 읽었습니다.
NOTE: 4개의 관측값을 데이터셋 WORK._CLUSSTAT.에서 읽었습니다.
NOTE: 데이터셋 WORK._RMSCALC은(는) 500개의 관측값과 98개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TM_CLUSTER):   proc summary data=_rmscalc nway;
MPRINT(TM_CLUSTER):   class _cluster_;
MPRINT(TM_CLUSTER):   var error;
MPRINT(TM_CLUSTER):   output out=_meanerr mean=meane sum=sume;
MPRINT(TM_CLUSTER):   run;

NOTE: 500개의 관측값을 데이터셋 WORK._RMSCALC.에서 읽었습니다.
NOTE: 데이터셋 WORK._MEANERR은(는) 4개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TM_CLUSTER):   data _rmsse;
MPRINT(TM_CLUSTER):   set _meanerr;
MPRINT(TM_CLUSTER):   if _freq_ gt 1 then do;
MPRINT(TM_CLUSTER):   _rmsstd_=sqrt(sume/((_freq_-1)*(45)));
MPRINT(TM_CLUSTER):   end;
MPRINT(TM_CLUSTER):   else do;
MPRINT(TM_CLUSTER):   _rmsstd_=0;
MPRINT(TM_CLUSTER):   end;
MPRINT(TM_CLUSTER):   keep _cluster_ _rmsstd_;
MPRINT(TM_CLUSTER):   run;

NOTE: 4개의 관측값을 데이터셋 WORK._MEANERR.에서 읽었습니다.
NOTE: 데이터셋 WORK._RMSSE은(는) 4개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TM_CLUSTER):   proc sql;
MPRINT(TM_CLUSTER):   create table _clusstat2(drop=cluster) as select a.*,b.* from _clustermean a left join _rmsse b on a.cluster=b._cluster_;
NOTE: Table WORK._CLUSSTAT2 created, with 4 rows and 47 columns.

MPRINT(TM_CLUSTER):   create table EMWS5.TextCluster_clusters as select a.*, b.freq, b.percent from _clusstat2(keep=_cluster_ _mean1-_mean45 _rmsstd_) a right join _clusstat b on a._cluster_=b._cluster_ where b.freq>0 ;
NOTE: Table EMWS5.TEXTCLUSTER_CLUSTERS created, with 4 rows and 49 columns.

MPRINT(TM_CLUSTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.11 초
      cpu 시간            0.10 초
      

MPRINT(TM_CLUSTER):   filename temp catalog 'sashelp.emtext.tmterm1.source';
MPRINT(TM_CLUSTER):   proc sort data=EMWS5.TextFilter_terms out=_terms_;
MPRINT(TM_CLUSTER):   by key _ispar;
MPRINT(TM_CLUSTER):   run;

NOTE: 입력 데이터셋이 이미 정렬되어 있습니다; 출력 데이터셋에 복사되었습니다.
NOTE: 1659개의 관측값을 데이터셋 EMWS5.TEXTFILTER_TERMS_DATA.에서 읽었습니다.
      WHERE KEEP='Y';
NOTE: 1660개의 관측값을 데이터셋 EMWS5.TEXTFILTER_TERM_STRINGS.에서 읽었습니다.
NOTE: 1659개의 관측값을 데이터셋 EMWS5.TEXTFILTER_TERMS.에서 읽었습니다.
NOTE: 데이터셋 WORK._TERMS_은(는) 1659개의 관측값과 13개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.10 초
      cpu 시간            0.11 초
      

MPRINT(TM_CLUSTER):   data _terms_;
MPRINT(TM_CLUSTER):   set _terms_;
MPRINT(TM_CLUSTER):   by key _ispar;
MPRINT(TM_CLUSTER):   if first.key then output;
MPRINT(TM_CLUSTER):   else;
MPRINT(TM_CLUSTER):   run;

NOTE: 1659개의 관측값을 데이터셋 WORK._TERMS_.에서 읽었습니다.
NOTE: 데이터셋 WORK._TERMS_은(는) 1659개의 관측값과 13개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TM_CLUSTER):   data _terms_;
MPRINT(TM_CLUSTER):   set _terms_;
MPRINT(TM_CLUSTER):   if _ispar='+' then Term=_ispar || ' ' || term;
MPRINT(TM_CLUSTER):   run;

NOTE: 1659개의 관측값을 데이터셋 WORK._TERMS_.에서 읽었습니다.
NOTE: 데이터셋 WORK._TERMS_은(는) 1659개의 관측값과 13개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMSORT):   proc sort data = EMWS5.TextFilter_tmout threads out = _tmout_;
MPRINT(TMSORT):   by _termnum_;
MPRINT(TMSORT):   run;

NOTE: 3627개의 관측값을 데이터셋 EMWS5.TEXTFILTER_TMOUT.에서 읽었습니다.
NOTE: 데이터셋 WORK._TMOUT_은(는) 3627개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.06 초
      

MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   data _tmout_;
MPRINT(TM_CLUSTER):   merge _tmout_ (in=_A_) _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
MPRINT(TM_CLUSTER):   by _termnum_;
MPRINT(TM_CLUSTER):   if _A_;
MPRINT(TM_CLUSTER):   run;

NOTE: 3627개의 관측값을 데이터셋 WORK._TMOUT_.에서 읽었습니다.
NOTE: 1659개의 관측값을 데이터셋 WORK._TERMS_.에서 읽었습니다.
NOTE: 데이터셋 WORK._TMOUT_은(는) 3627개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_CLUSTER):   data _docs_;
MPRINT(TM_CLUSTER):   set EMWS5.TextCluster_docs (rename=(index=_document_) keep=index _cluster_ _finalcluster_);
MPRINT(TM_CLUSTER):   _SEGMNT_=_finalcluster_;
MPRINT(TM_CLUSTER):   run;

NOTE: 500개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_DOCS.에서 읽었습니다.
NOTE: 데이터셋 WORK._DOCS_은(는) 500개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   select max(_cluster_) into :numclus from EMWS5.TextCluster_clusters;
MPRINT(TM_CLUSTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create view _CMB as select t1.*, t2._segmnt_ as cluster from _tmout_ t1, _docs_ t2 where t1._document_ = t2._document_ ;
NOTE: SQL view WORK._CMB has been defined.
MPRINT(TMTERM1):   quit ;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc summary data=_CMB nway ;
MPRINT(TMTERM1):   class cluster _term_ ;
MPRINT(TMTERM1):   var _count_ ;
MPRINT(TMTERM1):   output out=_TFREQ sum=total ;
MPRINT(TMTERM1):   run ;

NOTE: 3627개의 관측값을 데이터셋 WORK._TMOUT_.에서 읽었습니다.
NOTE: 500개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 3627개의 관측값을 데이터셋 WORK._CMB.에서 읽었습니다.
NOTE: 데이터셋 WORK._TFREQ은(는) 2304개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.06 초
      

MPRINT(TMTERM1):   proc summary data=_CMB( keep= cluster _document_ ) ;
MPRINT(TMTERM1):   class cluster ;
MPRINT(TMTERM1):   var _document_ ;
MPRINT(TMTERM1):   output out=_SUM n=n ;
MPRINT(TMTERM1):   run ;

NOTE: 3627개의 관측값을 데이터셋 WORK._TMOUT_.에서 읽었습니다.
NOTE: 500개의 관측값을 데이터셋 WORK._DOCS_.에서 읽었습니다.
NOTE: 3627개의 관측값을 데이터셋 WORK._CMB.에서 읽었습니다.
NOTE: 데이터셋 WORK._SUM은(는) 9개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 SUMMARY 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.06 초
      

MPRINT(TMTERM1):   data _null_ ;
MPRINT(TMTERM1):   set _SUM ;
MPRINT(TMTERM1):   if _type_ = 1 then call symput( 'CLUSIZE' || left( put( cluster, best. )), put( _freq_, best. ));
MPRINT(TMTERM1):   else if _type_ = 0 then call symput( 'CLUSALL', put( _freq_, best. )) ;
MPRINT(TMTERM1):   run ;

NOTE: 9개의 관측값을 데이터셋 WORK._SUM.에서 읽었습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _SUM;
NOTE: 테이블 WORK._SUM 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMSORT):   proc sort data = _TFREQ THREADS out = _TFREQ;
MPRINT(TMSORT):   by cluster descending _freq_;
MPRINT(TMSORT):   run;

NOTE: 2304개의 관측값을 데이터셋 WORK._TFREQ.에서 읽었습니다.
NOTE: 데이터셋 WORK._TFREQ은(는) 2304개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.06 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _UNQT( keep= _term_ _freq_ cluster ) ;
MPRINT(TMTERM1):   set _TFREQ ;
MPRINT(TMTERM1):   by cluster ;
MPRINT(TMTERM1):   if first.cluster then n_term = 0 ;
MPRINT(TMTERM1):   n_term + 1 ;
MPRINT(TMTERM1):   if n_term le 20 ;
MPRINT(TMTERM1):   run ;

NOTE: 2304개의 관측값을 데이터셋 WORK._TFREQ.에서 읽었습니다.
NOTE: 데이터셋 WORK._UNQT은(는) 122개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMSORT):   proc sort data = _UNQT THREADS nodupkey out = _UNQT( keep= _term_ );
MPRINT(TMSORT):   by _term_;
MPRINT(TMSORT):   run;

NOTE: 122개의 관측값을 데이터셋 WORK._UNQT.에서 읽었습니다.
NOTE: 중복 키값을 가지고 있는 52개의 관측값이 삭제되었습니다.
NOTE: 데이터셋 WORK._UNQT은(는) 70개의 관측값과 1개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.06 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create table _CLCDF as select distinct cluster, _term_, _freq_ from _TFREQ where _term_ in ( select _term_ from _UNQT ) order by _term_, cluster ;
NOTE: Table WORK._CLCDF created, with 252 rows and 3 columns.

MPRINT(TMTERM1):   quit ;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _UNQT;
NOTE: 테이블 WORK._UNQT 을(를) 삭제했습니다.
MPRINT(TMTERM1):   drop table _TFREQ;
NOTE: 테이블 WORK._TFREQ 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc transpose data=_CLCDF out=_CLCDF prefix=clus ;
MPRINT(TMTERM1):   by _term_ ;
MPRINT(TMTERM1):   var _freq_ ;
MPRINT(TMTERM1):   id cluster;
MPRINT(TMTERM1):   run ;

NOTE: 252개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDF은(는) 70개의 관측값과 10개의 변수를 가지고 있습니다.
NOTE: 프로시저 TRANSPOSE 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):   data _CLCDF ;
MPRINT(TMTERM1):   length _term_ $100;
MPRINT(TMTERM1):   array a_clus ( 9 ) 4 clus1 - clus9 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   do _i_ = 1 to 9 ;
MPRINT(TMTERM1):   if a_clus( _i_ ) = . then a_clus( _i_ ) = 0 ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   sumfreq = sum( of clus1 - clus9 ) ;
MPRINT(TMTERM1):   if (clus1 = 0) or (clus1 < 0) then cdf1 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus1 ;
MPRINT(TMTERM1):   div = 3601 - 12;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf1 = CDF( 'binomial', clus1 , propor , 12 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf1 = 1;
MPRINT(TMTERM1):   else cdf1 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus2 = 0) or (clus2 < 0) then cdf2 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus2 ;
MPRINT(TMTERM1):   div = 3601 - 954;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf2 = CDF( 'binomial', clus2 , propor , 954 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf2 = 1;
MPRINT(TMTERM1):   else cdf2 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus3 = 0) or (clus3 < 0) then cdf3 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus3 ;
MPRINT(TMTERM1):   div = 3601 - 210;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf3 = CDF( 'binomial', clus3 , propor , 210 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf3 = 1;
MPRINT(TMTERM1):   else cdf3 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus4 = 0) or (clus4 < 0) then cdf4 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus4 ;
MPRINT(TMTERM1):   div = 3601 - 13;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf4 = CDF( 'binomial', clus4 , propor , 13 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf4 = 1;
MPRINT(TMTERM1):   else cdf4 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus5 = 0) or (clus5 < 0) then cdf5 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus5 ;
MPRINT(TMTERM1):   div = 3601 - 1071;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf5 = CDF( 'binomial', clus5 , propor , 1071 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf5 = 1;
MPRINT(TMTERM1):   else cdf5 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus6 = 0) or (clus6 < 0) then cdf6 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus6 ;
MPRINT(TMTERM1):   div = 3601 - 2;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf6 = CDF( 'binomial', clus6 , propor , 2 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf6 = 1;
MPRINT(TMTERM1):   else cdf6 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus7 = 0) or (clus7 < 0) then cdf7 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus7 ;
MPRINT(TMTERM1):   div = 3601 - 609;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf7 = CDF( 'binomial', clus7 , propor , 609 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf7 = 1;
MPRINT(TMTERM1):   else cdf7 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus8 = 0) or (clus8 < 0) then cdf8 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus8 ;
MPRINT(TMTERM1):   div = 3601 - 0;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf8 = CDF( 'binomial', clus8 , propor ,0 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf8 = 1;
MPRINT(TMTERM1):   else cdf8 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus9 = 0) or (clus9 < 0) then cdf9 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus9 ;
MPRINT(TMTERM1):   div = 3601 - 730;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf9 = CDF( 'binomial', clus9 , propor , 730 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf9 = 1;
MPRINT(TMTERM1):   else cdf9 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   saveplus=0;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),'+')=1 then do;
MPRINT(TMTERM1):   saveplus=1;
MPRINT(TMTERM1):   _term_ = ksubstr(kleft(ktrim(_term_)),3);
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),' ')>0 then _term_ = "'"||kleft(ktrim(_term_)) || "'  ";
MPRINT(TMTERM1):   else _term_ = kleft(ktrim(_term_)) || ' ';
MPRINT(TMTERM1):   if saveplus=1 then do;
MPRINT(TMTERM1):   _term_='+'||kleft(ktrim(_term_));
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   drop _i_ propor sumfreq div num saveplus;
MPRINT(TMTERM1):   run ;

NOTE: 70개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDF은(는) 70개의 관측값과 20개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.11 초
      cpu 시간            0.04 초
      

MPRINT(TMTERM1):   data _CLCDFTR ;
MPRINT(TMTERM1):   array a_cdf ( 9 ) cdf1 - cdf9 ;
MPRINT(TMTERM1):   array a_count ( 9 ) clus1 - clus9 ;
MPRINT(TMTERM1):   length clus 4 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   keep _term_ cdf clus doc_count;
MPRINT(TMTERM1):   do clus = 1 to 9 ;
MPRINT(TMTERM1):   cdf = a_cdf( clus ) ;
MPRINT(TMTERM1):   doc_count = a_count( clus ) ;
MPRINT(TMTERM1):   if cdf > 0 then output ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   run ;

NOTE: 70개의 관측값을 데이터셋 WORK._CLCDF.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDFTR은(는) 252개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDF;
NOTE: 테이블 WORK._CLCDF 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(TMSORT):   proc sort data = _CLCDFTR THREADS out = _CLCDFTR;
MPRINT(TMSORT):   by clus descending cdf descending doc_count _term_;
MPRINT(TMSORT):   run;

NOTE: 252개의 관측값을 데이터셋 WORK._CLCDFTR.에서 읽었습니다.
NOTE: 데이터셋 WORK._CLCDFTR은(는) 252개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.07 초
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _desc_;
MPRINT(TMTERM1):   set _CLCDFTR (rename=(clus=cluster));
MPRINT(TMTERM1):   format clus_desc $300.;
MPRINT(TMTERM1):   retain oldclus 0 clus_desc '' count 0;
MPRINT(TMTERM1):   keep _CLUSTER_ clus_desc ;
MPRINT(TMTERM1):   if _N_ = 1 then do;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   count = 1;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (count <= 10) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 1) then clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   else clus_desc = kleft(trim(clus_desc)) || "  " || kleft(trim(_term_));
MPRINT(TMTERM1):   count = count + 1;
MPRINT(TMTERM1):   if (_N_ = 252) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if (count > 10) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 252) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   count = 2;
MPRINT(TMTERM1):   clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   if (_N_ = 252) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   run;

NOTE: 252개의 관측값을 데이터셋 WORK._CLCDFTR.에서 읽었습니다.
NOTE: 데이터셋 WORK._DESC_은(는) 8개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDFTR;
NOTE: 테이블 WORK._CLCDFTR 을(를) 삭제했습니다.
MPRINT(TMTERM1):   drop view _CMB;
NOTE: View WORK._CMB 을(를) 삭제했습니다.
MPRINT(TMTERM1):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TM_CLUSTER):  ;
MPRINT(TMSORT):   proc sort data = EMWS5.TextCluster_clusters threads out = EMWS5.TextCluster_clusters;
MPRINT(TMSORT):   by _cluster_;
MPRINT(TMSORT):   run;

NOTE: 4개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_CLUSTERS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_CLUSTERS은(는) 4개의 관측값과 49개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.04 초
      

MPRINT(TM_CLUSTER):  ;
MPRINT(TMSORT):   proc sort data = _desc_ threads out = _desc_;
MPRINT(TMSORT):   by _cluster_;
MPRINT(TMSORT):   run;

NOTE: 8개의 관측값을 데이터셋 WORK._DESC_.에서 읽었습니다.
NOTE: 데이터셋 WORK._DESC_은(는) 8개의 관측값과 2개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.06 초
      

MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   data _desc_;
MPRINT(TM_CLUSTER):   merge EMWS5.TextCluster_clusters _desc_;
MPRINT(TM_CLUSTER):   by _cluster_;
MPRINT(TM_CLUSTER):   run;

NOTE: 4개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_CLUSTERS.에서 읽었습니다.
NOTE: 8개의 관측값을 데이터셋 WORK._DESC_.에서 읽었습니다.
NOTE: 데이터셋 WORK._DESC_은(는) 8개의 관측값과 50개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TMSORT):   proc sort data = _desc_ threads out = EMWS5.TextCluster_clusters;
MPRINT(TMSORT):   by _cluster_;
MPRINT(TMSORT):   run;

NOTE: 8개의 관측값을 데이터셋 WORK._DESC_.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_CLUSTERS은(는) 8개의 관측값과 50개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.06 초
      cpu 시간            0.06 초
      

MPRINT(TM_CLUSTER):  ;
MPRINT(TMSORT):   proc sort data = EMWS5.TextCluster_hierds threads out = EMWS5.TextCluster_hierds;
MPRINT(TMSORT):   by _cluster_;
MPRINT(TMSORT):   run;

NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_HIERDS은(는) 8개의 관측값과 63개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.06 초
      

MPRINT(TM_CLUSTER):  ;
MPRINT(TM_CLUSTER):   data EMWS5.TextCluster_hierds;
MPRINT(TM_CLUSTER):   merge EMWS5.TextCluster_clusters EMWS5.TextCluster_hierds (keep=_cluster_ parent level in=P);
MPRINT(TM_CLUSTER):   by _cluster_;
MPRINT(TM_CLUSTER):   clust=_cluster_;
MPRINT(TM_CLUSTER):   drop _cluster_;
MPRINT(TM_CLUSTER):   if P;
MPRINT(TM_CLUSTER):   run;

NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_CLUSTERS.에서 읽었습니다.
NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_HIERDS은(는) 8개의 관측값과 52개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   create table EMWS5.TextCluster_clusters as select a._cluster_, b.* from EMWS5.TextCluster_hierds (rename=(clust=_CLUSTER_)) a left join EMWS5.TextCluster_clusters b on a._cluster_=b._cluster_;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: 변수 _CLUSTER_이(가) 파일 EMWS5.TEXTCLUSTER_CLUSTERS에 이미 존재합니다.
NOTE: Table EMWS5.TEXTCLUSTER_CLUSTERS created, with 8 rows and 50 columns.

MPRINT(TM_CLUSTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   update EMWS5.TextCluster_clusters set freq= (select sum(freq) from EMWS5.TextCluster_hierds where parent=_cluster_), percent= (select sum(percent) from EMWS5.TextCluster_hierds where parent=_cluster_) where freq=. and _cluster_ not 
in (select parent from EMWS5.TextCluster_hierds where freq=.);
NOTE: 1 row was updated in EMWS5.TEXTCLUSTER_CLUSTERS.

MPRINT(TM_CLUSTER):   select count(*) into :empty from EMWS5.TextCluster_clusters where freq=.;
MPRINT(TM_CLUSTER):   update EMWS5.TextCluster_hierds set freq=(select freq from EMWS5.TextCluster_clusters where _cluster_=clust);
NOTE: 8 rows were updated in EMWS5.TEXTCLUSTER_HIERDS.

MPRINT(TM_CLUSTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.10 초
      cpu 시간            0.09 초
      

MPRINT(TM_CLUSTER):   data EMWS5.TextCluster_hierds;
MPRINT(TM_CLUSTER):   merge EMWS5.TextCluster_clusters EMWS5.TextCluster_hierds ( rename=(clust=_cluster_) keep=clust parent level in=P);
MPRINT(TM_CLUSTER):   by _cluster_;
MPRINT(TM_CLUSTER):   clust=_cluster_;
MPRINT(TM_CLUSTER):   drop _cluster_;
MPRINT(TM_CLUSTER):   if P;
MPRINT(TM_CLUSTER):   run;

NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_CLUSTERS.에서 읽었습니다.
NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_HIERDS은(는) 8개의 관측값과 52개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   update EMWS5.TextCluster_clusters set freq= (select sum(freq) from EMWS5.TextCluster_hierds where parent=_cluster_), percent= (select sum(percent) from EMWS5.TextCluster_hierds where parent=_cluster_) where freq=. and _cluster_ not 
in (select parent from EMWS5.TextCluster_hierds where freq=.);
NOTE: 1 row was updated in EMWS5.TEXTCLUSTER_CLUSTERS.

MPRINT(TM_CLUSTER):   select count(*) into :empty from EMWS5.TextCluster_clusters where freq=.;
MPRINT(TM_CLUSTER):   update EMWS5.TextCluster_hierds set freq=(select freq from EMWS5.TextCluster_clusters where _cluster_=clust);
NOTE: 8 rows were updated in EMWS5.TEXTCLUSTER_HIERDS.

MPRINT(TM_CLUSTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.10 초
      cpu 시간            0.10 초
      

MPRINT(TM_CLUSTER):   data EMWS5.TextCluster_hierds;
MPRINT(TM_CLUSTER):   merge EMWS5.TextCluster_clusters EMWS5.TextCluster_hierds ( rename=(clust=_cluster_) keep=clust parent level in=P);
MPRINT(TM_CLUSTER):   by _cluster_;
MPRINT(TM_CLUSTER):   clust=_cluster_;
MPRINT(TM_CLUSTER):   drop _cluster_;
MPRINT(TM_CLUSTER):   if P;
MPRINT(TM_CLUSTER):   run;

NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_CLUSTERS.에서 읽었습니다.
NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_HIERDS은(는) 8개의 관측값과 52개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   update EMWS5.TextCluster_clusters set freq= (select sum(freq) from EMWS5.TextCluster_hierds where parent=_cluster_), percent= (select sum(percent) from EMWS5.TextCluster_hierds where parent=_cluster_) where freq=. and _cluster_ not 
in (select parent from EMWS5.TextCluster_hierds where freq=.);
NOTE: 1 row was updated in EMWS5.TEXTCLUSTER_CLUSTERS.

MPRINT(TM_CLUSTER):   select count(*) into :empty from EMWS5.TextCluster_clusters where freq=.;
MPRINT(TM_CLUSTER):   update EMWS5.TextCluster_hierds set freq=(select freq from EMWS5.TextCluster_clusters where _cluster_=clust);
NOTE: 8 rows were updated in EMWS5.TEXTCLUSTER_HIERDS.

MPRINT(TM_CLUSTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.10 초
      cpu 시간            0.09 초
      

MPRINT(TM_CLUSTER):   data EMWS5.TextCluster_hierds;
MPRINT(TM_CLUSTER):   merge EMWS5.TextCluster_clusters EMWS5.TextCluster_hierds ( rename=(clust=_cluster_) keep=clust parent level in=P);
MPRINT(TM_CLUSTER):   by _cluster_;
MPRINT(TM_CLUSTER):   clust=_cluster_;
MPRINT(TM_CLUSTER):   drop _cluster_;
MPRINT(TM_CLUSTER):   if P;
MPRINT(TM_CLUSTER):   run;

NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_CLUSTERS.에서 읽었습니다.
NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_HIERDS은(는) 8개의 관측값과 52개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TM_CLUSTER):   proc sql noprint;
MPRINT(TM_CLUSTER):   update EMWS5.TextCluster_clusters set freq= (select sum(freq) from EMWS5.TextCluster_hierds where parent=_cluster_), percent= (select sum(percent) from EMWS5.TextCluster_hierds where parent=_cluster_) where freq=. and _cluster_ not 
in (select parent from EMWS5.TextCluster_hierds where freq=.);
NOTE: 1 row was updated in EMWS5.TEXTCLUSTER_CLUSTERS.

MPRINT(TM_CLUSTER):   select count(*) into :empty from EMWS5.TextCluster_clusters where freq=.;
MPRINT(TM_CLUSTER):   update EMWS5.TextCluster_hierds set freq=(select freq from EMWS5.TextCluster_clusters where _cluster_=clust);
NOTE: 8 rows were updated in EMWS5.TEXTCLUSTER_HIERDS.

MPRINT(TM_CLUSTER):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.11 초
      cpu 시간            0.09 초
      

MPRINT(TM_CLUSTER):   data EMWS5.TextCluster_hierds;
MPRINT(TM_CLUSTER):   merge EMWS5.TextCluster_clusters EMWS5.TextCluster_hierds ( rename=(clust=_cluster_) keep=clust parent level in=P);
MPRINT(TM_CLUSTER):   by _cluster_;
MPRINT(TM_CLUSTER):   clust=_cluster_;
MPRINT(TM_CLUSTER):   drop _cluster_;
MPRINT(TM_CLUSTER):   if P;
MPRINT(TM_CLUSTER):   run;

NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_CLUSTERS.에서 읽었습니다.
NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_HIERDS은(는) 8개의 관측값과 52개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_CLUSTER):   data EMWS5.TextCluster_hierds;
MPRINT(TM_CLUSTER):   set EMWS5.TextCluster_hierds(rename=(CLUST=_CLUSTER_) keep=clust FREQ CLUS_DESC PARENT level);
MPRINT(TM_CLUSTER):   run;

NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_HIERDS은(는) 8개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_CLUSTER):   data EMWS5.TextCluster_clusters;
MPRINT(TM_CLUSTER):   set EMWS5.TextCluster_clusters;
MPRINT(TM_CLUSTER):   if _rmsstd_ ne .;
MPRINT(TM_CLUSTER):   run;

NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_CLUSTERS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_CLUSTERS은(는) 4개의 관측값과 50개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TM_CLUSTER):   data EMWS5.TextCluster_docs;
MPRINT(TM_CLUSTER):   set EMWS5.TextCluster_docs (drop=_FINALCLUSTER_ _SUBCLUSTER_);
MPRINT(TM_CLUSTER):   label _CLUSTER_= Cluster ID;
MPRINT(TM_CLUSTER):   run;

NOTE: 500개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_DOCS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_DOCS은(는) 500개의 관측값과 48개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TM_CLUSTER):   filename temp;
NOTE: Fileref TEMP을(를) 삭제했습니다.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS5.TextCluster_hierds(drop=plus);
MPRINT(TRAIN):   set EMWS5.TextCluster_hierds;
MPRINT(TRAIN):   plus='';
MPRINT(TRAIN):   if substr(CLUS_DESC, 1, 1) = "+" then plus="+ ";
MPRINT(TRAIN):   graphdesc=_CLUSTER_ || ': ' || plus || scan(CLUS_DESC, 1);
MPRINT(TRAIN):   run;

NOTE: 다음의 위치에서 숫자형 값이 문자형 값으로 변환되었습니다. (행):(칼럼)
      190794:182   
NOTE: 8개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_HIERDS.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_HIERDS은(는) 8개의 관측값과 6개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):   * add the info to EMINFO to forward on to other nodes ;
MPRINT(TRAIN):   data EMWS5.TextCluster_EMINFO;
MPRINT(TRAIN):   length TARGET KEY $32 DATA $43;
MPRINT(TRAIN):   key="LastTMNode";
MPRINT(TRAIN):   data="TextCluster";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="LastTMNodeType";
MPRINT(TRAIN):   data="TextCluster";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="LastTextCluster";
MPRINT(TRAIN):   data="TextCluster";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="PRESCORECODE";
MPRINT(TRAIN):   data="TextCluster";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   run;

NOTE: 변수 TARGET이(가) 초기화되지 않았습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_EMINFO은(는) 4개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   select count(*) into :svdkeep from EMWS5.TextCluster_svd_s where keep=1;
MPRINT(TRAIN):   select count(*) into :cluscnt from EMWS5.TextCluster_clusters;
MPRINT(TRAIN):   quit;
NOTE: 프로시저 SQL 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(TRAIN):   data EMWS5.TextCluster_tmconfig;
MPRINT(TRAIN):   set EMWS5.TextCluster_tmconfig;
MPRINT(TRAIN):   clus_alg = "2.0";
MPRINT(TRAIN):   maxsvd = 100;
MPRINT(TRAIN):   svdkeep= 45;
MPRINT(TRAIN):   last_prescore = "TextFilter                                 ";
MPRINT(TRAIN):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS5.TEXTCLUSTER_TMCONFIG.에서 읽었습니다.
NOTE: 데이터셋 EMWS5.TEXTCLUSTER_TMCONFIG은(는) 1개의 관측값과 32개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   length KEY $32 DELETE $1 UNAME $32 ROLE $32 LEVEL $10 ORDER $8 COMMENT $64 LOWERLIMIT 8 UPPERLIMIT 8;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_CLUSTER_");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("SEGMENT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("NOMINAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   run;

NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 1개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD1");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 1개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 2개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD2");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 2개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 3개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD3");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 3개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 4개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD4");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 4개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 5개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD5");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 5개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 6개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD6");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 6개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 7개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD7");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 7개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 8개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD8");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 8개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 9개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD9");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 9개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 10개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD10");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 10개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 11개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
SAS 시스템

MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD11");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 11개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 12개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD12");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 12개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 13개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD13");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 13개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 14개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD14");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 14개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 15개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD15");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 15개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 16개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD16");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 16개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 17개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD17");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 17개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 18개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD18");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 18개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 19개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD19");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 19개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 20개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD20");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 20개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 21개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD21");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 21개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 22개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD22");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 22개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 23개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD23");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 23개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 24개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD24");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 24개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 25개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD25");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 25개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 26개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD26");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 26개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 27개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD27");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 27개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 28개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD28");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 28개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 29개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD29");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 29개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 30개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD30");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 30개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 31개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD31");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 31개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 32개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD32");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 32개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 33개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD33");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 33개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 34개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD34");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 34개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 35개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD35");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 35개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 36개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD36");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 36개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 37개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD37");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 37개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 38개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD38");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 38개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 39개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD39");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 39개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 40개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD40");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 40개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 41개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD41");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 41개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 42개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD42");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 42개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 43개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD43");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 43개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 44개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD44");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 44개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 45개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_SVD45");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("INTERVAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 45개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 46개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_PROB1");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 46개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 47개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_PROB2");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 47개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 48개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_PROB3");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 48개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 49개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("TextCluster_PROB4");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 49개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 50개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename temp;
WARNING: 파일 이름 TEMP이(가) 논리적으로 할당되지 않았습니다.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: TextCluster;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42962      *------------------------------------------------------------*;
42963      * End TRAIN: TextCluster;
42964      *------------------------------------------------------------*;

42965      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
42966      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
42967      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42968      ;
MPRINT(EM_DIAGRAM):   ;
42969      ;
MPRINT(EM_DIAGRAM):   ;
42970      ;
MPRINT(EM_DIAGRAM):   ;
42971      ;
MPRINT(EM_DIAGRAM):   ;
42972      quit;
MPRINT(EM_DIAGRAM):   quit;
42973      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42974      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
42975      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42976      /*; *"; *'; */
42977      ;
MPRINT(EM_DIAGRAM):   ;
42978      run;
MPRINT(EM_DIAGRAM):   run;
42979      quit;
MPRINT(EM_DIAGRAM):   quit;
42980      /* Reset EM Options */
42981      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
42982      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
42983      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
42984      proc sort data=WORK.EM_METACHANGE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_METACHANGE;
42985      by key uname;
MPRINT(EM_DIAGRAM):   by key uname;
42986      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 50개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 50개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

42987      filename x "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster\CDELTA_TRAIN.sas";
MPRINT(EM_DIAGRAM):    filename x "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster\CDELTA_TRAIN.sas";
42988      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
42989      file x;
MPRINT(EM_DIAGRAM):   file x;
42990      put 'if upcase(NAME) = "TEXTCLUSTER_CLUSTER_" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_CLUSTER_" then do;';
42991      put 'ROLE = "SEGMENT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "SEGMENT";';
42992      put 'LEVEL = "NOMINAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "NOMINAL";';
42993      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
42994      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
42995      put 'if upcase(NAME) = "TEXTCLUSTER_PROB1" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_PROB1" then do;';
42996      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
42997      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
42998      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
42999      put 'if upcase(NAME) = "TEXTCLUSTER_PROB2" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_PROB2" then do;';
43000      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
43001      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43002      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43003      put 'if upcase(NAME) = "TEXTCLUSTER_PROB3" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_PROB3" then do;';
43004      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
43005      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43006      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43007      put 'if upcase(NAME) = "TEXTCLUSTER_PROB4" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_PROB4" then do;';
43008      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
43009      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43010      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43011      put 'if upcase(NAME) = "TEXTCLUSTER_SVD1" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD1" then do;';
43012      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43013      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43014      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43015      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43016      put 'if upcase(NAME) = "TEXTCLUSTER_SVD10" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD10" then do;';
43017      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43018      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43019      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43020      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43021      put 'if upcase(NAME) = "TEXTCLUSTER_SVD11" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD11" then do;';
43022      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43023      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43024      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43025      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43026      put 'if upcase(NAME) = "TEXTCLUSTER_SVD12" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD12" then do;';
43027      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43028      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43029      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43030      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43031      put 'if upcase(NAME) = "TEXTCLUSTER_SVD13" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD13" then do;';
43032      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43033      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43034      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43035      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43036      put 'if upcase(NAME) = "TEXTCLUSTER_SVD14" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD14" then do;';
43037      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43038      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43039      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43040      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43041      put 'if upcase(NAME) = "TEXTCLUSTER_SVD15" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD15" then do;';
43042      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43043      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43044      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43045      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43046      put 'if upcase(NAME) = "TEXTCLUSTER_SVD16" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD16" then do;';
43047      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43048      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43049      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43050      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43051      put 'if upcase(NAME) = "TEXTCLUSTER_SVD17" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD17" then do;';
43052      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43053      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43054      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43055      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43056      put 'if upcase(NAME) = "TEXTCLUSTER_SVD18" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD18" then do;';
43057      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43058      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43059      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43060      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43061      put 'if upcase(NAME) = "TEXTCLUSTER_SVD19" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD19" then do;';
43062      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43063      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43064      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43065      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43066      put 'if upcase(NAME) = "TEXTCLUSTER_SVD2" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD2" then do;';
43067      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43068      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43069      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43070      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43071      put 'if upcase(NAME) = "TEXTCLUSTER_SVD20" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD20" then do;';
43072      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43073      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43074      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43075      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43076      put 'if upcase(NAME) = "TEXTCLUSTER_SVD21" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD21" then do;';
43077      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43078      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43079      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43080      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43081      put 'if upcase(NAME) = "TEXTCLUSTER_SVD22" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD22" then do;';
43082      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43083      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43084      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43085      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43086      put 'if upcase(NAME) = "TEXTCLUSTER_SVD23" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD23" then do;';
43087      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43088      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43089      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43090      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43091      put 'if upcase(NAME) = "TEXTCLUSTER_SVD24" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD24" then do;';
43092      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43093      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43094      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43095      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43096      put 'if upcase(NAME) = "TEXTCLUSTER_SVD25" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD25" then do;';
43097      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43098      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43099      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43100      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43101      put 'if upcase(NAME) = "TEXTCLUSTER_SVD26" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD26" then do;';
43102      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43103      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43104      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43105      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43106      put 'if upcase(NAME) = "TEXTCLUSTER_SVD27" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD27" then do;';
43107      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43108      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43109      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43110      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43111      put 'if upcase(NAME) = "TEXTCLUSTER_SVD28" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD28" then do;';
43112      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43113      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43114      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43115      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43116      put 'if upcase(NAME) = "TEXTCLUSTER_SVD29" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD29" then do;';
43117      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43118      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43119      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43120      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43121      put 'if upcase(NAME) = "TEXTCLUSTER_SVD3" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD3" then do;';
43122      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43123      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43124      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43125      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43126      put 'if upcase(NAME) = "TEXTCLUSTER_SVD30" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD30" then do;';
43127      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43128      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43129      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43130      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43131      put 'if upcase(NAME) = "TEXTCLUSTER_SVD31" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD31" then do;';
43132      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43133      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43134      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43135      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43136      put 'if upcase(NAME) = "TEXTCLUSTER_SVD32" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD32" then do;';
43137      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43138      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43139      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43140      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43141      put 'if upcase(NAME) = "TEXTCLUSTER_SVD33" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD33" then do;';
43142      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43143      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43144      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43145      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43146      put 'if upcase(NAME) = "TEXTCLUSTER_SVD34" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD34" then do;';
43147      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43148      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43149      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43150      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43151      put 'if upcase(NAME) = "TEXTCLUSTER_SVD35" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD35" then do;';
43152      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43153      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43154      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43155      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43156      put 'if upcase(NAME) = "TEXTCLUSTER_SVD36" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD36" then do;';
43157      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43158      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43159      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43160      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43161      put 'if upcase(NAME) = "TEXTCLUSTER_SVD37" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD37" then do;';
43162      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43163      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43164      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43165      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43166      put 'if upcase(NAME) = "TEXTCLUSTER_SVD38" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD38" then do;';
43167      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43168      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43169      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43170      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43171      put 'if upcase(NAME) = "TEXTCLUSTER_SVD39" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD39" then do;';
43172      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43173      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43174      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43175      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43176      put 'if upcase(NAME) = "TEXTCLUSTER_SVD4" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD4" then do;';
43177      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43178      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43179      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43180      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43181      put 'if upcase(NAME) = "TEXTCLUSTER_SVD40" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD40" then do;';
43182      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43183      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43184      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43185      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43186      put 'if upcase(NAME) = "TEXTCLUSTER_SVD41" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD41" then do;';
43187      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43188      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43189      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43190      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43191      put 'if upcase(NAME) = "TEXTCLUSTER_SVD42" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD42" then do;';
43192      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43193      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43194      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43195      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43196      put 'if upcase(NAME) = "TEXTCLUSTER_SVD43" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD43" then do;';
43197      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43198      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43199      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43200      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43201      put 'if upcase(NAME) = "TEXTCLUSTER_SVD44" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD44" then do;';
43202      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43203      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43204      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43205      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43206      put 'if upcase(NAME) = "TEXTCLUSTER_SVD45" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD45" then do;';
43207      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43208      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43209      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43210      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43211      put 'if upcase(NAME) = "TEXTCLUSTER_SVD5" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD5" then do;';
43212      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43213      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43214      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43215      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43216      put 'if upcase(NAME) = "TEXTCLUSTER_SVD6" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD6" then do;';
43217      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43218      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43219      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43220      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43221      put 'if upcase(NAME) = "TEXTCLUSTER_SVD7" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD7" then do;';
43222      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43223      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43224      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43225      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43226      put 'if upcase(NAME) = "TEXTCLUSTER_SVD8" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD8" then do;';
43227      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43228      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43229      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43230      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
43231      put 'if upcase(NAME) = "TEXTCLUSTER_SVD9" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TEXTCLUSTER_SVD9" then do;';
43232      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
43233      put 'LEVEL = "INTERVAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "INTERVAL";';
43234      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
43235      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 파일 X:
      파일 이름=C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS5\TextCluster\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,파일 크기 (바이트)=0,
      마지막 수정일=2018년 11월 20일 10시37분53초,
      생성 시간=2018년 11월 17일 16시56분25초

NOTE: 245개의 레코드를 파일 X에 기록했습니다.
      최소 레코드 길이는 4입니다.
      최대 레코드 길이는 49입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

43236      filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X을(를) 삭제했습니다.
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
