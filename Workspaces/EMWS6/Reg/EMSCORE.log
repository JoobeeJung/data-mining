MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "2018년 11월 20일" 
);
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10시00분58초" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 스코어 로그";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* 스코어 로그
날짜:                2018년 11월 20일
시간:                10시00분58초
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1ZV4KEL 
"C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Reg\EMSCORE.out" 
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1ZV4KEL new;
MPRINT(EM_DIAGRAM):   run;
51682      filename emflow
51682    ! "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Reg\EMFLOWSCORE.sas"
51682    ! ;
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
51683      *------------------------------------------------------------*;
51684      * Reg: Scoring DATA data;
51685      *------------------------------------------------------------*;
51686      data EMWS6.Reg_TRAIN
51687      / view=EMWS6.Reg_TRAIN
51688      ;
MPRINT(EM_DIAGRAM):   data EMWS6.Reg_TRAIN / view=EMWS6.Reg_TRAIN ;
51689      set EMWS6.Part_TRAIN
51690      ;
MPRINT(EM_DIAGRAM):   set EMWS6.Part_TRAIN ;
51691      %inc emflow;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   length I_RESPOND $ 12;
MPRINT(EM_DIAGRAM):   label I_RESPOND = 'Into: RESPOND' ;
MPRINT(EM_DIAGRAM):   *** Target Values;
MPRINT(EM_DIAGRAM):   array REGDRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   label U_RESPOND = 'Unnormalized Into: RESPOND' ;
MPRINT(EM_DIAGRAM):   format U_RESPOND BEST12.;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
MPRINT(EM_DIAGRAM):   ARRAY REGDRU[2] _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for RESPOND ;
MPRINT(EM_DIAGRAM):   drop _Y ;
MPRINT(EM_DIAGRAM):   label F_RESPOND = 'From: RESPOND' ;
MPRINT(EM_DIAGRAM):   length F_RESPOND $ 12;
MPRINT(EM_DIAGRAM):   F_RESPOND = put( RESPOND , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(F_RESPOND,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( RESPOND ) then do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_RESPOND = '0' then do;
MPRINT(EM_DIAGRAM):   _Y = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_RESPOND = '1' then do;
MPRINT(EM_DIAGRAM):   _Y = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
MPRINT(EM_DIAGRAM):   *** Check AGE for missing values ;
MPRINT(EM_DIAGRAM):   if missing( AGE ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check BUY12 for missing values ;
MPRINT(EM_DIAGRAM):   if missing( BUY12 ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check BUY18 for missing values ;
MPRINT(EM_DIAGRAM):   if missing( BUY18 ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check BUY6 for missing values ;
MPRINT(EM_DIAGRAM):   if missing( BUY6 ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check FICO for missing values ;
MPRINT(EM_DIAGRAM):   if missing( FICO ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check INCOME for missing values ;
MPRINT(EM_DIAGRAM):   if missing( INCOME ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check VALUE24 for missing values ;
MPRINT(EM_DIAGRAM):   if missing( VALUE24 ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CLIMATE ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 ;
MPRINT(EM_DIAGRAM):   if missing( CLIMATE ) then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm2 $ 2;
MPRINT(EM_DIAGRAM):   drop _dm2 ;
MPRINT(EM_DIAGRAM):   _dm2 = put( CLIMATE , $CHAR2. );
MPRINT(DMNORMIP):   call dmnorm(_dm2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm2 = '20' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm2 = '30' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm2 = '10' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for COA6 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
MPRINT(EM_DIAGRAM):   if missing( COA6 ) then do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( COA6 , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DISCBUY ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
MPRINT(EM_DIAGRAM):   if missing( DISCBUY ) then do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( DISCBUY , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for LOC ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
MPRINT(EM_DIAGRAM):   _4_5 = 0;
MPRINT(EM_DIAGRAM):   _4_6 = 0;
MPRINT(EM_DIAGRAM):   if missing( LOC ) then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( LOC , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'D' then do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'B' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'A' then do;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'B' then do;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'C' then do;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'D' then do;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'F' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'E' then do;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'F' then do;
MPRINT(EM_DIAGRAM):   _4_5 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'G' then do;
MPRINT(EM_DIAGRAM):   _4_6 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'H' then do;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
MPRINT(EM_DIAGRAM):   _4_5 = -1;
MPRINT(EM_DIAGRAM):   _4_6 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for MARRIED ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
MPRINT(EM_DIAGRAM):   if missing( MARRIED ) then do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( MARRIED , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for ORGSRC ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 _6_3 _6_4 _6_5 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_3 = 0;
MPRINT(EM_DIAGRAM):   _6_4 = 0;
MPRINT(EM_DIAGRAM):   _6_5 = 0;
MPRINT(EM_DIAGRAM):   if missing( ORGSRC ) then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   _6_4 = .;
MPRINT(EM_DIAGRAM):   _6_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( ORGSRC , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'O' then do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'D' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'C' then do;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'D' then do;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'I' then do;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'O' then do;
MPRINT(EM_DIAGRAM):   _6_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'R' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'P' then do;
MPRINT(EM_DIAGRAM):   _6_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'R' then do;
MPRINT(EM_DIAGRAM):   _6_5 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'U' then do;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_3 = -1;
MPRINT(EM_DIAGRAM):   _6_4 = -1;
MPRINT(EM_DIAGRAM):   _6_5 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   _6_4 = .;
MPRINT(EM_DIAGRAM):   _6_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for OWNHOME ;
MPRINT(EM_DIAGRAM):   drop _7_0 ;
MPRINT(EM_DIAGRAM):   if missing( OWNHOME ) then do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( OWNHOME , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for RETURN24 ;
MPRINT(EM_DIAGRAM):   drop _8_0 ;
MPRINT(EM_DIAGRAM):   if missing( RETURN24 ) then do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( RETURN24 , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for SEX ;
MPRINT(EM_DIAGRAM):   drop _9_0 ;
MPRINT(EM_DIAGRAM):   if missing( SEX ) then do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( SEX , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm1 = 'M' then do;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm1 = 'F' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   _P0 = 0.0743134087;
MPRINT(EM_DIAGRAM):   _P1 = 0.9256865913;
MPRINT(EM_DIAGRAM):   goto REGDR1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
MPRINT(EM_DIAGRAM):   *** Effect: AGE ;
MPRINT(EM_DIAGRAM):   _TEMP = AGE ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.02752160716194 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: BUY12 ;
MPRINT(EM_DIAGRAM):   _TEMP = BUY12 ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.25771049332257 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: BUY18 ;
MPRINT(EM_DIAGRAM):   _TEMP = BUY18 ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.59865595317529 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: BUY6 ;
MPRINT(EM_DIAGRAM):   _TEMP = BUY6 ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.20795127507922 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: CLIMATE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.2488816465401) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.24764504033533) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   *** Effect: COA6 ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.32638886609879) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   *** Effect: DISCBUY ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.0381253385596) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   *** Effect: FICO ;
MPRINT(EM_DIAGRAM):   _TEMP = FICO ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00673204794151 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: INCOME ;
MPRINT(EM_DIAGRAM):   _TEMP = INCOME ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0062979417833 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: LOC ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18652032505833) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.12976031480666) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.14860542260053) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.17026139620841) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.0552096603011) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0) * _TEMP * _4_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0) * _TEMP * _4_6;
MPRINT(EM_DIAGRAM):   *** Effect: MARRIED ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.2431995164444) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   *** Effect: ORGSRC ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.08764792448148) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.12930971879112) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.36598390115444) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04778576627026) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.48291776998561) * _TEMP * _6_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01336443491305) * _TEMP * _6_5;
MPRINT(EM_DIAGRAM):   *** Effect: OWNHOME ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15785389993526) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   *** Effect: RETURN24 ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03294790918286) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   *** Effect: SEX ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01034615155437) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   *** Effect: VALUE24 ;
MPRINT(EM_DIAGRAM):   _TEMP = VALUE24 ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00046194298259 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   _TEMP = 3.54285410760808 + _LP0;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   R_RESPOND1 = .;
MPRINT(EM_DIAGRAM):   R_RESPOND0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   label R_RESPOND1 = 'Residual: RESPOND=1' ;
MPRINT(EM_DIAGRAM):   label R_RESPOND0 = 'Residual: RESPOND=0' ;
MPRINT(EM_DIAGRAM):   R_RESPOND1 = - _P0;
MPRINT(EM_DIAGRAM):   R_RESPOND0 = - _P1;
MPRINT(EM_DIAGRAM):   select( _Y );
MPRINT(EM_DIAGRAM):   when (0) R_RESPOND1 = R_RESPOND1 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_RESPOND0 = R_RESPOND0 + 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   label P_RESPOND1 = 'Predicted: RESPOND=1' ;
MPRINT(EM_DIAGRAM):   label P_RESPOND0 = 'Predicted: RESPOND=0' ;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _IY = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   I_RESPOND = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   U_RESPOND = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
52267      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP 뷰가 파일 EMWS6.REG_TRAIN에 저장되었습니다.
NOTE: 저장된 DATA STEP 뷰는 다른 운영 체제에서 실행할 수 없습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(EM_DIAGRAM):   quit;
52268      quit;
52269      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW을(를) 삭제했습니다.
52270      filename emflow
52270    ! "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Reg\EMFLOWSCORE.sas"
52270    ! ;
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
52271      *------------------------------------------------------------*;
52272      * Reg: Scoring VALIDATE data;
52273      *------------------------------------------------------------*;
52274      data EMWS6.Reg_VALIDATE
52275      / view=EMWS6.Reg_VALIDATE
52276      ;
MPRINT(EM_DIAGRAM):   data EMWS6.Reg_VALIDATE / view=EMWS6.Reg_VALIDATE ;
52277      set EMWS6.Part_VALIDATE
52278      ;
MPRINT(EM_DIAGRAM):   set EMWS6.Part_VALIDATE ;
52279      %inc emflow;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   length I_RESPOND $ 12;
MPRINT(EM_DIAGRAM):   label I_RESPOND = 'Into: RESPOND' ;
MPRINT(EM_DIAGRAM):   *** Target Values;
MPRINT(EM_DIAGRAM):   array REGDRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   label U_RESPOND = 'Unnormalized Into: RESPOND' ;
MPRINT(EM_DIAGRAM):   format U_RESPOND BEST12.;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
MPRINT(EM_DIAGRAM):   ARRAY REGDRU[2] _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for RESPOND ;
MPRINT(EM_DIAGRAM):   drop _Y ;
MPRINT(EM_DIAGRAM):   label F_RESPOND = 'From: RESPOND' ;
MPRINT(EM_DIAGRAM):   length F_RESPOND $ 12;
MPRINT(EM_DIAGRAM):   F_RESPOND = put( RESPOND , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(F_RESPOND,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( RESPOND ) then do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_RESPOND = '0' then do;
MPRINT(EM_DIAGRAM):   _Y = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_RESPOND = '1' then do;
MPRINT(EM_DIAGRAM):   _Y = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
MPRINT(EM_DIAGRAM):   *** Check AGE for missing values ;
MPRINT(EM_DIAGRAM):   if missing( AGE ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check BUY12 for missing values ;
MPRINT(EM_DIAGRAM):   if missing( BUY12 ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check BUY18 for missing values ;
MPRINT(EM_DIAGRAM):   if missing( BUY18 ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check BUY6 for missing values ;
MPRINT(EM_DIAGRAM):   if missing( BUY6 ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check FICO for missing values ;
MPRINT(EM_DIAGRAM):   if missing( FICO ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check INCOME for missing values ;
MPRINT(EM_DIAGRAM):   if missing( INCOME ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check VALUE24 for missing values ;
MPRINT(EM_DIAGRAM):   if missing( VALUE24 ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CLIMATE ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 ;
MPRINT(EM_DIAGRAM):   if missing( CLIMATE ) then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm2 $ 2;
MPRINT(EM_DIAGRAM):   drop _dm2 ;
MPRINT(EM_DIAGRAM):   _dm2 = put( CLIMATE , $CHAR2. );
MPRINT(DMNORMIP):   call dmnorm(_dm2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm2 = '20' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm2 = '30' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm2 = '10' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for COA6 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
MPRINT(EM_DIAGRAM):   if missing( COA6 ) then do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( COA6 , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DISCBUY ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
MPRINT(EM_DIAGRAM):   if missing( DISCBUY ) then do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( DISCBUY , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for LOC ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
MPRINT(EM_DIAGRAM):   _4_5 = 0;
MPRINT(EM_DIAGRAM):   _4_6 = 0;
MPRINT(EM_DIAGRAM):   if missing( LOC ) then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( LOC , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'D' then do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'B' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'A' then do;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'B' then do;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'C' then do;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'D' then do;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'F' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'E' then do;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'F' then do;
MPRINT(EM_DIAGRAM):   _4_5 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'G' then do;
MPRINT(EM_DIAGRAM):   _4_6 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'H' then do;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
MPRINT(EM_DIAGRAM):   _4_5 = -1;
MPRINT(EM_DIAGRAM):   _4_6 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for MARRIED ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
MPRINT(EM_DIAGRAM):   if missing( MARRIED ) then do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( MARRIED , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for ORGSRC ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 _6_3 _6_4 _6_5 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_3 = 0;
MPRINT(EM_DIAGRAM):   _6_4 = 0;
MPRINT(EM_DIAGRAM):   _6_5 = 0;
MPRINT(EM_DIAGRAM):   if missing( ORGSRC ) then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   _6_4 = .;
MPRINT(EM_DIAGRAM):   _6_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( ORGSRC , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'O' then do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'D' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'C' then do;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'D' then do;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'I' then do;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'O' then do;
MPRINT(EM_DIAGRAM):   _6_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'R' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'P' then do;
MPRINT(EM_DIAGRAM):   _6_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'R' then do;
MPRINT(EM_DIAGRAM):   _6_5 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'U' then do;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_3 = -1;
MPRINT(EM_DIAGRAM):   _6_4 = -1;
MPRINT(EM_DIAGRAM):   _6_5 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   _6_4 = .;
MPRINT(EM_DIAGRAM):   _6_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for OWNHOME ;
MPRINT(EM_DIAGRAM):   drop _7_0 ;
MPRINT(EM_DIAGRAM):   if missing( OWNHOME ) then do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( OWNHOME , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for RETURN24 ;
MPRINT(EM_DIAGRAM):   drop _8_0 ;
MPRINT(EM_DIAGRAM):   if missing( RETURN24 ) then do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( RETURN24 , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for SEX ;
MPRINT(EM_DIAGRAM):   drop _9_0 ;
MPRINT(EM_DIAGRAM):   if missing( SEX ) then do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( SEX , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm1 = 'M' then do;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm1 = 'F' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   _P0 = 0.0743134087;
MPRINT(EM_DIAGRAM):   _P1 = 0.9256865913;
MPRINT(EM_DIAGRAM):   goto REGDR1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
MPRINT(EM_DIAGRAM):   *** Effect: AGE ;
MPRINT(EM_DIAGRAM):   _TEMP = AGE ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.02752160716194 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: BUY12 ;
MPRINT(EM_DIAGRAM):   _TEMP = BUY12 ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.25771049332257 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: BUY18 ;
MPRINT(EM_DIAGRAM):   _TEMP = BUY18 ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.59865595317529 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: BUY6 ;
MPRINT(EM_DIAGRAM):   _TEMP = BUY6 ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.20795127507922 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: CLIMATE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.2488816465401) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.24764504033533) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   *** Effect: COA6 ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.32638886609879) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   *** Effect: DISCBUY ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.0381253385596) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   *** Effect: FICO ;
MPRINT(EM_DIAGRAM):   _TEMP = FICO ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00673204794151 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: INCOME ;
MPRINT(EM_DIAGRAM):   _TEMP = INCOME ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0062979417833 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: LOC ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18652032505833) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.12976031480666) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.14860542260053) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.17026139620841) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.0552096603011) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0) * _TEMP * _4_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0) * _TEMP * _4_6;
MPRINT(EM_DIAGRAM):   *** Effect: MARRIED ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.2431995164444) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   *** Effect: ORGSRC ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.08764792448148) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.12930971879112) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.36598390115444) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04778576627026) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.48291776998561) * _TEMP * _6_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01336443491305) * _TEMP * _6_5;
MPRINT(EM_DIAGRAM):   *** Effect: OWNHOME ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15785389993526) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   *** Effect: RETURN24 ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03294790918286) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   *** Effect: SEX ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01034615155437) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   *** Effect: VALUE24 ;
MPRINT(EM_DIAGRAM):   _TEMP = VALUE24 ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00046194298259 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   _TEMP = 3.54285410760808 + _LP0;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   R_RESPOND1 = .;
MPRINT(EM_DIAGRAM):   R_RESPOND0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   label R_RESPOND1 = 'Residual: RESPOND=1' ;
MPRINT(EM_DIAGRAM):   label R_RESPOND0 = 'Residual: RESPOND=0' ;
MPRINT(EM_DIAGRAM):   R_RESPOND1 = - _P0;
MPRINT(EM_DIAGRAM):   R_RESPOND0 = - _P1;
MPRINT(EM_DIAGRAM):   select( _Y );
MPRINT(EM_DIAGRAM):   when (0) R_RESPOND1 = R_RESPOND1 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_RESPOND0 = R_RESPOND0 + 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   label P_RESPOND1 = 'Predicted: RESPOND=1' ;
MPRINT(EM_DIAGRAM):   label P_RESPOND0 = 'Predicted: RESPOND=0' ;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _IY = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   I_RESPOND = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   U_RESPOND = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
52855      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP 뷰가 파일 EMWS6.REG_VALIDATE에 저장되었습니다.
NOTE: 저장된 DATA STEP 뷰는 다른 운영 체제에서 실행할 수 없습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(EM_DIAGRAM):   quit;
52856      quit;
52857      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW을(를) 삭제했습니다.
52858      filename emflow
52858    ! "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Reg\EMFLOWSCORE.sas"
52858    ! ;
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
52859      *------------------------------------------------------------*;
52860      * Reg: Scoring TEST data;
52861      *------------------------------------------------------------*;
52862      data EMWS6.Reg_TEST
52863      / view=EMWS6.Reg_TEST
52864      ;
MPRINT(EM_DIAGRAM):   data EMWS6.Reg_TEST / view=EMWS6.Reg_TEST ;
52865      set EMWS6.Part_TEST
52866      ;
MPRINT(EM_DIAGRAM):   set EMWS6.Part_TEST ;
52867      %inc emflow;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   length I_RESPOND $ 12;
MPRINT(EM_DIAGRAM):   label I_RESPOND = 'Into: RESPOND' ;
MPRINT(EM_DIAGRAM):   *** Target Values;
MPRINT(EM_DIAGRAM):   array REGDRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   label U_RESPOND = 'Unnormalized Into: RESPOND' ;
MPRINT(EM_DIAGRAM):   format U_RESPOND BEST12.;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
MPRINT(EM_DIAGRAM):   ARRAY REGDRU[2] _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for RESPOND ;
MPRINT(EM_DIAGRAM):   drop _Y ;
MPRINT(EM_DIAGRAM):   label F_RESPOND = 'From: RESPOND' ;
MPRINT(EM_DIAGRAM):   length F_RESPOND $ 12;
MPRINT(EM_DIAGRAM):   F_RESPOND = put( RESPOND , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(F_RESPOND,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( RESPOND ) then do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_RESPOND = '0' then do;
MPRINT(EM_DIAGRAM):   _Y = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_RESPOND = '1' then do;
MPRINT(EM_DIAGRAM):   _Y = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
MPRINT(EM_DIAGRAM):   *** Check AGE for missing values ;
MPRINT(EM_DIAGRAM):   if missing( AGE ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check BUY12 for missing values ;
MPRINT(EM_DIAGRAM):   if missing( BUY12 ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check BUY18 for missing values ;
MPRINT(EM_DIAGRAM):   if missing( BUY18 ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check BUY6 for missing values ;
MPRINT(EM_DIAGRAM):   if missing( BUY6 ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check FICO for missing values ;
MPRINT(EM_DIAGRAM):   if missing( FICO ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check INCOME for missing values ;
MPRINT(EM_DIAGRAM):   if missing( INCOME ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check VALUE24 for missing values ;
MPRINT(EM_DIAGRAM):   if missing( VALUE24 ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CLIMATE ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 ;
MPRINT(EM_DIAGRAM):   if missing( CLIMATE ) then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm2 $ 2;
MPRINT(EM_DIAGRAM):   drop _dm2 ;
MPRINT(EM_DIAGRAM):   _dm2 = put( CLIMATE , $CHAR2. );
MPRINT(DMNORMIP):   call dmnorm(_dm2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm2 = '20' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm2 = '30' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm2 = '10' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for COA6 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
MPRINT(EM_DIAGRAM):   if missing( COA6 ) then do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( COA6 , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DISCBUY ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
MPRINT(EM_DIAGRAM):   if missing( DISCBUY ) then do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( DISCBUY , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for LOC ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
MPRINT(EM_DIAGRAM):   _4_5 = 0;
MPRINT(EM_DIAGRAM):   _4_6 = 0;
MPRINT(EM_DIAGRAM):   if missing( LOC ) then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( LOC , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'D' then do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'B' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'A' then do;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'B' then do;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'C' then do;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'D' then do;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'F' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'E' then do;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'F' then do;
MPRINT(EM_DIAGRAM):   _4_5 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'G' then do;
MPRINT(EM_DIAGRAM):   _4_6 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'H' then do;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
MPRINT(EM_DIAGRAM):   _4_5 = -1;
MPRINT(EM_DIAGRAM):   _4_6 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for MARRIED ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
MPRINT(EM_DIAGRAM):   if missing( MARRIED ) then do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( MARRIED , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for ORGSRC ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 _6_3 _6_4 _6_5 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_3 = 0;
MPRINT(EM_DIAGRAM):   _6_4 = 0;
MPRINT(EM_DIAGRAM):   _6_5 = 0;
MPRINT(EM_DIAGRAM):   if missing( ORGSRC ) then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   _6_4 = .;
MPRINT(EM_DIAGRAM):   _6_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( ORGSRC , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'O' then do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'D' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'C' then do;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'D' then do;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'I' then do;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'O' then do;
MPRINT(EM_DIAGRAM):   _6_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'R' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'P' then do;
MPRINT(EM_DIAGRAM):   _6_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'R' then do;
MPRINT(EM_DIAGRAM):   _6_5 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'U' then do;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_3 = -1;
MPRINT(EM_DIAGRAM):   _6_4 = -1;
MPRINT(EM_DIAGRAM):   _6_5 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   _6_4 = .;
MPRINT(EM_DIAGRAM):   _6_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for OWNHOME ;
MPRINT(EM_DIAGRAM):   drop _7_0 ;
MPRINT(EM_DIAGRAM):   if missing( OWNHOME ) then do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( OWNHOME , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for RETURN24 ;
MPRINT(EM_DIAGRAM):   drop _8_0 ;
MPRINT(EM_DIAGRAM):   if missing( RETURN24 ) then do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( RETURN24 , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for SEX ;
MPRINT(EM_DIAGRAM):   drop _9_0 ;
MPRINT(EM_DIAGRAM):   if missing( SEX ) then do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( SEX , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm1 = 'M' then do;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm1 = 'F' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   _P0 = 0.0743134087;
MPRINT(EM_DIAGRAM):   _P1 = 0.9256865913;
MPRINT(EM_DIAGRAM):   goto REGDR1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
MPRINT(EM_DIAGRAM):   *** Effect: AGE ;
MPRINT(EM_DIAGRAM):   _TEMP = AGE ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.02752160716194 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: BUY12 ;
MPRINT(EM_DIAGRAM):   _TEMP = BUY12 ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.25771049332257 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: BUY18 ;
MPRINT(EM_DIAGRAM):   _TEMP = BUY18 ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.59865595317529 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: BUY6 ;
MPRINT(EM_DIAGRAM):   _TEMP = BUY6 ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.20795127507922 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: CLIMATE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.2488816465401) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.24764504033533) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   *** Effect: COA6 ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.32638886609879) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   *** Effect: DISCBUY ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.0381253385596) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   *** Effect: FICO ;
MPRINT(EM_DIAGRAM):   _TEMP = FICO ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00673204794151 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: INCOME ;
MPRINT(EM_DIAGRAM):   _TEMP = INCOME ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0062979417833 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: LOC ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18652032505833) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.12976031480666) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.14860542260053) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.17026139620841) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.0552096603011) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0) * _TEMP * _4_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0) * _TEMP * _4_6;
MPRINT(EM_DIAGRAM):   *** Effect: MARRIED ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.2431995164444) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   *** Effect: ORGSRC ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.08764792448148) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.12930971879112) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.36598390115444) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04778576627026) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.48291776998561) * _TEMP * _6_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01336443491305) * _TEMP * _6_5;
MPRINT(EM_DIAGRAM):   *** Effect: OWNHOME ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15785389993526) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   *** Effect: RETURN24 ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03294790918286) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   *** Effect: SEX ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01034615155437) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   *** Effect: VALUE24 ;
MPRINT(EM_DIAGRAM):   _TEMP = VALUE24 ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00046194298259 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   _TEMP = 3.54285410760808 + _LP0;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   R_RESPOND1 = .;
MPRINT(EM_DIAGRAM):   R_RESPOND0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   label R_RESPOND1 = 'Residual: RESPOND=1' ;
MPRINT(EM_DIAGRAM):   label R_RESPOND0 = 'Residual: RESPOND=0' ;
MPRINT(EM_DIAGRAM):   R_RESPOND1 = - _P0;
MPRINT(EM_DIAGRAM):   R_RESPOND0 = - _P1;
MPRINT(EM_DIAGRAM):   select( _Y );
MPRINT(EM_DIAGRAM):   when (0) R_RESPOND1 = R_RESPOND1 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_RESPOND0 = R_RESPOND0 + 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   label P_RESPOND1 = 'Predicted: RESPOND=1' ;
MPRINT(EM_DIAGRAM):   label P_RESPOND0 = 'Predicted: RESPOND=0' ;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _IY = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   I_RESPOND = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   U_RESPOND = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
53443      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP 뷰가 파일 EMWS6.REG_TEST에 저장되었습니다.
NOTE: 저장된 DATA STEP 뷰는 다른 운영 체제에서 실행할 수 없습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.04 초
      

MPRINT(EM_DIAGRAM):   quit;
53444      quit;
53445      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW을(를) 삭제했습니다.
53446      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
53447      * Reg: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg: Computing metadata for TRAIN data;
53448      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS6.REG_TRAIN.VIEW 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Reg\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS6.Reg_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS6.Reg_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS6.Reg_TRAIN out=WORK.M01CJ10S noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M01CJ10S;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M01CJ10S(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M01CJ10S;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M01CJ10S;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2WJ3WY9 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2WJ3WY9;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2WJ3WY9;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1JCM6I0(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2WJ3WY9;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2WJ3WY9;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2WJ3WY9;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then 
do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 
'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2WJ3WY9;
MPRINT(EMADVISECOLUMNS):   set WORK.M2WJ3WY9;
MPRINT(EMADVISECOLUMNS):   label NAME = "변수 이름" TYPE = "유형" ROLE = "역할" LEVEL= "측도 
레벨" ORDER= "순서" CREATOR= "생성자" FORMATTYPE= "출력형식 유형" FAMILY= "군" DISTRIBUTION= 
"분포" PRICE= "가격" LOWERLIMIT= "하한" UPPERLIMIT= "상한" REPORT= "리포트" COMMENT= "주석" 
INDEX= "인덱스" INDEXTYPE= "인덱스 유형" LABEL= "레이블" LENGTH= "길이";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS6.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS6.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS6.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "모델 노드";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("RESPOND") model = "Reg";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
53793      data EMWS6.Reg_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS6.Reg_EMINFO;
53794      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
53795      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
53796      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: 데이터셋 EMWS6.REG_EMINFO은(는) 3개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(EM_DIAGRAM):   run;
53800      run;
53801      proc sort data = EMWS6.Reg_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS6.Reg_EMINFO NOTHREADS;
53802      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
53803      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 3개의 관측값을 데이터셋 EMWS6.REG_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.REG_EMINFO은(는) 3개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

53804      proc sort data = EMWS6.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS6.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
53805      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
53806      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 3개의 관측값을 데이터셋 EMWS6.IDS_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 WORK.SORTEDEMINFO은(는) 3개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.03 초
      

53807      proc sort data = EMWS6.Reg_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS6.Reg_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
53808      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
53809      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 입력 데이터셋이 이미 정렬되어 있습니다; 출력 데이터셋에 복사되었습니다.
NOTE: 3개의 관측값을 데이터셋 EMWS6.REG_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 WORK.TEMP_INFO은(는) 3개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

53810      data EMWS6.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS6.Reg_EMINFO;
53811      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
53812      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
53813      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 3개의 관측값을 데이터셋 WORK.SORTEDEMINFO.에서 읽었습니다.
NOTE: 3개의 관측값을 데이터셋 WORK.TEMP_INFO.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.REG_EMINFO은(는) 4개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

53814      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
53815      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
53816      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: WORK.TEMP_INFO(memtype=DATA)을(를) 삭제하는 중입니다.
NOTE: WORK.SORTEDEMINFO(memtype=DATA)을(를) 삭제하는 중입니다.
53817      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: 프로시저 DATASETS 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

NOTE: View EMWS6.REG_TRAIN.VIEW 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      
NOTE: View EMWS6.REG_VALIDATE.VIEW 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.03 초
      
NOTE: View EMWS6.REG_TEST.VIEW 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.04 초
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
