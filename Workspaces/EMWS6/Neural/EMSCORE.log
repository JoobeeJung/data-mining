MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "2018년 11월 20일" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "10시00분46초" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 스코어 로그";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* 스코어 로그
날짜:                2018년 11월 20일
시간:                10시00분46초
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0VUYT8N "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0VUYT8N new;
MPRINT(EM_DIAGRAM):   run;
34605      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
34606      set EMWS6.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS6.Neural_OUTKEY;
34607      if upcase(ROLE) in('HIDDEN', 'STANDARD');
MPRINT(EM_DIAGRAM):   if upcase(ROLE) in('HIDDEN', 'STANDARD');
34608      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 43개의 관측값을 데이터셋 EMWS6.NEURAL_OUTKEY.에서 읽었습니다.
NOTE: 데이터셋 WORK.OUTKEY은(는) 10개의 관측값과 8개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

34609      filename emflow "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34610      *------------------------------------------------------------*;
34611      * Neural: Scoring DATA data;
34612      *------------------------------------------------------------*;
34613      data EMWS6.Neural_TRAIN
34614      / view=EMWS6.Neural_TRAIN
34615      ;
MPRINT(EM_DIAGRAM):   data EMWS6.Neural_TRAIN / view=EMWS6.Neural_TRAIN ;
34616      set EMWS6.Part_TRAIN
34617      ;
MPRINT(EM_DIAGRAM):   set EMWS6.Part_TRAIN ;
34618      %inc emflow;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_RESPOND $ 12 ;
MPRINT(EM_DIAGRAM):   label S_AGE = 'Standard: AGE' ;
MPRINT(EM_DIAGRAM):   label S_BUY12 = 'Standard: BUY12' ;
MPRINT(EM_DIAGRAM):   label S_BUY18 = 'Standard: BUY18' ;
MPRINT(EM_DIAGRAM):   label S_BUY6 = 'Standard: BUY6' ;
MPRINT(EM_DIAGRAM):   label S_FICO = 'Standard: FICO' ;
MPRINT(EM_DIAGRAM):   label S_INCOME = 'Standard: INCOME' ;
MPRINT(EM_DIAGRAM):   label S_VALUE24 = 'Standard: VALUE24' ;
MPRINT(EM_DIAGRAM):   label COA60 = 'Dummy: COA6=0' ;
MPRINT(EM_DIAGRAM):   label DISCBUY0 = 'Dummy: DISCBUY=0' ;
MPRINT(EM_DIAGRAM):   label MARRIED0 = 'Dummy: MARRIED=0' ;
MPRINT(EM_DIAGRAM):   label OWNHOME0 = 'Dummy: OWNHOME=0' ;
MPRINT(EM_DIAGRAM):   label RETURN240 = 'Dummy: RETURN24=0' ;
MPRINT(EM_DIAGRAM):   label SEXF = 'Dummy: SEX=F' ;
MPRINT(EM_DIAGRAM):   label CLIMATE10 = 'Dummy: CLIMATE=10' ;
MPRINT(EM_DIAGRAM):   label CLIMATE20 = 'Dummy: CLIMATE=20' ;
MPRINT(EM_DIAGRAM):   label LOCA = 'Dummy: LOC=A' ;
MPRINT(EM_DIAGRAM):   label LOCB = 'Dummy: LOC=B' ;
MPRINT(EM_DIAGRAM):   label LOCC = 'Dummy: LOC=C' ;
MPRINT(EM_DIAGRAM):   label LOCD = 'Dummy: LOC=D' ;
MPRINT(EM_DIAGRAM):   label LOCE = 'Dummy: LOC=E' ;
MPRINT(EM_DIAGRAM):   label LOCF = 'Dummy: LOC=F' ;
MPRINT(EM_DIAGRAM):   label LOCG = 'Dummy: LOC=G' ;
MPRINT(EM_DIAGRAM):   label ORGSRCC = 'Dummy: ORGSRC=C' ;
MPRINT(EM_DIAGRAM):   label ORGSRCD = 'Dummy: ORGSRC=D' ;
MPRINT(EM_DIAGRAM):   label ORGSRCI = 'Dummy: ORGSRC=I' ;
MPRINT(EM_DIAGRAM):   label ORGSRCO = 'Dummy: ORGSRC=O' ;
MPRINT(EM_DIAGRAM):   label ORGSRCP = 'Dummy: ORGSRC=P' ;
MPRINT(EM_DIAGRAM):   label ORGSRCR = 'Dummy: ORGSRC=R' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label I_RESPOND = 'Into: RESPOND' ;
MPRINT(EM_DIAGRAM):   label F_RESPOND = 'From: RESPOND' ;
MPRINT(EM_DIAGRAM):   label U_RESPOND = 'Unnormalized Into: RESPOND' ;
MPRINT(EM_DIAGRAM):   label P_RESPOND1 = 'Predicted: RESPOND=1' ;
MPRINT(EM_DIAGRAM):   label R_RESPOND1 = 'Residual: RESPOND=1' ;
MPRINT(EM_DIAGRAM):   label P_RESPOND0 = 'Predicted: RESPOND=0' ;
MPRINT(EM_DIAGRAM):   label R_RESPOND0 = 'Residual: RESPOND=0' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for COA6 ;
MPRINT(EM_DIAGRAM):   drop COA60 ;
MPRINT(EM_DIAGRAM):   if missing( COA6 ) then do;
MPRINT(EM_DIAGRAM):   COA60 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( COA6 , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   COA60 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   COA60 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   COA60 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DISCBUY ;
MPRINT(EM_DIAGRAM):   drop DISCBUY0 ;
MPRINT(EM_DIAGRAM):   if missing( DISCBUY ) then do;
MPRINT(EM_DIAGRAM):   DISCBUY0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( DISCBUY , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   DISCBUY0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   DISCBUY0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   DISCBUY0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for MARRIED ;
MPRINT(EM_DIAGRAM):   drop MARRIED0 ;
MPRINT(EM_DIAGRAM):   if missing( MARRIED ) then do;
MPRINT(EM_DIAGRAM):   MARRIED0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( MARRIED , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   MARRIED0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   MARRIED0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   MARRIED0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for OWNHOME ;
MPRINT(EM_DIAGRAM):   drop OWNHOME0 ;
MPRINT(EM_DIAGRAM):   if missing( OWNHOME ) then do;
MPRINT(EM_DIAGRAM):   OWNHOME0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( OWNHOME , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   OWNHOME0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   OWNHOME0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   OWNHOME0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for RETURN24 ;
MPRINT(EM_DIAGRAM):   drop RETURN240 ;
MPRINT(EM_DIAGRAM):   if missing( RETURN24 ) then do;
MPRINT(EM_DIAGRAM):   RETURN240 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( RETURN24 , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   RETURN240 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   RETURN240 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   RETURN240 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for SEX ;
MPRINT(EM_DIAGRAM):   drop SEXF ;
MPRINT(EM_DIAGRAM):   if missing( SEX ) then do;
MPRINT(EM_DIAGRAM):   SEXF = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( SEX , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm1 = 'M' then do;
MPRINT(EM_DIAGRAM):   SEXF = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm1 = 'F' then do;
MPRINT(EM_DIAGRAM):   SEXF = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   SEXF = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CLIMATE ;
MPRINT(EM_DIAGRAM):   drop CLIMATE10 CLIMATE20 ;
MPRINT(EM_DIAGRAM):   if missing( CLIMATE ) then do;
MPRINT(EM_DIAGRAM):   CLIMATE10 = .;
MPRINT(EM_DIAGRAM):   CLIMATE20 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm2 $ 2;
MPRINT(EM_DIAGRAM):   drop _dm2 ;
MPRINT(EM_DIAGRAM):   _dm2 = put( CLIMATE , $CHAR2. );
MPRINT(DMNORMIP):   call dmnorm(_dm2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm2 = '20' then do;
MPRINT(EM_DIAGRAM):   CLIMATE10 = 0;
MPRINT(EM_DIAGRAM):   CLIMATE20 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm2 = '30' then do;
MPRINT(EM_DIAGRAM):   CLIMATE10 = -1;
MPRINT(EM_DIAGRAM):   CLIMATE20 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm2 = '10' then do;
MPRINT(EM_DIAGRAM):   CLIMATE10 = 1;
MPRINT(EM_DIAGRAM):   CLIMATE20 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CLIMATE10 = .;
MPRINT(EM_DIAGRAM):   CLIMATE20 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for LOC ;
MPRINT(EM_DIAGRAM):   drop LOCA LOCB LOCC LOCD LOCE LOCF LOCG ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   LOCA = 0;
MPRINT(EM_DIAGRAM):   LOCB = 0;
MPRINT(EM_DIAGRAM):   LOCC = 0;
MPRINT(EM_DIAGRAM):   LOCD = 0;
MPRINT(EM_DIAGRAM):   LOCE = 0;
MPRINT(EM_DIAGRAM):   LOCF = 0;
MPRINT(EM_DIAGRAM):   LOCG = 0;
MPRINT(EM_DIAGRAM):   if missing( LOC ) then do;
MPRINT(EM_DIAGRAM):   LOCA = .;
MPRINT(EM_DIAGRAM):   LOCB = .;
MPRINT(EM_DIAGRAM):   LOCC = .;
MPRINT(EM_DIAGRAM):   LOCD = .;
MPRINT(EM_DIAGRAM):   LOCE = .;
MPRINT(EM_DIAGRAM):   LOCF = .;
MPRINT(EM_DIAGRAM):   LOCG = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( LOC , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'D' then do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'B' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'A' then do;
MPRINT(EM_DIAGRAM):   LOCA = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'B' then do;
MPRINT(EM_DIAGRAM):   LOCB = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'C' then do;
MPRINT(EM_DIAGRAM):   LOCC = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'D' then do;
MPRINT(EM_DIAGRAM):   LOCD = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'F' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'E' then do;
MPRINT(EM_DIAGRAM):   LOCE = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'F' then do;
MPRINT(EM_DIAGRAM):   LOCF = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'G' then do;
MPRINT(EM_DIAGRAM):   LOCG = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'H' then do;
MPRINT(EM_DIAGRAM):   LOCA = -1;
MPRINT(EM_DIAGRAM):   LOCB = -1;
MPRINT(EM_DIAGRAM):   LOCC = -1;
MPRINT(EM_DIAGRAM):   LOCD = -1;
MPRINT(EM_DIAGRAM):   LOCE = -1;
MPRINT(EM_DIAGRAM):   LOCF = -1;
MPRINT(EM_DIAGRAM):   LOCG = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   LOCA = .;
MPRINT(EM_DIAGRAM):   LOCB = .;
MPRINT(EM_DIAGRAM):   LOCC = .;
MPRINT(EM_DIAGRAM):   LOCD = .;
MPRINT(EM_DIAGRAM):   LOCE = .;
MPRINT(EM_DIAGRAM):   LOCF = .;
MPRINT(EM_DIAGRAM):   LOCG = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for ORGSRC ;
MPRINT(EM_DIAGRAM):   drop ORGSRCC ORGSRCD ORGSRCI ORGSRCO ORGSRCP ORGSRCR ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   ORGSRCC = 0;
MPRINT(EM_DIAGRAM):   ORGSRCD = 0;
MPRINT(EM_DIAGRAM):   ORGSRCI = 0;
MPRINT(EM_DIAGRAM):   ORGSRCO = 0;
MPRINT(EM_DIAGRAM):   ORGSRCP = 0;
MPRINT(EM_DIAGRAM):   ORGSRCR = 0;
MPRINT(EM_DIAGRAM):   if missing( ORGSRC ) then do;
MPRINT(EM_DIAGRAM):   ORGSRCC = .;
MPRINT(EM_DIAGRAM):   ORGSRCD = .;
MPRINT(EM_DIAGRAM):   ORGSRCI = .;
MPRINT(EM_DIAGRAM):   ORGSRCO = .;
MPRINT(EM_DIAGRAM):   ORGSRCP = .;
MPRINT(EM_DIAGRAM):   ORGSRCR = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( ORGSRC , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'O' then do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'D' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'C' then do;
MPRINT(EM_DIAGRAM):   ORGSRCC = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'D' then do;
MPRINT(EM_DIAGRAM):   ORGSRCD = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'I' then do;
MPRINT(EM_DIAGRAM):   ORGSRCI = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'O' then do;
MPRINT(EM_DIAGRAM):   ORGSRCO = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'R' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'P' then do;
MPRINT(EM_DIAGRAM):   ORGSRCP = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'R' then do;
MPRINT(EM_DIAGRAM):   ORGSRCR = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'U' then do;
MPRINT(EM_DIAGRAM):   ORGSRCC = -1;
MPRINT(EM_DIAGRAM):   ORGSRCD = -1;
MPRINT(EM_DIAGRAM):   ORGSRCI = -1;
MPRINT(EM_DIAGRAM):   ORGSRCO = -1;
MPRINT(EM_DIAGRAM):   ORGSRCP = -1;
MPRINT(EM_DIAGRAM):   ORGSRCR = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   ORGSRCC = .;
MPRINT(EM_DIAGRAM):   ORGSRCD = .;
MPRINT(EM_DIAGRAM):   ORGSRCI = .;
MPRINT(EM_DIAGRAM):   ORGSRCO = .;
MPRINT(EM_DIAGRAM):   ORGSRCP = .;
MPRINT(EM_DIAGRAM):   ORGSRCR = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
MPRINT(EM_DIAGRAM):   IF NMISS( AGE , BUY12 , BUY18 , BUY6 , FICO , INCOME , VALUE24 ) THEN DO;
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   S_AGE = -4.41220858751264 + 0.09911431652588 * AGE ;
MPRINT(EM_DIAGRAM):   S_BUY12 = -0.47495016976613 + 2.34774502953616 * BUY12 ;
MPRINT(EM_DIAGRAM):   S_BUY18 = -0.59899695416057 + 1.75743860578732 * BUY18 ;
MPRINT(EM_DIAGRAM):   S_BUY6 = -0.35938865799343 + 2.96941165974324 * BUY6 ;
MPRINT(EM_DIAGRAM):   S_FICO = -23.7003109498374 + 0.03411600761233 * FICO ;
MPRINT(EM_DIAGRAM):   S_INCOME = -2.9309588225649 + 0.06162016678243 * INCOME ;
MPRINT(EM_DIAGRAM):   S_VALUE24 = -1.65368962520984 + 0.00645651495403 * VALUE24 ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF MISSING( AGE ) THEN S_AGE = . ;
MPRINT(EM_DIAGRAM):   ELSE S_AGE = -4.41220858751264 + 0.09911431652588 * AGE ;
MPRINT(EM_DIAGRAM):   IF MISSING( BUY12 ) THEN S_BUY12 = . ;
MPRINT(EM_DIAGRAM):   ELSE S_BUY12 = -0.47495016976613 + 2.34774502953616 * BUY12 ;
MPRINT(EM_DIAGRAM):   IF MISSING( BUY18 ) THEN S_BUY18 = . ;
MPRINT(EM_DIAGRAM):   ELSE S_BUY18 = -0.59899695416057 + 1.75743860578732 * BUY18 ;
MPRINT(EM_DIAGRAM):   IF MISSING( BUY6 ) THEN S_BUY6 = . ;
MPRINT(EM_DIAGRAM):   ELSE S_BUY6 = -0.35938865799343 + 2.96941165974324 * BUY6 ;
MPRINT(EM_DIAGRAM):   IF MISSING( FICO ) THEN S_FICO = . ;
MPRINT(EM_DIAGRAM):   ELSE S_FICO = -23.7003109498374 + 0.03411600761233 * FICO ;
MPRINT(EM_DIAGRAM):   IF MISSING( INCOME ) THEN S_INCOME = . ;
MPRINT(EM_DIAGRAM):   ELSE S_INCOME = -2.9309588225649 + 0.06162016678243 * INCOME ;
MPRINT(EM_DIAGRAM):   IF MISSING( VALUE24 ) THEN S_VALUE24 = . ;
MPRINT(EM_DIAGRAM):   ELSE S_VALUE24 = -1.65368962520984 + 0.00645651495403 * VALUE24 ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   H11 = -1.63844613947577 * S_AGE + -0.0006834495316 * S_BUY12 + -1.11920941857236 * S_BUY18 + -0.15449094415096 * S_BUY6 + -0.36108421052445 * S_FICO + 0.29193651520759 * S_INCOME + -0.53974295029901 * S_VALUE24 ;
MPRINT(EM_DIAGRAM):   H12 = 2.04070186234985 * S_AGE + -0.82334081428811 * S_BUY12 + 0.91553224280882 * S_BUY18 + -0.50033050635957 * S_BUY6 + -1.43166253029579 * S_FICO + 1.53196393911802 * S_INCOME + 1.17270711955564 * S_VALUE24 ;
MPRINT(EM_DIAGRAM):   H13 = 0.84574733578473 * S_AGE + 0.18802877429238 * S_BUY12 + -1.89191139981326 * S_BUY18 + 0.20058908494166 * S_BUY6 + -0.01161876595264 * S_FICO + 1.03788205942031 * S_INCOME + -0.04924604220188 * S_VALUE24 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.1988644311203 * COA60 + 0.68224787732582 * DISCBUY0 + -1.53390155389653 * MARRIED0 + 2.00437791742167 * OWNHOME0 + 0.88877058553497 * RETURN240 + -0.90483360227295 * SEXF ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.37262471971785 * COA60 + -0.2049179662907 * DISCBUY0 + 0.10126199387394 * MARRIED0 + -1.51051913605472 * OWNHOME0 + -1.67939230329831 * RETURN240 + 0.0498695322584 * SEXF ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.86228008872216 * COA60 + 0.61114127966391 * DISCBUY0 + 0.04574756543432 * MARRIED0 + 0.55158128240389 * OWNHOME0 + 0.19412426500861 * RETURN240 + -0.56321531111583 * SEXF ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 1.1818176049225 * CLIMATE10 + -1.32058220720595 * CLIMATE20 + -0.58467627942889 * LOCA + -0.68972041678241 * LOCB + 0.30774237767357 * LOCC + 1.53078886973103 * LOCD + -0.34280592357562 * LOCE + -0.83618623857709 * LOCF + 
0.01349481352948 * LOCG + -1.16955338386382 * ORGSRCC + 0.2455345729593 * ORGSRCD + 1.08120148293387 * ORGSRCI + -0.88297036165384 * ORGSRCO + 1.00916264530826 * ORGSRCP + 0.9602561921295 * ORGSRCR ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.12745978178409 * CLIMATE10 + -1.00277157738408 * CLIMATE20 + -0.98868063297518 * LOCA + -0.96820178142632 * LOCB + 2.34325778788059 * LOCC + -0.45228620744141 * LOCD + 0.33681000164501 * LOCE + -0.53346358071112 * LOCF 
+ 0.07322369931179 * LOCG + 0.71346080215181 * ORGSRCC + -0.15781793379033 * ORGSRCD + -4.85198276807088 * ORGSRCI + 1.76010505508802 * ORGSRCO + 1.22048952682581 * ORGSRCP + 1.46892428056809 * ORGSRCR ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.09097091651634 * CLIMATE10 + -0.3965639355109 * CLIMATE20 + -0.50515435042955 * LOCA + -0.6025682016322 * LOCB + -0.21236281616384 * LOCC + -0.65003155376952 * LOCD + 0.75926680476961 * LOCE + -0.60543681094647 * LOCF + 
-0.26230283406764 * LOCG + -0.73511454268996 * ORGSRCC + 0.75076149399272 * ORGSRCD + 0.32730886330929 * ORGSRCI + -0.05672858974123 * ORGSRCO + -0.33079089144214 * ORGSRCP + 1.35547292991141 * ORGSRCR ;
MPRINT(EM_DIAGRAM):   H11 = 1.94012350352894 + H11 ;
MPRINT(EM_DIAGRAM):   H12 = -3.49518156519206 + H12 ;
MPRINT(EM_DIAGRAM):   H13 = 1.19970335108207 + H13 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   H11 = .;
MPRINT(EM_DIAGRAM):   H12 = .;
MPRINT(EM_DIAGRAM):   H13 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node RESPOND ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for RESPOND ;
MPRINT(EM_DIAGRAM):   drop RESPOND1 RESPOND0 ;
MPRINT(EM_DIAGRAM):   label F_RESPOND = 'From: RESPOND' ;
MPRINT(EM_DIAGRAM):   length F_RESPOND $ 12;
MPRINT(EM_DIAGRAM):   F_RESPOND = put( RESPOND , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(F_RESPOND,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( RESPOND ) then do;
MPRINT(EM_DIAGRAM):   RESPOND1 = .;
MPRINT(EM_DIAGRAM):   RESPOND0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_RESPOND = '0' then do;
MPRINT(EM_DIAGRAM):   RESPOND1 = 0;
MPRINT(EM_DIAGRAM):   RESPOND0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_RESPOND = '1' then do;
MPRINT(EM_DIAGRAM):   RESPOND1 = 1;
MPRINT(EM_DIAGRAM):   RESPOND0 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   RESPOND1 = .;
MPRINT(EM_DIAGRAM):   RESPOND0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = 1.24114471688656 * H11 + 0.68120616904803 * H12 + -1.0075458443965 * H13 ;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = -2.2955746741664 + P_RESPOND1 ;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = 0;
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_RESPOND1 , P_RESPOND0 );
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = EXP(P_RESPOND1 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_RESPOND1 ;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = EXP(P_RESPOND0 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_RESPOND0 ;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = P_RESPOND1 / _SUM_;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = P_RESPOND0 / _SUM_;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = .;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = 0.07431340872374;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = 0.92568659127625;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *****************************;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node RESPOND ;
MPRINT(EM_DIAGRAM):   *** ******************************;
MPRINT(EM_DIAGRAM):   IF MISSING( RESPOND1 ) THEN R_RESPOND1 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_RESPOND1 = RESPOND1 - P_RESPOND1 ;
MPRINT(EM_DIAGRAM):   IF MISSING( RESPOND0 ) THEN R_RESPOND0 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_RESPOND0 = RESPOND0 - P_RESPOND0 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the I_RESPOND AND U_RESPOND ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_RESPOND1 ;
MPRINT(EM_DIAGRAM):   I_RESPOND = "1           " ;
MPRINT(EM_DIAGRAM):   U_RESPOND = 1;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_RESPOND0 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_RESPOND0 ;
MPRINT(EM_DIAGRAM):   I_RESPOND = "0           " ;
MPRINT(EM_DIAGRAM):   U_RESPOND = 0;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   drop S_AGE S_BUY12 S_BUY18 S_BUY6 S_FICO S_INCOME S_VALUE24 H11 H12 H13 ;
MPRINT(EM_DIAGRAM):   run;
35268      run;

NOTE: DATA STEP 뷰가 파일 EMWS6.NEURAL_TRAIN에 저장되었습니다.
NOTE: 저장된 DATA STEP 뷰는 다른 운영 체제에서 실행할 수 없습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.07 초
      cpu 시간            0.06 초
      

MPRINT(EM_DIAGRAM):   quit;
35269      quit;
35270      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW을(를) 삭제했습니다.
35271      filename emflow "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35272      *------------------------------------------------------------*;
35273      * Neural: Scoring VALIDATE data;
35274      *------------------------------------------------------------*;
35275      data EMWS6.Neural_VALIDATE
35276      / view=EMWS6.Neural_VALIDATE
35277      ;
MPRINT(EM_DIAGRAM):   data EMWS6.Neural_VALIDATE / view=EMWS6.Neural_VALIDATE ;
35278      set EMWS6.Part_VALIDATE
35279      ;
MPRINT(EM_DIAGRAM):   set EMWS6.Part_VALIDATE ;
35280      %inc emflow;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_RESPOND $ 12 ;
MPRINT(EM_DIAGRAM):   label S_AGE = 'Standard: AGE' ;
MPRINT(EM_DIAGRAM):   label S_BUY12 = 'Standard: BUY12' ;
MPRINT(EM_DIAGRAM):   label S_BUY18 = 'Standard: BUY18' ;
MPRINT(EM_DIAGRAM):   label S_BUY6 = 'Standard: BUY6' ;
MPRINT(EM_DIAGRAM):   label S_FICO = 'Standard: FICO' ;
MPRINT(EM_DIAGRAM):   label S_INCOME = 'Standard: INCOME' ;
MPRINT(EM_DIAGRAM):   label S_VALUE24 = 'Standard: VALUE24' ;
MPRINT(EM_DIAGRAM):   label COA60 = 'Dummy: COA6=0' ;
MPRINT(EM_DIAGRAM):   label DISCBUY0 = 'Dummy: DISCBUY=0' ;
MPRINT(EM_DIAGRAM):   label MARRIED0 = 'Dummy: MARRIED=0' ;
MPRINT(EM_DIAGRAM):   label OWNHOME0 = 'Dummy: OWNHOME=0' ;
MPRINT(EM_DIAGRAM):   label RETURN240 = 'Dummy: RETURN24=0' ;
MPRINT(EM_DIAGRAM):   label SEXF = 'Dummy: SEX=F' ;
MPRINT(EM_DIAGRAM):   label CLIMATE10 = 'Dummy: CLIMATE=10' ;
MPRINT(EM_DIAGRAM):   label CLIMATE20 = 'Dummy: CLIMATE=20' ;
MPRINT(EM_DIAGRAM):   label LOCA = 'Dummy: LOC=A' ;
MPRINT(EM_DIAGRAM):   label LOCB = 'Dummy: LOC=B' ;
MPRINT(EM_DIAGRAM):   label LOCC = 'Dummy: LOC=C' ;
MPRINT(EM_DIAGRAM):   label LOCD = 'Dummy: LOC=D' ;
MPRINT(EM_DIAGRAM):   label LOCE = 'Dummy: LOC=E' ;
MPRINT(EM_DIAGRAM):   label LOCF = 'Dummy: LOC=F' ;
MPRINT(EM_DIAGRAM):   label LOCG = 'Dummy: LOC=G' ;
MPRINT(EM_DIAGRAM):   label ORGSRCC = 'Dummy: ORGSRC=C' ;
MPRINT(EM_DIAGRAM):   label ORGSRCD = 'Dummy: ORGSRC=D' ;
MPRINT(EM_DIAGRAM):   label ORGSRCI = 'Dummy: ORGSRC=I' ;
MPRINT(EM_DIAGRAM):   label ORGSRCO = 'Dummy: ORGSRC=O' ;
MPRINT(EM_DIAGRAM):   label ORGSRCP = 'Dummy: ORGSRC=P' ;
MPRINT(EM_DIAGRAM):   label ORGSRCR = 'Dummy: ORGSRC=R' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label I_RESPOND = 'Into: RESPOND' ;
MPRINT(EM_DIAGRAM):   label F_RESPOND = 'From: RESPOND' ;
MPRINT(EM_DIAGRAM):   label U_RESPOND = 'Unnormalized Into: RESPOND' ;
MPRINT(EM_DIAGRAM):   label P_RESPOND1 = 'Predicted: RESPOND=1' ;
MPRINT(EM_DIAGRAM):   label R_RESPOND1 = 'Residual: RESPOND=1' ;
MPRINT(EM_DIAGRAM):   label P_RESPOND0 = 'Predicted: RESPOND=0' ;
MPRINT(EM_DIAGRAM):   label R_RESPOND0 = 'Residual: RESPOND=0' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for COA6 ;
MPRINT(EM_DIAGRAM):   drop COA60 ;
MPRINT(EM_DIAGRAM):   if missing( COA6 ) then do;
MPRINT(EM_DIAGRAM):   COA60 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( COA6 , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   COA60 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   COA60 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   COA60 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DISCBUY ;
MPRINT(EM_DIAGRAM):   drop DISCBUY0 ;
MPRINT(EM_DIAGRAM):   if missing( DISCBUY ) then do;
MPRINT(EM_DIAGRAM):   DISCBUY0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( DISCBUY , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   DISCBUY0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   DISCBUY0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   DISCBUY0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for MARRIED ;
MPRINT(EM_DIAGRAM):   drop MARRIED0 ;
MPRINT(EM_DIAGRAM):   if missing( MARRIED ) then do;
MPRINT(EM_DIAGRAM):   MARRIED0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( MARRIED , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   MARRIED0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   MARRIED0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   MARRIED0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for OWNHOME ;
MPRINT(EM_DIAGRAM):   drop OWNHOME0 ;
MPRINT(EM_DIAGRAM):   if missing( OWNHOME ) then do;
MPRINT(EM_DIAGRAM):   OWNHOME0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( OWNHOME , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   OWNHOME0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   OWNHOME0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   OWNHOME0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for RETURN24 ;
MPRINT(EM_DIAGRAM):   drop RETURN240 ;
MPRINT(EM_DIAGRAM):   if missing( RETURN24 ) then do;
MPRINT(EM_DIAGRAM):   RETURN240 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( RETURN24 , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   RETURN240 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   RETURN240 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   RETURN240 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for SEX ;
MPRINT(EM_DIAGRAM):   drop SEXF ;
MPRINT(EM_DIAGRAM):   if missing( SEX ) then do;
MPRINT(EM_DIAGRAM):   SEXF = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( SEX , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm1 = 'M' then do;
MPRINT(EM_DIAGRAM):   SEXF = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm1 = 'F' then do;
MPRINT(EM_DIAGRAM):   SEXF = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   SEXF = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CLIMATE ;
MPRINT(EM_DIAGRAM):   drop CLIMATE10 CLIMATE20 ;
MPRINT(EM_DIAGRAM):   if missing( CLIMATE ) then do;
MPRINT(EM_DIAGRAM):   CLIMATE10 = .;
MPRINT(EM_DIAGRAM):   CLIMATE20 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm2 $ 2;
MPRINT(EM_DIAGRAM):   drop _dm2 ;
MPRINT(EM_DIAGRAM):   _dm2 = put( CLIMATE , $CHAR2. );
MPRINT(DMNORMIP):   call dmnorm(_dm2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm2 = '20' then do;
MPRINT(EM_DIAGRAM):   CLIMATE10 = 0;
MPRINT(EM_DIAGRAM):   CLIMATE20 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm2 = '30' then do;
MPRINT(EM_DIAGRAM):   CLIMATE10 = -1;
MPRINT(EM_DIAGRAM):   CLIMATE20 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm2 = '10' then do;
MPRINT(EM_DIAGRAM):   CLIMATE10 = 1;
MPRINT(EM_DIAGRAM):   CLIMATE20 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CLIMATE10 = .;
MPRINT(EM_DIAGRAM):   CLIMATE20 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for LOC ;
MPRINT(EM_DIAGRAM):   drop LOCA LOCB LOCC LOCD LOCE LOCF LOCG ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   LOCA = 0;
MPRINT(EM_DIAGRAM):   LOCB = 0;
MPRINT(EM_DIAGRAM):   LOCC = 0;
MPRINT(EM_DIAGRAM):   LOCD = 0;
MPRINT(EM_DIAGRAM):   LOCE = 0;
MPRINT(EM_DIAGRAM):   LOCF = 0;
MPRINT(EM_DIAGRAM):   LOCG = 0;
MPRINT(EM_DIAGRAM):   if missing( LOC ) then do;
MPRINT(EM_DIAGRAM):   LOCA = .;
MPRINT(EM_DIAGRAM):   LOCB = .;
MPRINT(EM_DIAGRAM):   LOCC = .;
MPRINT(EM_DIAGRAM):   LOCD = .;
MPRINT(EM_DIAGRAM):   LOCE = .;
MPRINT(EM_DIAGRAM):   LOCF = .;
MPRINT(EM_DIAGRAM):   LOCG = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( LOC , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'D' then do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'B' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'A' then do;
MPRINT(EM_DIAGRAM):   LOCA = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'B' then do;
MPRINT(EM_DIAGRAM):   LOCB = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'C' then do;
MPRINT(EM_DIAGRAM):   LOCC = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'D' then do;
MPRINT(EM_DIAGRAM):   LOCD = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'F' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'E' then do;
MPRINT(EM_DIAGRAM):   LOCE = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'F' then do;
MPRINT(EM_DIAGRAM):   LOCF = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'G' then do;
MPRINT(EM_DIAGRAM):   LOCG = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'H' then do;
MPRINT(EM_DIAGRAM):   LOCA = -1;
MPRINT(EM_DIAGRAM):   LOCB = -1;
MPRINT(EM_DIAGRAM):   LOCC = -1;
MPRINT(EM_DIAGRAM):   LOCD = -1;
MPRINT(EM_DIAGRAM):   LOCE = -1;
MPRINT(EM_DIAGRAM):   LOCF = -1;
MPRINT(EM_DIAGRAM):   LOCG = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   LOCA = .;
MPRINT(EM_DIAGRAM):   LOCB = .;
MPRINT(EM_DIAGRAM):   LOCC = .;
MPRINT(EM_DIAGRAM):   LOCD = .;
MPRINT(EM_DIAGRAM):   LOCE = .;
MPRINT(EM_DIAGRAM):   LOCF = .;
MPRINT(EM_DIAGRAM):   LOCG = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for ORGSRC ;
MPRINT(EM_DIAGRAM):   drop ORGSRCC ORGSRCD ORGSRCI ORGSRCO ORGSRCP ORGSRCR ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   ORGSRCC = 0;
MPRINT(EM_DIAGRAM):   ORGSRCD = 0;
MPRINT(EM_DIAGRAM):   ORGSRCI = 0;
MPRINT(EM_DIAGRAM):   ORGSRCO = 0;
MPRINT(EM_DIAGRAM):   ORGSRCP = 0;
MPRINT(EM_DIAGRAM):   ORGSRCR = 0;
MPRINT(EM_DIAGRAM):   if missing( ORGSRC ) then do;
MPRINT(EM_DIAGRAM):   ORGSRCC = .;
MPRINT(EM_DIAGRAM):   ORGSRCD = .;
MPRINT(EM_DIAGRAM):   ORGSRCI = .;
MPRINT(EM_DIAGRAM):   ORGSRCO = .;
MPRINT(EM_DIAGRAM):   ORGSRCP = .;
MPRINT(EM_DIAGRAM):   ORGSRCR = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( ORGSRC , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'O' then do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'D' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'C' then do;
MPRINT(EM_DIAGRAM):   ORGSRCC = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'D' then do;
MPRINT(EM_DIAGRAM):   ORGSRCD = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'I' then do;
MPRINT(EM_DIAGRAM):   ORGSRCI = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'O' then do;
MPRINT(EM_DIAGRAM):   ORGSRCO = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'R' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'P' then do;
MPRINT(EM_DIAGRAM):   ORGSRCP = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'R' then do;
MPRINT(EM_DIAGRAM):   ORGSRCR = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'U' then do;
MPRINT(EM_DIAGRAM):   ORGSRCC = -1;
MPRINT(EM_DIAGRAM):   ORGSRCD = -1;
MPRINT(EM_DIAGRAM):   ORGSRCI = -1;
MPRINT(EM_DIAGRAM):   ORGSRCO = -1;
MPRINT(EM_DIAGRAM):   ORGSRCP = -1;
MPRINT(EM_DIAGRAM):   ORGSRCR = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   ORGSRCC = .;
MPRINT(EM_DIAGRAM):   ORGSRCD = .;
MPRINT(EM_DIAGRAM):   ORGSRCI = .;
MPRINT(EM_DIAGRAM):   ORGSRCO = .;
MPRINT(EM_DIAGRAM):   ORGSRCP = .;
MPRINT(EM_DIAGRAM):   ORGSRCR = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
MPRINT(EM_DIAGRAM):   IF NMISS( AGE , BUY12 , BUY18 , BUY6 , FICO , INCOME , VALUE24 ) THEN DO;
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   S_AGE = -4.41220858751264 + 0.09911431652588 * AGE ;
MPRINT(EM_DIAGRAM):   S_BUY12 = -0.47495016976613 + 2.34774502953616 * BUY12 ;
MPRINT(EM_DIAGRAM):   S_BUY18 = -0.59899695416057 + 1.75743860578732 * BUY18 ;
MPRINT(EM_DIAGRAM):   S_BUY6 = -0.35938865799343 + 2.96941165974324 * BUY6 ;
MPRINT(EM_DIAGRAM):   S_FICO = -23.7003109498374 + 0.03411600761233 * FICO ;
MPRINT(EM_DIAGRAM):   S_INCOME = -2.9309588225649 + 0.06162016678243 * INCOME ;
MPRINT(EM_DIAGRAM):   S_VALUE24 = -1.65368962520984 + 0.00645651495403 * VALUE24 ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF MISSING( AGE ) THEN S_AGE = . ;
MPRINT(EM_DIAGRAM):   ELSE S_AGE = -4.41220858751264 + 0.09911431652588 * AGE ;
MPRINT(EM_DIAGRAM):   IF MISSING( BUY12 ) THEN S_BUY12 = . ;
MPRINT(EM_DIAGRAM):   ELSE S_BUY12 = -0.47495016976613 + 2.34774502953616 * BUY12 ;
MPRINT(EM_DIAGRAM):   IF MISSING( BUY18 ) THEN S_BUY18 = . ;
MPRINT(EM_DIAGRAM):   ELSE S_BUY18 = -0.59899695416057 + 1.75743860578732 * BUY18 ;
MPRINT(EM_DIAGRAM):   IF MISSING( BUY6 ) THEN S_BUY6 = . ;
MPRINT(EM_DIAGRAM):   ELSE S_BUY6 = -0.35938865799343 + 2.96941165974324 * BUY6 ;
MPRINT(EM_DIAGRAM):   IF MISSING( FICO ) THEN S_FICO = . ;
MPRINT(EM_DIAGRAM):   ELSE S_FICO = -23.7003109498374 + 0.03411600761233 * FICO ;
MPRINT(EM_DIAGRAM):   IF MISSING( INCOME ) THEN S_INCOME = . ;
MPRINT(EM_DIAGRAM):   ELSE S_INCOME = -2.9309588225649 + 0.06162016678243 * INCOME ;
MPRINT(EM_DIAGRAM):   IF MISSING( VALUE24 ) THEN S_VALUE24 = . ;
MPRINT(EM_DIAGRAM):   ELSE S_VALUE24 = -1.65368962520984 + 0.00645651495403 * VALUE24 ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   H11 = -1.63844613947577 * S_AGE + -0.0006834495316 * S_BUY12 + -1.11920941857236 * S_BUY18 + -0.15449094415096 * S_BUY6 + -0.36108421052445 * S_FICO + 0.29193651520759 * S_INCOME + -0.53974295029901 * S_VALUE24 ;
MPRINT(EM_DIAGRAM):   H12 = 2.04070186234985 * S_AGE + -0.82334081428811 * S_BUY12 + 0.91553224280882 * S_BUY18 + -0.50033050635957 * S_BUY6 + -1.43166253029579 * S_FICO + 1.53196393911802 * S_INCOME + 1.17270711955564 * S_VALUE24 ;
MPRINT(EM_DIAGRAM):   H13 = 0.84574733578473 * S_AGE + 0.18802877429238 * S_BUY12 + -1.89191139981326 * S_BUY18 + 0.20058908494166 * S_BUY6 + -0.01161876595264 * S_FICO + 1.03788205942031 * S_INCOME + -0.04924604220188 * S_VALUE24 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.1988644311203 * COA60 + 0.68224787732582 * DISCBUY0 + -1.53390155389653 * MARRIED0 + 2.00437791742167 * OWNHOME0 + 0.88877058553497 * RETURN240 + -0.90483360227295 * SEXF ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.37262471971785 * COA60 + -0.2049179662907 * DISCBUY0 + 0.10126199387394 * MARRIED0 + -1.51051913605472 * OWNHOME0 + -1.67939230329831 * RETURN240 + 0.0498695322584 * SEXF ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.86228008872216 * COA60 + 0.61114127966391 * DISCBUY0 + 0.04574756543432 * MARRIED0 + 0.55158128240389 * OWNHOME0 + 0.19412426500861 * RETURN240 + -0.56321531111583 * SEXF ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 1.1818176049225 * CLIMATE10 + -1.32058220720595 * CLIMATE20 + -0.58467627942889 * LOCA + -0.68972041678241 * LOCB + 0.30774237767357 * LOCC + 1.53078886973103 * LOCD + -0.34280592357562 * LOCE + -0.83618623857709 * LOCF + 
0.01349481352948 * LOCG + -1.16955338386382 * ORGSRCC + 0.2455345729593 * ORGSRCD + 1.08120148293387 * ORGSRCI + -0.88297036165384 * ORGSRCO + 1.00916264530826 * ORGSRCP + 0.9602561921295 * ORGSRCR ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.12745978178409 * CLIMATE10 + -1.00277157738408 * CLIMATE20 + -0.98868063297518 * LOCA + -0.96820178142632 * LOCB + 2.34325778788059 * LOCC + -0.45228620744141 * LOCD + 0.33681000164501 * LOCE + -0.53346358071112 * LOCF 
+ 0.07322369931179 * LOCG + 0.71346080215181 * ORGSRCC + -0.15781793379033 * ORGSRCD + -4.85198276807088 * ORGSRCI + 1.76010505508802 * ORGSRCO + 1.22048952682581 * ORGSRCP + 1.46892428056809 * ORGSRCR ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.09097091651634 * CLIMATE10 + -0.3965639355109 * CLIMATE20 + -0.50515435042955 * LOCA + -0.6025682016322 * LOCB + -0.21236281616384 * LOCC + -0.65003155376952 * LOCD + 0.75926680476961 * LOCE + -0.60543681094647 * LOCF + 
-0.26230283406764 * LOCG + -0.73511454268996 * ORGSRCC + 0.75076149399272 * ORGSRCD + 0.32730886330929 * ORGSRCI + -0.05672858974123 * ORGSRCO + -0.33079089144214 * ORGSRCP + 1.35547292991141 * ORGSRCR ;
MPRINT(EM_DIAGRAM):   H11 = 1.94012350352894 + H11 ;
MPRINT(EM_DIAGRAM):   H12 = -3.49518156519206 + H12 ;
MPRINT(EM_DIAGRAM):   H13 = 1.19970335108207 + H13 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   H11 = .;
MPRINT(EM_DIAGRAM):   H12 = .;
MPRINT(EM_DIAGRAM):   H13 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node RESPOND ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for RESPOND ;
MPRINT(EM_DIAGRAM):   drop RESPOND1 RESPOND0 ;
MPRINT(EM_DIAGRAM):   label F_RESPOND = 'From: RESPOND' ;
MPRINT(EM_DIAGRAM):   length F_RESPOND $ 12;
MPRINT(EM_DIAGRAM):   F_RESPOND = put( RESPOND , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(F_RESPOND,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( RESPOND ) then do;
MPRINT(EM_DIAGRAM):   RESPOND1 = .;
MPRINT(EM_DIAGRAM):   RESPOND0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_RESPOND = '0' then do;
MPRINT(EM_DIAGRAM):   RESPOND1 = 0;
MPRINT(EM_DIAGRAM):   RESPOND0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_RESPOND = '1' then do;
MPRINT(EM_DIAGRAM):   RESPOND1 = 1;
MPRINT(EM_DIAGRAM):   RESPOND0 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   RESPOND1 = .;
MPRINT(EM_DIAGRAM):   RESPOND0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = 1.24114471688656 * H11 + 0.68120616904803 * H12 + -1.0075458443965 * H13 ;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = -2.2955746741664 + P_RESPOND1 ;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = 0;
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_RESPOND1 , P_RESPOND0 );
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = EXP(P_RESPOND1 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_RESPOND1 ;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = EXP(P_RESPOND0 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_RESPOND0 ;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = P_RESPOND1 / _SUM_;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = P_RESPOND0 / _SUM_;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = .;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = 0.07431340872374;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = 0.92568659127625;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *****************************;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node RESPOND ;
MPRINT(EM_DIAGRAM):   *** ******************************;
MPRINT(EM_DIAGRAM):   IF MISSING( RESPOND1 ) THEN R_RESPOND1 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_RESPOND1 = RESPOND1 - P_RESPOND1 ;
MPRINT(EM_DIAGRAM):   IF MISSING( RESPOND0 ) THEN R_RESPOND0 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_RESPOND0 = RESPOND0 - P_RESPOND0 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the I_RESPOND AND U_RESPOND ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_RESPOND1 ;
MPRINT(EM_DIAGRAM):   I_RESPOND = "1           " ;
MPRINT(EM_DIAGRAM):   U_RESPOND = 1;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_RESPOND0 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_RESPOND0 ;
MPRINT(EM_DIAGRAM):   I_RESPOND = "0           " ;
MPRINT(EM_DIAGRAM):   U_RESPOND = 0;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   drop S_AGE S_BUY12 S_BUY18 S_BUY6 S_FICO S_INCOME S_VALUE24 H11 H12 H13 ;
35930      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP 뷰가 파일 EMWS6.NEURAL_VALIDATE에 저장되었습니다.
NOTE: 저장된 DATA STEP 뷰는 다른 운영 체제에서 실행할 수 없습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.03 초
      

MPRINT(EM_DIAGRAM):   quit;
35931      quit;
35932      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW을(를) 삭제했습니다.
35933      filename emflow "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35934      *------------------------------------------------------------*;
35935      * Neural: Scoring TEST data;
35936      *------------------------------------------------------------*;
35937      data EMWS6.Neural_TEST
35938      / view=EMWS6.Neural_TEST
35939      ;
MPRINT(EM_DIAGRAM):   data EMWS6.Neural_TEST / view=EMWS6.Neural_TEST ;
35940      set EMWS6.Part_TEST
35941      ;
MPRINT(EM_DIAGRAM):   set EMWS6.Part_TEST ;
35942      %inc emflow;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_RESPOND $ 12 ;
MPRINT(EM_DIAGRAM):   label S_AGE = 'Standard: AGE' ;
MPRINT(EM_DIAGRAM):   label S_BUY12 = 'Standard: BUY12' ;
MPRINT(EM_DIAGRAM):   label S_BUY18 = 'Standard: BUY18' ;
MPRINT(EM_DIAGRAM):   label S_BUY6 = 'Standard: BUY6' ;
MPRINT(EM_DIAGRAM):   label S_FICO = 'Standard: FICO' ;
MPRINT(EM_DIAGRAM):   label S_INCOME = 'Standard: INCOME' ;
MPRINT(EM_DIAGRAM):   label S_VALUE24 = 'Standard: VALUE24' ;
MPRINT(EM_DIAGRAM):   label COA60 = 'Dummy: COA6=0' ;
MPRINT(EM_DIAGRAM):   label DISCBUY0 = 'Dummy: DISCBUY=0' ;
MPRINT(EM_DIAGRAM):   label MARRIED0 = 'Dummy: MARRIED=0' ;
MPRINT(EM_DIAGRAM):   label OWNHOME0 = 'Dummy: OWNHOME=0' ;
MPRINT(EM_DIAGRAM):   label RETURN240 = 'Dummy: RETURN24=0' ;
MPRINT(EM_DIAGRAM):   label SEXF = 'Dummy: SEX=F' ;
MPRINT(EM_DIAGRAM):   label CLIMATE10 = 'Dummy: CLIMATE=10' ;
MPRINT(EM_DIAGRAM):   label CLIMATE20 = 'Dummy: CLIMATE=20' ;
MPRINT(EM_DIAGRAM):   label LOCA = 'Dummy: LOC=A' ;
MPRINT(EM_DIAGRAM):   label LOCB = 'Dummy: LOC=B' ;
MPRINT(EM_DIAGRAM):   label LOCC = 'Dummy: LOC=C' ;
MPRINT(EM_DIAGRAM):   label LOCD = 'Dummy: LOC=D' ;
MPRINT(EM_DIAGRAM):   label LOCE = 'Dummy: LOC=E' ;
MPRINT(EM_DIAGRAM):   label LOCF = 'Dummy: LOC=F' ;
MPRINT(EM_DIAGRAM):   label LOCG = 'Dummy: LOC=G' ;
MPRINT(EM_DIAGRAM):   label ORGSRCC = 'Dummy: ORGSRC=C' ;
MPRINT(EM_DIAGRAM):   label ORGSRCD = 'Dummy: ORGSRC=D' ;
MPRINT(EM_DIAGRAM):   label ORGSRCI = 'Dummy: ORGSRC=I' ;
MPRINT(EM_DIAGRAM):   label ORGSRCO = 'Dummy: ORGSRC=O' ;
MPRINT(EM_DIAGRAM):   label ORGSRCP = 'Dummy: ORGSRC=P' ;
MPRINT(EM_DIAGRAM):   label ORGSRCR = 'Dummy: ORGSRC=R' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label I_RESPOND = 'Into: RESPOND' ;
MPRINT(EM_DIAGRAM):   label F_RESPOND = 'From: RESPOND' ;
MPRINT(EM_DIAGRAM):   label U_RESPOND = 'Unnormalized Into: RESPOND' ;
MPRINT(EM_DIAGRAM):   label P_RESPOND1 = 'Predicted: RESPOND=1' ;
MPRINT(EM_DIAGRAM):   label R_RESPOND1 = 'Residual: RESPOND=1' ;
MPRINT(EM_DIAGRAM):   label P_RESPOND0 = 'Predicted: RESPOND=0' ;
MPRINT(EM_DIAGRAM):   label R_RESPOND0 = 'Residual: RESPOND=0' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for COA6 ;
MPRINT(EM_DIAGRAM):   drop COA60 ;
MPRINT(EM_DIAGRAM):   if missing( COA6 ) then do;
MPRINT(EM_DIAGRAM):   COA60 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( COA6 , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   COA60 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   COA60 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   COA60 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DISCBUY ;
MPRINT(EM_DIAGRAM):   drop DISCBUY0 ;
MPRINT(EM_DIAGRAM):   if missing( DISCBUY ) then do;
MPRINT(EM_DIAGRAM):   DISCBUY0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( DISCBUY , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   DISCBUY0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   DISCBUY0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   DISCBUY0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for MARRIED ;
MPRINT(EM_DIAGRAM):   drop MARRIED0 ;
MPRINT(EM_DIAGRAM):   if missing( MARRIED ) then do;
MPRINT(EM_DIAGRAM):   MARRIED0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( MARRIED , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   MARRIED0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   MARRIED0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   MARRIED0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for OWNHOME ;
MPRINT(EM_DIAGRAM):   drop OWNHOME0 ;
MPRINT(EM_DIAGRAM):   if missing( OWNHOME ) then do;
MPRINT(EM_DIAGRAM):   OWNHOME0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( OWNHOME , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   OWNHOME0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   OWNHOME0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   OWNHOME0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for RETURN24 ;
MPRINT(EM_DIAGRAM):   drop RETURN240 ;
MPRINT(EM_DIAGRAM):   if missing( RETURN24 ) then do;
MPRINT(EM_DIAGRAM):   RETURN240 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( RETURN24 , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   RETURN240 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   RETURN240 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   RETURN240 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for SEX ;
MPRINT(EM_DIAGRAM):   drop SEXF ;
MPRINT(EM_DIAGRAM):   if missing( SEX ) then do;
MPRINT(EM_DIAGRAM):   SEXF = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( SEX , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm1 = 'M' then do;
MPRINT(EM_DIAGRAM):   SEXF = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm1 = 'F' then do;
MPRINT(EM_DIAGRAM):   SEXF = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   SEXF = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CLIMATE ;
MPRINT(EM_DIAGRAM):   drop CLIMATE10 CLIMATE20 ;
MPRINT(EM_DIAGRAM):   if missing( CLIMATE ) then do;
MPRINT(EM_DIAGRAM):   CLIMATE10 = .;
MPRINT(EM_DIAGRAM):   CLIMATE20 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm2 $ 2;
MPRINT(EM_DIAGRAM):   drop _dm2 ;
MPRINT(EM_DIAGRAM):   _dm2 = put( CLIMATE , $CHAR2. );
MPRINT(DMNORMIP):   call dmnorm(_dm2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm2 = '20' then do;
MPRINT(EM_DIAGRAM):   CLIMATE10 = 0;
MPRINT(EM_DIAGRAM):   CLIMATE20 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm2 = '30' then do;
MPRINT(EM_DIAGRAM):   CLIMATE10 = -1;
MPRINT(EM_DIAGRAM):   CLIMATE20 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm2 = '10' then do;
MPRINT(EM_DIAGRAM):   CLIMATE10 = 1;
MPRINT(EM_DIAGRAM):   CLIMATE20 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CLIMATE10 = .;
MPRINT(EM_DIAGRAM):   CLIMATE20 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for LOC ;
MPRINT(EM_DIAGRAM):   drop LOCA LOCB LOCC LOCD LOCE LOCF LOCG ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   LOCA = 0;
MPRINT(EM_DIAGRAM):   LOCB = 0;
MPRINT(EM_DIAGRAM):   LOCC = 0;
MPRINT(EM_DIAGRAM):   LOCD = 0;
MPRINT(EM_DIAGRAM):   LOCE = 0;
MPRINT(EM_DIAGRAM):   LOCF = 0;
MPRINT(EM_DIAGRAM):   LOCG = 0;
MPRINT(EM_DIAGRAM):   if missing( LOC ) then do;
MPRINT(EM_DIAGRAM):   LOCA = .;
MPRINT(EM_DIAGRAM):   LOCB = .;
MPRINT(EM_DIAGRAM):   LOCC = .;
MPRINT(EM_DIAGRAM):   LOCD = .;
MPRINT(EM_DIAGRAM):   LOCE = .;
MPRINT(EM_DIAGRAM):   LOCF = .;
MPRINT(EM_DIAGRAM):   LOCG = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( LOC , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'D' then do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'B' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'A' then do;
MPRINT(EM_DIAGRAM):   LOCA = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'B' then do;
MPRINT(EM_DIAGRAM):   LOCB = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'C' then do;
MPRINT(EM_DIAGRAM):   LOCC = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'D' then do;
MPRINT(EM_DIAGRAM):   LOCD = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'F' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'E' then do;
MPRINT(EM_DIAGRAM):   LOCE = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'F' then do;
MPRINT(EM_DIAGRAM):   LOCF = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'G' then do;
MPRINT(EM_DIAGRAM):   LOCG = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'H' then do;
MPRINT(EM_DIAGRAM):   LOCA = -1;
MPRINT(EM_DIAGRAM):   LOCB = -1;
MPRINT(EM_DIAGRAM):   LOCC = -1;
MPRINT(EM_DIAGRAM):   LOCD = -1;
MPRINT(EM_DIAGRAM):   LOCE = -1;
MPRINT(EM_DIAGRAM):   LOCF = -1;
MPRINT(EM_DIAGRAM):   LOCG = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   LOCA = .;
MPRINT(EM_DIAGRAM):   LOCB = .;
MPRINT(EM_DIAGRAM):   LOCC = .;
MPRINT(EM_DIAGRAM):   LOCD = .;
MPRINT(EM_DIAGRAM):   LOCE = .;
MPRINT(EM_DIAGRAM):   LOCF = .;
MPRINT(EM_DIAGRAM):   LOCG = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for ORGSRC ;
MPRINT(EM_DIAGRAM):   drop ORGSRCC ORGSRCD ORGSRCI ORGSRCO ORGSRCP ORGSRCR ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   ORGSRCC = 0;
MPRINT(EM_DIAGRAM):   ORGSRCD = 0;
MPRINT(EM_DIAGRAM):   ORGSRCI = 0;
MPRINT(EM_DIAGRAM):   ORGSRCO = 0;
MPRINT(EM_DIAGRAM):   ORGSRCP = 0;
MPRINT(EM_DIAGRAM):   ORGSRCR = 0;
MPRINT(EM_DIAGRAM):   if missing( ORGSRC ) then do;
MPRINT(EM_DIAGRAM):   ORGSRCC = .;
MPRINT(EM_DIAGRAM):   ORGSRCD = .;
MPRINT(EM_DIAGRAM):   ORGSRCI = .;
MPRINT(EM_DIAGRAM):   ORGSRCO = .;
MPRINT(EM_DIAGRAM):   ORGSRCP = .;
MPRINT(EM_DIAGRAM):   ORGSRCR = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm1 $ 1;
MPRINT(EM_DIAGRAM):   drop _dm1 ;
MPRINT(EM_DIAGRAM):   _dm1 = put( ORGSRC , $CHAR1. );
MPRINT(DMNORMIP):   call dmnorm(_dm1,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'O' then do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'D' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'C' then do;
MPRINT(EM_DIAGRAM):   ORGSRCC = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'D' then do;
MPRINT(EM_DIAGRAM):   ORGSRCD = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'I' then do;
MPRINT(EM_DIAGRAM):   ORGSRCI = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'O' then do;
MPRINT(EM_DIAGRAM):   ORGSRCO = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 <= 'R' then do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'P' then do;
MPRINT(EM_DIAGRAM):   ORGSRCP = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'R' then do;
MPRINT(EM_DIAGRAM):   ORGSRCR = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm1 = 'U' then do;
MPRINT(EM_DIAGRAM):   ORGSRCC = -1;
MPRINT(EM_DIAGRAM):   ORGSRCD = -1;
MPRINT(EM_DIAGRAM):   ORGSRCI = -1;
MPRINT(EM_DIAGRAM):   ORGSRCO = -1;
MPRINT(EM_DIAGRAM):   ORGSRCP = -1;
MPRINT(EM_DIAGRAM):   ORGSRCR = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   ORGSRCC = .;
MPRINT(EM_DIAGRAM):   ORGSRCD = .;
MPRINT(EM_DIAGRAM):   ORGSRCI = .;
MPRINT(EM_DIAGRAM):   ORGSRCO = .;
MPRINT(EM_DIAGRAM):   ORGSRCP = .;
MPRINT(EM_DIAGRAM):   ORGSRCR = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
MPRINT(EM_DIAGRAM):   IF NMISS( AGE , BUY12 , BUY18 , BUY6 , FICO , INCOME , VALUE24 ) THEN DO;
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   S_AGE = -4.41220858751264 + 0.09911431652588 * AGE ;
MPRINT(EM_DIAGRAM):   S_BUY12 = -0.47495016976613 + 2.34774502953616 * BUY12 ;
MPRINT(EM_DIAGRAM):   S_BUY18 = -0.59899695416057 + 1.75743860578732 * BUY18 ;
MPRINT(EM_DIAGRAM):   S_BUY6 = -0.35938865799343 + 2.96941165974324 * BUY6 ;
MPRINT(EM_DIAGRAM):   S_FICO = -23.7003109498374 + 0.03411600761233 * FICO ;
MPRINT(EM_DIAGRAM):   S_INCOME = -2.9309588225649 + 0.06162016678243 * INCOME ;
MPRINT(EM_DIAGRAM):   S_VALUE24 = -1.65368962520984 + 0.00645651495403 * VALUE24 ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF MISSING( AGE ) THEN S_AGE = . ;
MPRINT(EM_DIAGRAM):   ELSE S_AGE = -4.41220858751264 + 0.09911431652588 * AGE ;
MPRINT(EM_DIAGRAM):   IF MISSING( BUY12 ) THEN S_BUY12 = . ;
MPRINT(EM_DIAGRAM):   ELSE S_BUY12 = -0.47495016976613 + 2.34774502953616 * BUY12 ;
MPRINT(EM_DIAGRAM):   IF MISSING( BUY18 ) THEN S_BUY18 = . ;
MPRINT(EM_DIAGRAM):   ELSE S_BUY18 = -0.59899695416057 + 1.75743860578732 * BUY18 ;
MPRINT(EM_DIAGRAM):   IF MISSING( BUY6 ) THEN S_BUY6 = . ;
MPRINT(EM_DIAGRAM):   ELSE S_BUY6 = -0.35938865799343 + 2.96941165974324 * BUY6 ;
MPRINT(EM_DIAGRAM):   IF MISSING( FICO ) THEN S_FICO = . ;
MPRINT(EM_DIAGRAM):   ELSE S_FICO = -23.7003109498374 + 0.03411600761233 * FICO ;
MPRINT(EM_DIAGRAM):   IF MISSING( INCOME ) THEN S_INCOME = . ;
MPRINT(EM_DIAGRAM):   ELSE S_INCOME = -2.9309588225649 + 0.06162016678243 * INCOME ;
MPRINT(EM_DIAGRAM):   IF MISSING( VALUE24 ) THEN S_VALUE24 = . ;
MPRINT(EM_DIAGRAM):   ELSE S_VALUE24 = -1.65368962520984 + 0.00645651495403 * VALUE24 ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   H11 = -1.63844613947577 * S_AGE + -0.0006834495316 * S_BUY12 + -1.11920941857236 * S_BUY18 + -0.15449094415096 * S_BUY6 + -0.36108421052445 * S_FICO + 0.29193651520759 * S_INCOME + -0.53974295029901 * S_VALUE24 ;
MPRINT(EM_DIAGRAM):   H12 = 2.04070186234985 * S_AGE + -0.82334081428811 * S_BUY12 + 0.91553224280882 * S_BUY18 + -0.50033050635957 * S_BUY6 + -1.43166253029579 * S_FICO + 1.53196393911802 * S_INCOME + 1.17270711955564 * S_VALUE24 ;
MPRINT(EM_DIAGRAM):   H13 = 0.84574733578473 * S_AGE + 0.18802877429238 * S_BUY12 + -1.89191139981326 * S_BUY18 + 0.20058908494166 * S_BUY6 + -0.01161876595264 * S_FICO + 1.03788205942031 * S_INCOME + -0.04924604220188 * S_VALUE24 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.1988644311203 * COA60 + 0.68224787732582 * DISCBUY0 + -1.53390155389653 * MARRIED0 + 2.00437791742167 * OWNHOME0 + 0.88877058553497 * RETURN240 + -0.90483360227295 * SEXF ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.37262471971785 * COA60 + -0.2049179662907 * DISCBUY0 + 0.10126199387394 * MARRIED0 + -1.51051913605472 * OWNHOME0 + -1.67939230329831 * RETURN240 + 0.0498695322584 * SEXF ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.86228008872216 * COA60 + 0.61114127966391 * DISCBUY0 + 0.04574756543432 * MARRIED0 + 0.55158128240389 * OWNHOME0 + 0.19412426500861 * RETURN240 + -0.56321531111583 * SEXF ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 1.1818176049225 * CLIMATE10 + -1.32058220720595 * CLIMATE20 + -0.58467627942889 * LOCA + -0.68972041678241 * LOCB + 0.30774237767357 * LOCC + 1.53078886973103 * LOCD + -0.34280592357562 * LOCE + -0.83618623857709 * LOCF + 
0.01349481352948 * LOCG + -1.16955338386382 * ORGSRCC + 0.2455345729593 * ORGSRCD + 1.08120148293387 * ORGSRCI + -0.88297036165384 * ORGSRCO + 1.00916264530826 * ORGSRCP + 0.9602561921295 * ORGSRCR ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.12745978178409 * CLIMATE10 + -1.00277157738408 * CLIMATE20 + -0.98868063297518 * LOCA + -0.96820178142632 * LOCB + 2.34325778788059 * LOCC + -0.45228620744141 * LOCD + 0.33681000164501 * LOCE + -0.53346358071112 * LOCF 
+ 0.07322369931179 * LOCG + 0.71346080215181 * ORGSRCC + -0.15781793379033 * ORGSRCD + -4.85198276807088 * ORGSRCI + 1.76010505508802 * ORGSRCO + 1.22048952682581 * ORGSRCP + 1.46892428056809 * ORGSRCR ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.09097091651634 * CLIMATE10 + -0.3965639355109 * CLIMATE20 + -0.50515435042955 * LOCA + -0.6025682016322 * LOCB + -0.21236281616384 * LOCC + -0.65003155376952 * LOCD + 0.75926680476961 * LOCE + -0.60543681094647 * LOCF + 
-0.26230283406764 * LOCG + -0.73511454268996 * ORGSRCC + 0.75076149399272 * ORGSRCD + 0.32730886330929 * ORGSRCI + -0.05672858974123 * ORGSRCO + -0.33079089144214 * ORGSRCP + 1.35547292991141 * ORGSRCR ;
MPRINT(EM_DIAGRAM):   H11 = 1.94012350352894 + H11 ;
MPRINT(EM_DIAGRAM):   H12 = -3.49518156519206 + H12 ;
MPRINT(EM_DIAGRAM):   H13 = 1.19970335108207 + H13 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   H11 = .;
MPRINT(EM_DIAGRAM):   H12 = .;
MPRINT(EM_DIAGRAM):   H13 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node RESPOND ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for RESPOND ;
MPRINT(EM_DIAGRAM):   drop RESPOND1 RESPOND0 ;
MPRINT(EM_DIAGRAM):   label F_RESPOND = 'From: RESPOND' ;
MPRINT(EM_DIAGRAM):   length F_RESPOND $ 12;
MPRINT(EM_DIAGRAM):   F_RESPOND = put( RESPOND , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(F_RESPOND,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( RESPOND ) then do;
MPRINT(EM_DIAGRAM):   RESPOND1 = .;
MPRINT(EM_DIAGRAM):   RESPOND0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_RESPOND = '0' then do;
MPRINT(EM_DIAGRAM):   RESPOND1 = 0;
MPRINT(EM_DIAGRAM):   RESPOND0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_RESPOND = '1' then do;
MPRINT(EM_DIAGRAM):   RESPOND1 = 1;
MPRINT(EM_DIAGRAM):   RESPOND0 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   RESPOND1 = .;
MPRINT(EM_DIAGRAM):   RESPOND0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = 1.24114471688656 * H11 + 0.68120616904803 * H12 + -1.0075458443965 * H13 ;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = -2.2955746741664 + P_RESPOND1 ;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = 0;
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_RESPOND1 , P_RESPOND0 );
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = EXP(P_RESPOND1 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_RESPOND1 ;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = EXP(P_RESPOND0 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_RESPOND0 ;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = P_RESPOND1 / _SUM_;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = P_RESPOND0 / _SUM_;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = .;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_RESPOND1 = 0.07431340872374;
MPRINT(EM_DIAGRAM):   P_RESPOND0 = 0.92568659127625;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *****************************;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node RESPOND ;
MPRINT(EM_DIAGRAM):   *** ******************************;
MPRINT(EM_DIAGRAM):   IF MISSING( RESPOND1 ) THEN R_RESPOND1 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_RESPOND1 = RESPOND1 - P_RESPOND1 ;
MPRINT(EM_DIAGRAM):   IF MISSING( RESPOND0 ) THEN R_RESPOND0 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_RESPOND0 = RESPOND0 - P_RESPOND0 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the I_RESPOND AND U_RESPOND ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_RESPOND1 ;
MPRINT(EM_DIAGRAM):   I_RESPOND = "1           " ;
MPRINT(EM_DIAGRAM):   U_RESPOND = 1;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_RESPOND0 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_RESPOND0 ;
MPRINT(EM_DIAGRAM):   I_RESPOND = "0           " ;
MPRINT(EM_DIAGRAM):   U_RESPOND = 0;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   drop S_AGE S_BUY12 S_BUY18 S_BUY6 S_FICO S_INCOME S_VALUE24 H11 H12 H13 ;
36592      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP 뷰가 파일 EMWS6.NEURAL_TEST에 저장되었습니다.
NOTE: 저장된 DATA STEP 뷰는 다른 운영 체제에서 실행할 수 없습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(EM_DIAGRAM):   quit;
36593      quit;
36594      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW을(를) 삭제했습니다.
36595      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
36596      * Neural: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural: Computing metadata for TRAIN data;
36597      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS6.NEURAL_TRAIN.VIEW 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.06 초
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Neural\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS6.Neural_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS6.Neural_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS6.Neural_TRAIN out=WORK.M1KPELDZ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1KPELDZ;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1KPELDZ(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1KPELDZ;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1KPELDZ;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M35G73SA NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M35G73SA;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M35G73SA;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1ZXTLLC(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M35G73SA;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M35G73SA;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M35G73SA;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M35G73SA;
MPRINT(EMADVISECOLUMNS):   set WORK.M35G73SA;
MPRINT(EMADVISECOLUMNS):   label NAME = "변수 이름" TYPE = "유형" ROLE = "역할" LEVEL= "측도 레벨" ORDER= "순서" CREATOR= "생성자" FORMATTYPE= "출력형식 유형" FAMILY= "군" DISTRIBUTION= "분포" PRICE= "가격" LOWERLIMIT= "하한" UPPERLIMIT= "상한" REPORT= 
"리 포트" COMMENT= "주석" INDEX= "인덱스" INDEXTYPE= "인덱스 유형" LABEL= "레이블" LENGTH= "길이";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS6.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS6.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS6.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "모델 노드";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("RESPOND") model = "Neural";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
36942      data EMWS6.Neural_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS6.Neural_EMINFO;
36943      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
36944      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
36945      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: 데이터셋 EMWS6.NEURAL_EMINFO은(는) 3개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(EM_DIAGRAM):   run;
36949      run;
36950      proc sort data = EMWS6.Neural_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS6.Neural_EMINFO NOTHREADS;
36951      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36952      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 3개의 관측값을 데이터셋 EMWS6.NEURAL_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.NEURAL_EMINFO은(는) 3개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

36953      proc sort data = EMWS6.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS6.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
36954      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36955      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 3개의 관측값을 데이터셋 EMWS6.IDS_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 WORK.SORTEDEMINFO은(는) 3개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

36956      proc sort data = EMWS6.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS6.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
36957      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36958      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 입력 데이터셋이 이미 정렬되어 있습니다; 출력 데이터셋에 복사되었습니다.
NOTE: 3개의 관측값을 데이터셋 EMWS6.NEURAL_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 WORK.TEMP_INFO은(는) 3개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

36959      data EMWS6.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS6.Neural_EMINFO;
36960      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
36961      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36962      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 3개의 관측값을 데이터셋 WORK.SORTEDEMINFO.에서 읽었습니다.
NOTE: 3개의 관측값을 데이터셋 WORK.TEMP_INFO.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.NEURAL_EMINFO은(는) 4개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

36963      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
36964      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
36965      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: WORK.TEMP_INFO(memtype=DATA)을(를) 삭제하는 중입니다.
NOTE: WORK.SORTEDEMINFO(memtype=DATA)을(를) 삭제하는 중입니다.
36966      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: 프로시저 DATASETS 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

NOTE: View EMWS6.NEURAL_TRAIN.VIEW 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      
NOTE: View EMWS6.NEURAL_VALIDATE.VIEW 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.04 초
      
NOTE: View EMWS6.NEURAL_TEST.VIEW 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.04 초
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
