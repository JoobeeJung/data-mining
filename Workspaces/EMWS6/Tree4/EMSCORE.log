MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "2018년 11월 20일" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11시16분58초" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 스코어 로그";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* 스코어 로그
날짜:                2018년 11월 20일
시간:                11시16분58초
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3X65X_E "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3X65X_E new;
MPRINT(EM_DIAGRAM):   run;
24555      %let EMEXCEPTIONSTRING=;
24556      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
24557      * SCORE: Tree4;
MPRINT(EM_DIAGRAM):   * SCORE: Tree4;
24558      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24559      %let EM_ACTION = SCORE;
24560      %let syscc = 0;
24561      %macro main;
24562      
24563        %if %upcase(&EM_ACTION) = CREATE %then %do;
24564          filename temp catalog 'sashelp.emmodl.tree_create.source';
24565          %include temp;
24566          filename temp;
24567      
24568          %em_tree_create;
24569        %end;
24570      
24571         %else
24572         %if %upcase(&EM_ACTION) = TRAIN %then %do;
24573      
24574             filename temp catalog 'sashelp.emmodl.tree_train.source';
24575             %include temp;
24576             filename temp;
24577             %em_tree_train;
24578         %end;
24579      
24580        %else
24581        %if %upcase(&EM_ACTION) = SCORE %then %do;
24582          filename temp catalog 'sashelp.emmodl.tree_score.source';
24583          %include temp;
24584          filename temp;
24585      
24586          %em_tree_score;
24587      
24588        %end;
24589      
24590        %else
24591        %if %upcase(&EM_ACTION) = REPORT %then %do;
24592      
24593             filename temp catalog 'sashelp.emmodl.tree_report.source';
24594             %include temp;
24595             filename temp;
24596      
24597             %em_tree_report;
24598         %end;
24599      
24600        %else
24601        %if %upcase(&EM_ACTION) = OPENINT %then %do;
24602      
24603             filename temp catalog 'sashelp.emmodl.tree_actions.source';
24604             %include temp;
24605             filename temp;
24606             %EM_TREE_OPENTREEVIEWER;
24607      
24608         %end;
24609      
24610        %else
24611        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
24612      
24613             filename temp catalog 'sashelp.emmodl.tree_actions.source';
24614             %include temp;
24615             filename temp;
24616             %EM_TREE_CLOSETREEVIEWER;
24617      
24618         %end;
24619      
24620      
24621         %doendm:
24622      %mend main;
24623      
24624      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_score.source';
NOTE: %INCLUDE(레벨 1) 파일 TEMP은(는) 파일 SASHELP.EMMODL.TREE_SCORE.SOURCE입니다.
24626     +%macro em_tree_score;
24628     +   /* determine if multiple targets will be processed */
24629     +   %let em_tree_multipleTargets=N;
24630     +   %let em_tree_numTarget=1;
24631     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
24632     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
24633     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
24634     +         %let em_tree_multipleTargets=N;
24635     +      %end;
24636     +      %else %do;
24637     +         /* create macro array of targets  */
24638     +         data _null_;
24639     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
24640     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
24641     +           if eof then
24642     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
24643     +        run;
24645     +        %if &em_tree_numTarget gt 1 %then %do;
24646     +           %let em_tree_multipleTargets=Y;
24647     +        %end;
24648     +      %end;
24649     +   %end;
24651     +   /* build flow and publish scoring code */
24652     +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
24653     +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
24655     +   filename treeflow "&EM_USER_TREEFLOW";
24656     +   filename treepub "&EM_USER_TREEPUBLISH";
24658     +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
24659     +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
24661     +   %em_copyfile(infref=treeflow, outfref=flowref);
24662     +   %em_copyfile(infref=treepub, outfref=pubref);
24664     +   filename treeflow;
24665     +   filename treepub;
24667     +   /* if priors are used, add code to generate unadjusted residuals in export */
24668     +   %let useAdjPriors = N;
24669     +   data _null_;
24670     +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
24671     +     if USE="Y" then call symput('useAdjPriors', 'Y');
24672     +   run;
24673     +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
24674     +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
24675     +      %include temp;
24676     +      filename temp;
24678     +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
24679     +      filename adjref "&EM_USER_adjResidualCode";
24680     +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
24682     +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
24684     +      filename adjref;
24685     +   %end;
24687     +   /* LEAF */
24688     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
24689     +      data _null_;
24690     +        file flowref mod;
24691     +        put 'drop _LEAF_;';
24692     +      run;
24694     +      data _null_;
24695     +        file pubref mod;
24696     +        put 'drop _LEAF_;';
24697     +      run;
24699     +   %end;
24701     +   filename flowref;
24702     +   filename pubref;
24704     +   /* em_metachange code */
24705     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
24706     +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
24707     +   %end;
24709     +   /* variable selection based on importance stat    */
24710     +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
24711     +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
24712     +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
24713     +     %let varnum = %sysfunc(varnum(&dsid, NAME));
24714     +     %let obs = %sysfunc(fetch(&dsid));
24715     +     %do %while(&obs=0);
24716     +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
24717     +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
24718     +       %EM_METACHANGE(name=&varname, role=REJECTED);
24719     +       %let obs = %sysfunc(fetch(&dsid));
24720     +     %end;
24721     +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
24722     +   %end;
24724     +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
24725     +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
24726     +    %let tree_pred_vars = ;
24727     +    %let tree_pred_lvl =;
24728     +    %let numpred= 0;
24730     +    data _null_;
24731     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
24732     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
24733     +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
24734     +     if eof then
24735     +       call symput('numpred', strip(put(_N_, BEST.)));
24736     +    run;
24737     +   %end;
24739     +   %if &numpred ne 0 %then %do;
24740     +    %do i=1 %to &numpred;
24741     +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
24742     +      %EM_METACHANGE(name=&qpred, role=ASSESS);
24743     +    %end;
24744     +   %end;
24746     +   /* determine if multiple targets will be processed */
24747     +   %let em_tree_multipleTargets=N;
24748     +   %let em_tree_numTarget=1;
24749     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
24750     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
24751     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
24752     +         %let em_tree_multipleTargets=N;
24753     +      %end;
24754     +      %else %do;
24755     +        data _null_;
24756     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
24757     +          if eof then
24758     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
24759     +        run;
24761     +        %if &em_tree_numTarget gt 1 %then %do;
24762     +           %let em_tree_multipleTargets=Y;
24763     +        %end;
24764     +     %end;
24765     +   %end;
24767     +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
24768     +   %if "&em_tree_multipleTargets" eq "N" %then %do;
24770     +      /* variable importance */
24771     +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
24772     +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
24774     +         %let validexist=0;
24775     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
24776     +           %let validexist=1;
24777     +         %end;
24779     +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
24780     +         /* and the columns may not be generated                                                                                 */
24781     +         %let em_tree_cvexists=;
24782     +         %let em_tree_surrexists=.;
24783     +         data _null_;
24784     +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
24785     +            if eof then do ;
24786     +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
24787     +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
24788     +            end;
24789     +         run;
24791     +         data &EM_USER_OUTIMPORT;
24792     +            set &EM_USER_OUTIMPORT;
24794     +            /* format columns based on Precison value specified */
24795     +            format importance 15.&EM_PROPERTY_PRECISION
24796     +                 %if &validexist %then %do;
24797     +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
24798     +                 %end;
24799     +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
24800     +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
24801     +                 %end;
24802     +            ;
24803     +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
24804     +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
24805     +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
24806     +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
24807     +                 %if "&em_tree_surrexists" ne "" %then %do;
24808     +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
24809     +                 %end;
24810     +                 %if &validexist %then %do;
24811     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
24812     +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
24813     +                 %end;
24814     +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
24815     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
24816     +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
24817     +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
24818     +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
24819     +                 %end;
24820     +            ;
24821     +         run;
24823     +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
24824     +      %end;
24825     +   %end;
24827     +   %doendm:
24828     +%mend em_tree_score;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP을(를) 삭제했습니다.
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\TREEFLOW.sas";
MPRINT(EM_TREE_SCORE):   filename treepub "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\TREEPUBLISH.sas";
MPRINT(EM_TREE_SCORE):   filename flowref "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\EMFLOWSCORE.sas";
MPRINT(EM_TREE_SCORE):   filename pubref "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file flowref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treeflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: 파일 FLOWREF:
      파일 이름=C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,파일 크기 (바이트)=0,
      마지막 수정일=2018년 11월 20일 11시16분57초,
      생성 시간=2018년 11월 20일 10시50분44초

NOTE: 197개의 레코드를 파일 FLOWREF에 기록했습니다.
      최소 레코드 길이는 1입니다.
      최대 레코드 길이는 65입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file pubref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treepub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: 파일 PUBREF:
      파일 이름=C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,파일 크기 (바이트)=0,
      마지막 수정일=2018년 11월 20일 11시16분57초,
      생성 시간=2018년 11월 20일 10시50분44초

NOTE: 175개의 레코드를 파일 PUBREF에 기록했습니다.
      최소 레코드 길이는 1입니다.
      최대 레코드 길이는 65입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow;
NOTE: Fileref TREEFLOW을(를) 삭제했습니다.
MPRINT(EM_TREE_SCORE):   filename treepub;
NOTE: Fileref TREEPUB을(를) 삭제했습니다.
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS6.Ids4_BAD_DM(where=(_TYPE_="DECPRIOR"));
MPRINT(EM_TREE_SCORE):   if USE="Y" then call symput('useAdjPriors', 'Y');
MPRINT(EM_TREE_SCORE):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS6.IDS4_BAD_DM.에서 읽었습니다.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file flowref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;

NOTE: 파일 FLOWREF:
      파일 이름=C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,파일 크기 (바이트)=6578,
      마지막 수정일=2018년 11월 20일 11시16분57초,
      생성 시간=2018년 11월 20일 10시50분44초

NOTE: 1개의 레코드를 파일 FLOWREF에 기록했습니다.
      최소 레코드 길이는 12입니다.
      최대 레코드 길이는 12입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file pubref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;

NOTE: 파일 PUBREF:
      파일 이름=C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,파일 크기 (바이트)=6037,
      마지막 수정일=2018년 11월 20일 11시16분58초,
      생성 시간=2018년 11월 20일 10시50분44초

NOTE: 1개의 레코드를 파일 PUBREF에 기록했습니다.
      최소 레코드 길이는 12입니다.
      최대 레코드 길이는 12입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(EM_TREE_SCORE):   filename flowref;
NOTE: Fileref FLOWREF을(를) 삭제했습니다.
MPRINT(EM_TREE_SCORE):   filename pubref;
NOTE: Fileref PUBREF을(를) 삭제했습니다.
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   length KEY $32 DELETE $1 UNAME $32 ROLE $32 LEVEL $10 ORDER $8 COMMENT $64 LOWERLIMIT 8 UPPERLIMIT 8;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("_NODE_");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("SEGMENT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("NOMINAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   run;

NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 1개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("MORTDUE                         ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 1개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 2개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("CLNO                            ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 2개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 3개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.03 초
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("LOAN                            ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 3개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 4개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("NINQ                            ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 4개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 5개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("VALUE                           ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 5개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 6개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("JOB                             ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 6개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 7개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("DEROG                           ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 7개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 8개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.03 초
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS6.Ids4_BAD_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
MPRINT(EM_TREE_SCORE):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_SCORE):   run;

NOTE: 2개의 관측값을 데이터셋 EMWS6.IDS4_BAD_DM.에서 읽었습니다.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_BAD1");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 8개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 9개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_BAD0");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: 9개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 10개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS6.Tree4_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_SCORE):   if eof then do ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_SCORE):   end;
MPRINT(EM_TREE_SCORE):   run;

NOTE: 변수 cvimportance이(가) 초기화되지 않았습니다.
NOTE: 변수 nsurrogates이(가) 초기화되지 않았습니다.
NOTE: 2개의 관측값을 데이터셋 EMWS6.TREE4_OUTIMPORT.에서 읽었습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(EM_TREE_SCORE):   data EMWS6.Tree4_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   set EMWS6.Tree4_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   format importance 15.4 vimportance ratio 15.4 ;
MPRINT(EM_TREE_SCORE):   label NAME = "변수 이름" LABEL = "레이블" NRULES = "분리 규칙 개수" IMPORTANCE = "중요도" NSURROGATES = "대체 규칙 개수" VIMPORTANCE = "평가 중요도" RATIO = "분석 중요도에 따른 평가 비율" VIMPORTANCE = "평가 중요도" CVIMPORTANCE = 
"상대 중요도" CVRULES= "CV 트리의 규칙 수" RATIO = "분석 중요도에 따른 평가 비율" ;
MPRINT(EM_TREE_SCORE):   run;

NOTE: 변수 NSURROGATES이(가) 초기화되지 않았습니다.
NOTE: 변수 CVIMPORTANCE이(가) 초기화되지 않았습니다.
NOTE: 변수 CVRULES이(가) 초기화되지 않았습니다.
NOTE: 12개의 관측값을 데이터셋 EMWS6.TREE4_OUTIMPORT.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.TREE4_OUTIMPORT은(는) 12개의 관측값과 6개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.09 초
      cpu 시간            0.09 초
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTIMPORT";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "IMPORTANCE";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.8164089251386;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: 데이터셋 WORK.EM_USER_REPORT은(는) 132개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.10 초
      cpu 시간            0.10 초
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Tree4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24829      
24830      *------------------------------------------------------------*;
24831      * End SCORE: Tree4;
24832      *------------------------------------------------------------*;

24833      proc sort data=WORK.EM_METACHANGE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_METACHANGE;
24834      by key uname;
MPRINT(EM_DIAGRAM):   by key uname;
24835      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 10개의 관측값을 데이터셋 WORK.EM_METACHANGE.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_METACHANGE은(는) 10개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

24836      filename x "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\CDELTA_TRAIN.sas";
MPRINT(EM_DIAGRAM):    filename x "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\CDELTA_TRAIN.sas";
24837      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
24838      file x;
MPRINT(EM_DIAGRAM):   file x;
24839      put 'if upcase(NAME) = "CLNO" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "CLNO" then do;';
24840      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24841      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24842      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24843      put 'if upcase(NAME) = "DEROG" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "DEROG" then do;';
24844      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24845      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24846      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24847      put 'if upcase(NAME) = "JOB" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "JOB" then do;';
24848      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24849      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24850      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24851      put 'if upcase(NAME) = "LOAN" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "LOAN" then do;';
24852      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24853      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24854      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24855      put 'if upcase(NAME) = "MORTDUE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "MORTDUE" then do;';
24856      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24857      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24858      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24859      put 'if upcase(NAME) = "NINQ" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "NINQ" then do;';
24860      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24861      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24862      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24863      put 'if upcase(NAME) = "Q_BAD0" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_BAD0" then do;';
24864      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
24865      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24866      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24867      put 'if upcase(NAME) = "Q_BAD1" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_BAD1" then do;';
24868      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
24869      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24870      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24871      put 'if upcase(NAME) = "VALUE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "VALUE" then do;';
24872      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24873      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24874      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24875      put 'if upcase(NAME) = "_NODE_" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "_NODE_" then do;';
24876      put 'ROLE = "SEGMENT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "SEGMENT";';
24877      put 'LEVEL = "NOMINAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "NOMINAL";';
24878      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24879      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 파일 X:
      파일 이름=C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,파일 크기 (바이트)=0,
      마지막 수정일=2018년 11월 20일 11시16분58초,
      생성 시간=2018년 11월 20일 10시50분43초

NOTE: 40개의 레코드를 파일 X에 기록했습니다.
      최소 레코드 길이는 4입니다.
      최대 레코드 길이는 36입니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

24880      filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X을(를) 삭제했습니다.
24881      filename emflow "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree4: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24882      *------------------------------------------------------------*;
24883      * Tree4: Scoring DATA data;
24884      *------------------------------------------------------------*;
24885      data EMWS6.Tree4_TRAIN
24886      / view=EMWS6.Tree4_TRAIN
24887      ;
MPRINT(EM_DIAGRAM):   data EMWS6.Tree4_TRAIN / view=EMWS6.Tree4_TRAIN ;
24888      set EMWS6.Part3_TRAIN
24889      ;
MPRINT(EM_DIAGRAM):   set EMWS6.Part3_TRAIN ;
24890      %inc emflow;
NOTE: %INCLUDE(레벨 1) 파일 EMFLOW은(는) 파일 C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\EMFLOWSCORE.sas입니다.
24891     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
24892     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
24893     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
24894     +
24895     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
24896     +LENGTH F_BAD  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_BAD $ 12;
24897     +LENGTH I_BAD  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_BAD $ 12;
24898     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
24899     +
24900     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
24901     +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
24902     +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
24903     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
24904     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
24905     +label Q_BAD1 = 'Unadjusted P: BAD=1' ;
MPRINT(EM_DIAGRAM):   label Q_BAD1 = 'Unadjusted P: BAD=1' ;
24906     +label Q_BAD0 = 'Unadjusted P: BAD=0' ;
MPRINT(EM_DIAGRAM):   label Q_BAD0 = 'Unadjusted P: BAD=0' ;
24907     +label V_BAD1 = 'Validated: BAD=1' ;
MPRINT(EM_DIAGRAM):   label V_BAD1 = 'Validated: BAD=1' ;
24908     +label V_BAD0 = 'Validated: BAD=0' ;
MPRINT(EM_DIAGRAM):   label V_BAD0 = 'Validated: BAD=0' ;
24909     +label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
24910     +label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
24911     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
24912     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
24913     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
24914     +label _WARN_ = '경고' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = '경고' ;
24915     +
24916     +
24917     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
24918     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
24919     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
24920     +LENGTH _ARBFMT_7 $      7; DROP _ARBFMT_7;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_7 $ 7;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_7;
24921     +_ARBFMT_7 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_7 = ' ';
24922     +
24923     +
24924     +_ARBFMT_12 = PUT( BAD , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( BAD , BEST12.);
24925     + %DMNORMCP( _ARBFMT_12, F_BAD );
MPRINT(DMNORMCP):   F_BAD=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(DEBTINC ) AND 11.7112154734233 <= DEBTINC AND DEBTINC < 41.0927802636277 THEN DO;
24926     +
MPRINT(EM_DIAGRAM):   _NODE_ = 3;
24927     +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
24928     +IF  NOT MISSING(DEBTINC ) AND
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.05902899056933;
24929     +      11.7112154734233 <= DEBTINC  AND
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.94097100943066;
24930     +  DEBTINC  <     41.0927802636277 THEN DO;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.05902899056933;
24931     +  _NODE_  =                    3;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.94097100943066;
24932     +  _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.06425702811244;
24933     +  P_BAD1  =     0.05902899056933;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.93574297188755;
24934     +  P_BAD0  =     0.94097100943066;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
24935     +  Q_BAD1  =     0.05902899056933;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
24936     +  Q_BAD0  =     0.94097100943066;
MPRINT(EM_DIAGRAM):   END;
24937     +  V_BAD1  =     0.06425702811244;
24938     +  V_BAD0  =     0.93574297188755;
24939     +  I_BAD  = '0' ;
24940     +  U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(DEBTINC ) AND 41.0927802636277 <= DEBTINC AND DEBTINC < 45.1848045236243 THEN DO;
24941     +  END;
MPRINT(EM_DIAGRAM):   _NODE_ = 4;
24942     +ELSE IF  NOT MISSING(DEBTINC ) AND
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.13988095238095;
24943     +      41.0927802636277 <= DEBTINC  AND
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.86011904761904;
24944     +  DEBTINC  <     45.1848045236243 THEN DO;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.13988095238095;
24945     +  _NODE_  =                    4;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.86011904761904;
24946     +  _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.11940298507462;
24947     +  P_BAD1  =     0.13988095238095;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.88059701492537;
24948     +  P_BAD0  =     0.86011904761904;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
24949     +  Q_BAD1  =     0.13988095238095;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
24950     +  Q_BAD0  =     0.86011904761904;
MPRINT(EM_DIAGRAM):   END;
24951     +  V_BAD1  =     0.11940298507462;
24952     +  V_BAD0  =     0.88059701492537;
24953     +  I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(DEBTINC ) AND 45.1848045236243 <= DEBTINC THEN DO;
24954     +  U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
24955     +  END;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
24956     +ELSE IF  NOT MISSING(DEBTINC ) AND
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.96363636363636;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.03636363636363;
24957     +      45.1848045236243 <= DEBTINC  THEN DO;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.96363636363636;
24958     +  _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.03636363636363;
24959     +  _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.96296296296296;
24960     +  P_BAD1  =     0.96363636363636;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.03703703703703;
24961     +  P_BAD0  =     0.03636363636363;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
24962     +  Q_BAD1  =     0.96363636363636;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
24963     +  Q_BAD0  =     0.03636363636363;
MPRINT(EM_DIAGRAM):   END;
24964     +  V_BAD1  =     0.96296296296296;
24965     +  V_BAD0  =     0.03703703703703;
MPRINT(EM_DIAGRAM):   ELSE DO;
24966     +  I_BAD  = '1' ;
24967     +  U_BAD  =                    1;
24968     +  END;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(DELINQ ) AND 0.5 <= DELINQ AND DELINQ < 2.5 THEN DO;
24969     +ELSE DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
24970     +  IF  NOT MISSING(DELINQ ) AND
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.74384236453201;
24971     +                     0.5 <= DELINQ  AND
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.25615763546798;
24972     +    DELINQ  <                  2.5 THEN DO;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.74384236453201;
24973     +    _NODE_  =                    7;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.25615763546798;
24974     +    _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.81651376146789;
24975     +    P_BAD1  =     0.74384236453201;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.18348623853211;
24976     +    P_BAD0  =     0.25615763546798;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
24977     +    Q_BAD1  =     0.74384236453201;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
24978     +    Q_BAD0  =     0.25615763546798;
MPRINT(EM_DIAGRAM):   END;
24979     +    V_BAD1  =     0.81651376146789;
24980     +    V_BAD0  =     0.18348623853211;
24981     +    I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(DELINQ ) AND 2.5 <= DELINQ THEN DO;
24982     +    U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   _NODE_ = 8;
24983     +    END;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
24984     +  ELSE IF  NOT MISSING(DELINQ ) AND
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.95275590551181;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.04724409448818;
24985     +                     2.5 <= DELINQ  THEN DO;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.95275590551181;
24986     +    _NODE_  =                    8;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.04724409448818;
24987     +    _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.81578947368421;
24988     +    P_BAD1  =     0.95275590551181;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.18421052631578;
24989     +    P_BAD0  =     0.04724409448818;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
24990     +    Q_BAD1  =     0.95275590551181;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
24991     +    Q_BAD0  =     0.04724409448818;
MPRINT(EM_DIAGRAM):   END;
24992     +    V_BAD1  =     0.81578947368421;
24993     +    V_BAD0  =     0.18421052631578;
MPRINT(EM_DIAGRAM):   ELSE DO;
24994     +    I_BAD  = '1' ;
24995     +    U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(CLAGE ) AND 154.7 <= CLAGE THEN DO;
24996     +    END;
24997     +  ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(YOJ ) AND YOJ < 1.15 THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 32;
24998     +    IF  NOT MISSING(CLAGE ) AND
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
24999     +                     154.7 <= CLAGE  THEN DO;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.58333333333333;
25000     +      IF  NOT MISSING(YOJ ) AND
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.41666666666666;
25001     +        YOJ  <                 1.15 THEN DO;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.58333333333333;
25002     +        _NODE_  =                   32;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.41666666666666;
25003     +        _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.58333333333333;
25004     +        P_BAD1  =     0.58333333333333;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.41666666666666;
25005     +        P_BAD0  =     0.41666666666666;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25006     +        Q_BAD1  =     0.58333333333333;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25007     +        Q_BAD0  =     0.41666666666666;
MPRINT(EM_DIAGRAM):   END;
25008     +        V_BAD1  =     0.58333333333333;
25009     +        V_BAD0  =     0.41666666666666;
MPRINT(EM_DIAGRAM):   ELSE DO;
25010     +        I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 33;
25011     +        U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
25012     +        END;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.2822966507177;
25013     +      ELSE DO;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.71770334928229;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.2822966507177;
25014     +        _NODE_  =                   33;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.71770334928229;
25015     +        _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.34065934065934;
25016     +        P_BAD1  =      0.2822966507177;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.65934065934065;
25017     +        P_BAD0  =     0.71770334928229;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25018     +        Q_BAD1  =      0.2822966507177;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25019     +        Q_BAD0  =     0.71770334928229;
MPRINT(EM_DIAGRAM):   END;
25020     +        V_BAD1  =     0.34065934065934;
MPRINT(EM_DIAGRAM):   END;
25021     +        V_BAD0  =     0.65934065934065;
25022     +        I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   ELSE DO;
25023     +        U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   _ARBFMT_7 = PUT( REASON , $7.);
25024     +        END;
25025     +      END;
25026     +    ELSE DO;
25027     +      _ARBFMT_7 = PUT( REASON , $7.);
25028     +       %DMNORMIP( _ARBFMT_7);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_7 IN ('DEBTCON' ) THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 29;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.61421319796954;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.38578680203045;
25029     +      IF _ARBFMT_7 IN ('DEBTCON' ) THEN DO;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.61421319796954;
25030     +        _NODE_  =                   29;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.38578680203045;
25031     +        _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.49350649350649;
25032     +        P_BAD1  =     0.61421319796954;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.5064935064935;
25033     +        P_BAD0  =     0.38578680203045;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25034     +        Q_BAD1  =     0.61421319796954;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25035     +        Q_BAD0  =     0.38578680203045;
MPRINT(EM_DIAGRAM):   END;
25036     +        V_BAD1  =     0.49350649350649;
25037     +        V_BAD0  =      0.5064935064935;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_7 IN ('HOMEIMP' ) THEN DO;
25038     +        I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 30;
25039     +        U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
25040     +        END;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.69827586206896;
25041     +      ELSE IF _ARBFMT_7 IN ('HOMEIMP' ) THEN DO;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.30172413793103;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.69827586206896;
25042     +        _NODE_  =                   30;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.30172413793103;
25043     +        _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.78;
25044     +        P_BAD1  =     0.69827586206896;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.22;
25045     +        P_BAD0  =     0.30172413793103;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25046     +        Q_BAD1  =     0.69827586206896;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25047     +        Q_BAD0  =     0.30172413793103;
MPRINT(EM_DIAGRAM):   END;
25048     +        V_BAD1  =                 0.78;
25049     +        V_BAD0  =                 0.22;
MPRINT(EM_DIAGRAM):   ELSE DO;
25050     +        I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 31;
25051     +        U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
25052     +        END;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.28571428571428;
25053     +      ELSE DO;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.71428571428571;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.28571428571428;
25054     +        _NODE_  =                   31;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.71428571428571;
25055     +        _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.14285714285714;
25056     +        P_BAD1  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.85714285714285;
25057     +        P_BAD0  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25058     +        Q_BAD1  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25059     +        Q_BAD0  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   END;
25060     +        V_BAD1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   END;
25061     +        V_BAD0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   END;
25062     +        I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   END;
25063     +        U_BAD  =                    0;
25064     +        END;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
25065     +      END;
25066     +    END;
MPRINT(EM_DIAGRAM):   IF F_BAD NE '1' AND F_BAD NE '0' THEN DO;
25067     +  END;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
25068     +
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
25069     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   END;
25070     +IF  F_BAD  NE '1'
25071     +AND F_BAD  NE '0'  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25072     +        R_BAD1  = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = -P_BAD1 ;
25073     +        R_BAD0  = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = -P_BAD0 ;
25074     + END;
MPRINT(EM_DIAGRAM):   SELECT( F_BAD );
25075     + ELSE DO;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_BAD1 = R_BAD1 +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_BAD0 = R_BAD0 +1;
25076     +       R_BAD1  =  -P_BAD1 ;
MPRINT(EM_DIAGRAM):   END;
25077     +       R_BAD0  =  -P_BAD0 ;
MPRINT(EM_DIAGRAM):   END;
25078     +       SELECT( F_BAD  );
25079     +          WHEN( '1'  ) R_BAD1  = R_BAD1  +1;
MPRINT(EM_DIAGRAM):   ****************************************************************;
25080     +          WHEN( '0'  ) R_BAD0  = R_BAD0  +1;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
25081     +       END;
MPRINT(EM_DIAGRAM):   ****************************************************************;
25082     + END;
25083     +
MPRINT(EM_DIAGRAM):   drop _LEAF_;
25084     +****************************************************************;
25085     +******          END OF DECISION TREE SCORING CODE         ******;
25086     +****************************************************************;
25087     +
25088     +drop _LEAF_;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(EM_DIAGRAM):   run;
25089      run;

NOTE: DATA STEP 뷰가 파일 EMWS6.TREE4_TRAIN에 저장되었습니다.
NOTE: 저장된 DATA STEP 뷰는 다른 운영 체제에서 실행할 수 없습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

MPRINT(EM_DIAGRAM):   quit;
25090      quit;
25091      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW을(를) 삭제했습니다.
25092      filename emflow "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree4: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25093      *------------------------------------------------------------*;
25094      * Tree4: Scoring VALIDATE data;
25095      *------------------------------------------------------------*;
25096      data EMWS6.Tree4_VALIDATE
25097      / view=EMWS6.Tree4_VALIDATE
25098      ;
MPRINT(EM_DIAGRAM):   data EMWS6.Tree4_VALIDATE / view=EMWS6.Tree4_VALIDATE ;
25099      set EMWS6.Part3_VALIDATE
25100      ;
MPRINT(EM_DIAGRAM):   set EMWS6.Part3_VALIDATE ;
25101      %inc emflow;
NOTE: %INCLUDE(레벨 1) 파일 EMFLOW은(는) 파일 C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\EMFLOWSCORE.sas입니다.
25102     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
25103     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
25104     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
25105     +
25106     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
25107     +LENGTH F_BAD  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_BAD $ 12;
25108     +LENGTH I_BAD  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_BAD $ 12;
25109     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
25110     +
25111     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
25112     +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
25113     +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
25114     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
25115     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
25116     +label Q_BAD1 = 'Unadjusted P: BAD=1' ;
MPRINT(EM_DIAGRAM):   label Q_BAD1 = 'Unadjusted P: BAD=1' ;
25117     +label Q_BAD0 = 'Unadjusted P: BAD=0' ;
MPRINT(EM_DIAGRAM):   label Q_BAD0 = 'Unadjusted P: BAD=0' ;
25118     +label V_BAD1 = 'Validated: BAD=1' ;
MPRINT(EM_DIAGRAM):   label V_BAD1 = 'Validated: BAD=1' ;
25119     +label V_BAD0 = 'Validated: BAD=0' ;
MPRINT(EM_DIAGRAM):   label V_BAD0 = 'Validated: BAD=0' ;
25120     +label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
25121     +label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
25122     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
25123     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
25124     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
25125     +label _WARN_ = '경고' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = '경고' ;
25126     +
25127     +
25128     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
25129     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
25130     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
25131     +LENGTH _ARBFMT_7 $      7; DROP _ARBFMT_7;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_7 $ 7;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_7;
25132     +_ARBFMT_7 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_7 = ' ';
25133     +
25134     +
25135     +_ARBFMT_12 = PUT( BAD , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( BAD , BEST12.);
25136     + %DMNORMCP( _ARBFMT_12, F_BAD );
MPRINT(DMNORMCP):   F_BAD=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
25137     +
25138     +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
25139     +IF  NOT MISSING(DEBTINC ) AND
25140     +      11.7112154734233 <= DEBTINC  AND
25141     +  DEBTINC  <     41.0927802636277 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(DEBTINC ) AND 11.7112154734233 <= DEBTINC AND DEBTINC < 41.0927802636277 THEN DO;
25142     +  _NODE_  =                    3;
MPRINT(EM_DIAGRAM):   _NODE_ = 3;
25143     +  _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
25144     +  P_BAD1  =     0.05902899056933;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.05902899056933;
25145     +  P_BAD0  =     0.94097100943066;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.94097100943066;
25146     +  Q_BAD1  =     0.05902899056933;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.05902899056933;
25147     +  Q_BAD0  =     0.94097100943066;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.94097100943066;
25148     +  V_BAD1  =     0.06425702811244;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.06425702811244;
25149     +  V_BAD0  =     0.93574297188755;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.93574297188755;
25150     +  I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25151     +  U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25152     +  END;
MPRINT(EM_DIAGRAM):   END;
25153     +ELSE IF  NOT MISSING(DEBTINC ) AND
25154     +      41.0927802636277 <= DEBTINC  AND
25155     +  DEBTINC  <     45.1848045236243 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(DEBTINC ) AND 41.0927802636277 <= DEBTINC AND DEBTINC < 45.1848045236243 THEN DO;
25156     +  _NODE_  =                    4;
MPRINT(EM_DIAGRAM):   _NODE_ = 4;
25157     +  _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
25158     +  P_BAD1  =     0.13988095238095;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.13988095238095;
25159     +  P_BAD0  =     0.86011904761904;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.86011904761904;
25160     +  Q_BAD1  =     0.13988095238095;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.13988095238095;
25161     +  Q_BAD0  =     0.86011904761904;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.86011904761904;
25162     +  V_BAD1  =     0.11940298507462;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.11940298507462;
25163     +  V_BAD0  =     0.88059701492537;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.88059701492537;
25164     +  I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25165     +  U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25166     +  END;
MPRINT(EM_DIAGRAM):   END;
25167     +ELSE IF  NOT MISSING(DEBTINC ) AND
25168     +      45.1848045236243 <= DEBTINC  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(DEBTINC ) AND 45.1848045236243 <= DEBTINC THEN DO;
25169     +  _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
25170     +  _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
25171     +  P_BAD1  =     0.96363636363636;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.96363636363636;
25172     +  P_BAD0  =     0.03636363636363;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.03636363636363;
25173     +  Q_BAD1  =     0.96363636363636;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.96363636363636;
25174     +  Q_BAD0  =     0.03636363636363;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.03636363636363;
25175     +  V_BAD1  =     0.96296296296296;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.96296296296296;
25176     +  V_BAD0  =     0.03703703703703;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.03703703703703;
25177     +  I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25178     +  U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25179     +  END;
MPRINT(EM_DIAGRAM):   END;
25180     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25181     +  IF  NOT MISSING(DELINQ ) AND
25182     +                     0.5 <= DELINQ  AND
25183     +    DELINQ  <                  2.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(DELINQ ) AND 0.5 <= DELINQ AND DELINQ < 2.5 THEN DO;
25184     +    _NODE_  =                    7;
MPRINT(EM_DIAGRAM):   _NODE_ = 7;
25185     +    _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
25186     +    P_BAD1  =     0.74384236453201;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.74384236453201;
25187     +    P_BAD0  =     0.25615763546798;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.25615763546798;
25188     +    Q_BAD1  =     0.74384236453201;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.74384236453201;
25189     +    Q_BAD0  =     0.25615763546798;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.25615763546798;
25190     +    V_BAD1  =     0.81651376146789;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.81651376146789;
25191     +    V_BAD0  =     0.18348623853211;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.18348623853211;
25192     +    I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25193     +    U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25194     +    END;
MPRINT(EM_DIAGRAM):   END;
25195     +  ELSE IF  NOT MISSING(DELINQ ) AND
25196     +                     2.5 <= DELINQ  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(DELINQ ) AND 2.5 <= DELINQ THEN DO;
25197     +    _NODE_  =                    8;
MPRINT(EM_DIAGRAM):   _NODE_ = 8;
25198     +    _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
25199     +    P_BAD1  =     0.95275590551181;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.95275590551181;
25200     +    P_BAD0  =     0.04724409448818;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.04724409448818;
25201     +    Q_BAD1  =     0.95275590551181;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.95275590551181;
25202     +    Q_BAD0  =     0.04724409448818;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.04724409448818;
25203     +    V_BAD1  =     0.81578947368421;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.81578947368421;
25204     +    V_BAD0  =     0.18421052631578;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.18421052631578;
25205     +    I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25206     +    U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25207     +    END;
MPRINT(EM_DIAGRAM):   END;
25208     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25209     +    IF  NOT MISSING(CLAGE ) AND
25210     +                     154.7 <= CLAGE  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(CLAGE ) AND 154.7 <= CLAGE THEN DO;
25211     +      IF  NOT MISSING(YOJ ) AND
25212     +        YOJ  <                 1.15 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(YOJ ) AND YOJ < 1.15 THEN DO;
25213     +        _NODE_  =                   32;
MPRINT(EM_DIAGRAM):   _NODE_ = 32;
25214     +        _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
25215     +        P_BAD1  =     0.58333333333333;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.58333333333333;
25216     +        P_BAD0  =     0.41666666666666;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.41666666666666;
25217     +        Q_BAD1  =     0.58333333333333;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.58333333333333;
25218     +        Q_BAD0  =     0.41666666666666;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.41666666666666;
25219     +        V_BAD1  =     0.58333333333333;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.58333333333333;
25220     +        V_BAD0  =     0.41666666666666;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.41666666666666;
25221     +        I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25222     +        U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25223     +        END;
MPRINT(EM_DIAGRAM):   END;
25224     +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25225     +        _NODE_  =                   33;
MPRINT(EM_DIAGRAM):   _NODE_ = 33;
25226     +        _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
25227     +        P_BAD1  =      0.2822966507177;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.2822966507177;
25228     +        P_BAD0  =     0.71770334928229;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.71770334928229;
25229     +        Q_BAD1  =      0.2822966507177;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.2822966507177;
25230     +        Q_BAD0  =     0.71770334928229;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.71770334928229;
25231     +        V_BAD1  =     0.34065934065934;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.34065934065934;
25232     +        V_BAD0  =     0.65934065934065;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.65934065934065;
25233     +        I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25234     +        U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25235     +        END;
MPRINT(EM_DIAGRAM):   END;
25236     +      END;
MPRINT(EM_DIAGRAM):   END;
25237     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25238     +      _ARBFMT_7 = PUT( REASON , $7.);
MPRINT(EM_DIAGRAM):   _ARBFMT_7 = PUT( REASON , $7.);
25239     +       %DMNORMIP( _ARBFMT_7);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
25240     +      IF _ARBFMT_7 IN ('DEBTCON' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_7 IN ('DEBTCON' ) THEN DO;
25241     +        _NODE_  =                   29;
MPRINT(EM_DIAGRAM):   _NODE_ = 29;
25242     +        _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
25243     +        P_BAD1  =     0.61421319796954;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.61421319796954;
25244     +        P_BAD0  =     0.38578680203045;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.38578680203045;
25245     +        Q_BAD1  =     0.61421319796954;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.61421319796954;
25246     +        Q_BAD0  =     0.38578680203045;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.38578680203045;
25247     +        V_BAD1  =     0.49350649350649;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.49350649350649;
25248     +        V_BAD0  =      0.5064935064935;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.5064935064935;
25249     +        I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25250     +        U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25251     +        END;
MPRINT(EM_DIAGRAM):   END;
25252     +      ELSE IF _ARBFMT_7 IN ('HOMEIMP' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_7 IN ('HOMEIMP' ) THEN DO;
25253     +        _NODE_  =                   30;
MPRINT(EM_DIAGRAM):   _NODE_ = 30;
25254     +        _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
25255     +        P_BAD1  =     0.69827586206896;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.69827586206896;
25256     +        P_BAD0  =     0.30172413793103;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.30172413793103;
25257     +        Q_BAD1  =     0.69827586206896;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.69827586206896;
25258     +        Q_BAD0  =     0.30172413793103;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.30172413793103;
25259     +        V_BAD1  =                 0.78;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.78;
25260     +        V_BAD0  =                 0.22;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.22;
25261     +        I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25262     +        U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25263     +        END;
MPRINT(EM_DIAGRAM):   END;
25264     +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25265     +        _NODE_  =                   31;
MPRINT(EM_DIAGRAM):   _NODE_ = 31;
25266     +        _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
25267     +        P_BAD1  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.28571428571428;
25268     +        P_BAD0  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.71428571428571;
25269     +        Q_BAD1  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.28571428571428;
25270     +        Q_BAD0  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.71428571428571;
25271     +        V_BAD1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.14285714285714;
25272     +        V_BAD0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.85714285714285;
25273     +        I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25274     +        U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25275     +        END;
MPRINT(EM_DIAGRAM):   END;
25276     +      END;
MPRINT(EM_DIAGRAM):   END;
25277     +    END;
MPRINT(EM_DIAGRAM):   END;
25278     +  END;
MPRINT(EM_DIAGRAM):   END;
25279     +
25280     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
25281     +IF  F_BAD  NE '1'
25282     +AND F_BAD  NE '0'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_BAD NE '1' AND F_BAD NE '0' THEN DO;
25283     +        R_BAD1  = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
25284     +        R_BAD0  = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
25285     + END;
MPRINT(EM_DIAGRAM):   END;
25286     + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25287     +       R_BAD1  =  -P_BAD1 ;
MPRINT(EM_DIAGRAM):   R_BAD1 = -P_BAD1 ;
25288     +       R_BAD0  =  -P_BAD0 ;
MPRINT(EM_DIAGRAM):   R_BAD0 = -P_BAD0 ;
25289     +       SELECT( F_BAD  );
MPRINT(EM_DIAGRAM):   SELECT( F_BAD );
25290     +          WHEN( '1'  ) R_BAD1  = R_BAD1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_BAD1 = R_BAD1 +1;
25291     +          WHEN( '0'  ) R_BAD0  = R_BAD0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_BAD0 = R_BAD0 +1;
25292     +       END;
MPRINT(EM_DIAGRAM):   END;
25293     + END;
MPRINT(EM_DIAGRAM):   END;
25294     +
25295     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
25296     +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
25297     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
25298     +
25299     +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE(레벨 1)를 종료 중입니다.
MPRINT(EM_DIAGRAM):   run;
25300      run;

NOTE: DATA STEP 뷰가 파일 EMWS6.TREE4_VALIDATE에 저장되었습니다.
NOTE: 저장된 DATA STEP 뷰는 다른 운영 체제에서 실행할 수 없습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

MPRINT(EM_DIAGRAM):   quit;
25301      quit;
25302      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW을(를) 삭제했습니다.
NOTE: View EMWS6.TREE4_TRAIN.VIEW 실행(총 프로세스 시간):
      실행 시간           0.05 초
      cpu 시간            0.06 초
      
25304      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
25305      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
25306      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 132개의 관측값을 데이터셋 WORK.EM_USER_REPORT.에서 읽었습니다.
NOTE: 데이터셋 WORK.EM_USER_REPORT은(는) 132개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

25307      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
25308      * Tree4: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Tree4: Computing metadata for TRAIN data;
25309      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS6.TREE4_TRAIN.VIEW 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.03 초
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\Tree4\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS6.Tree4_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS6.Tree4_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS6.Tree4_TRAIN out=WORK.M2VC6H6D noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2VC6H6D;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2VC6H6D(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2VC6H6D;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2VC6H6D;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1SYGU6I NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1SYGU6I;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1SYGU6I;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M302HIBM(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1SYGU6I;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1SYGU6I;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1SYGU6I;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1SYGU6I;
MPRINT(EMADVISECOLUMNS):   set WORK.M1SYGU6I;
MPRINT(EMADVISECOLUMNS):   label NAME = "변수 이름" TYPE = "유형" ROLE = "역할" LEVEL= "측도 레벨" ORDER= "순서" CREATOR= "생성자" FORMATTYPE= "출력형식 유형" FAMILY= "군" DISTRIBUTION= "분포" PRICE= "가격" LOWERLIMIT= "하한" UPPERLIMIT= "상한" REPORT= 
"리 포트" COMMENT= "주석" INDEX= "인덱스" INDEXTYPE= "인덱스 유형" LABEL= "레이블" LENGTH= "길이";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS6.Part3_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS6.Part3_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS6.Tree4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Tree4";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "모델 노드";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_BAD1") creator = "Tree4";
MPRINT(EM_DIAGRAM):   when("P_BAD0") creator = "Tree4";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Tree4";
MPRINT(EM_DIAGRAM):   when("BAD") model = "Tree4";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree4: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "CLNO" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "DEROG" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "JOB" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "LOAN" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "MORTDUE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "NINQ" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_BAD0" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_BAD1" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "VALUE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "_NODE_" then do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
25697      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
25698      set EMWS6.Tree4_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS6.Tree4_EMINFO;
25699      where DATA='Tree4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Tree4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
25700      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 0개의 관측값을 데이터셋 EMWS6.TREE4_EMINFO.에서 읽었습니다.
      WHERE (DATA='Tree4') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: 데이터셋 WORK.MODELTEMP_INFO은(는) 0개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

25701      data EMWS6.Tree4_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS6.Tree4_EMINFO;
25702      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
25703      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
25704      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: 데이터셋 EMWS6.TREE4_EMINFO은(는) 3개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(EM_DIAGRAM):   run;
25708      run;
25709      data EMWS6.Tree4_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS6.Tree4_EMINFO;
25710      set EMWS6.Tree4_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS6.Tree4_EMINFO WORK.MODELTEMP_INFO;
25711      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 3개의 관측값을 데이터셋 EMWS6.TREE4_EMINFO.에서 읽었습니다.
NOTE: 0개의 관측값을 데이터셋 WORK.MODELTEMP_INFO.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.TREE4_EMINFO은(는) 3개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

25712      proc sort data = EMWS6.Tree4_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS6.Tree4_EMINFO NOTHREADS;
25713      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
25714      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 3개의 관측값을 데이터셋 EMWS6.TREE4_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.TREE4_EMINFO은(는) 3개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.03 초
      

25715      proc sort data = EMWS6.Ids4_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS6.Ids4_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
25716      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
25717      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 3개의 관측값을 데이터셋 EMWS6.IDS4_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 WORK.SORTEDEMINFO은(는) 3개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

25718      proc sort data = EMWS6.Tree4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS6.Tree4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
25719      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
25720      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 입력 데이터셋이 이미 정렬되어 있습니다; 출력 데이터셋에 복사되었습니다.
NOTE: 3개의 관측값을 데이터셋 EMWS6.TREE4_EMINFO.에서 읽었습니다.
NOTE: 데이터셋 WORK.TEMP_INFO은(는) 3개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

25721      data EMWS6.Tree4_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS6.Tree4_EMINFO;
25722      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
25723      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
25724      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 3개의 관측값을 데이터셋 WORK.SORTEDEMINFO.에서 읽었습니다.
NOTE: 3개의 관측값을 데이터셋 WORK.TEMP_INFO.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.TREE4_EMINFO은(는) 4개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

25725      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
25726      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
25727      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: WORK.TEMP_INFO(memtype=DATA)을(를) 삭제하는 중입니다.
NOTE: WORK.SORTEDEMINFO(memtype=DATA)을(를) 삭제하는 중입니다.
25728      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: 프로시저 DATASETS 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.01 초
      

NOTE: View EMWS6.TREE4_TRAIN.VIEW 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      
NOTE: View EMWS6.TREE4_VALIDATE.VIEW 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.03 초
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
