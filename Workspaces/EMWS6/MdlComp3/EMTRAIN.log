MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "2018년 11월 20일" 
);
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11시02분01초" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 분석 로그";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* 분석 로그
날짜:                2018년 11월 20일
시간:                11시02분01초
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3E5H786 
"C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\MdlComp3\EMTRAIN.out" 
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3E5H786 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG 
"C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\MdlComp3\EMLOG.log" 
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "2018년 11월 20일" 
);
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11시02분01초" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "사용자:                Administrator";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "사이트:                10503192";
MPRINT(EM_DIAGRAM):   put "플랫폼:            X64_10HOME";
MPRINT(EM_DIAGRAM):   put "관리 릴리스: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM 버전:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\MdlComp3\EMTRAIN.log" 
encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN 
"C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\MdlComp3\EMSCORE.log" 
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN 
"C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\MdlComp3\EMREPORT.log" 
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT 
"C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\MdlComp3\EMOUTPUT.out" 
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "2018년 11월 20일" 
);
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11시02분01초" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "사용자:                Administrator";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 분석 출력";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\MdlComp3\EMTRAIN.out" 
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 스코어 출력";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\MdlComp3\EMSCORE.out" 
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* 리포트 출력";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN 
"C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\MdlComp3\EMREPORT.out" 
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\MdlComp3\EMRUNSTATUS.xml' 
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 
'C:\Users\Administrator\DM_Proj\DataMining2018\Workspaces\EMWS6\MdlComp3\EMRUNSTATUS.xml' 
encoding="UTF-8" NOBOM;
47664      proc freq data=EMWS6.MdlComp3_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS6.MdlComp3_VariableSet noprint;
47665      table ROLE*LEVEL/out=WORK.MdlComp3META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.MdlComp3META;
47666      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS6.MDLCOMP3_VARIABLESET.에서 읽었습니다.
NOTE: 데이터셋 WORK.MDLCOMP3META은(는) 1개의 관측값과 4개의 변수를 가지고 있습니다.
NOTE: 프로시저 FREQ 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.04 초
      

47667      proc print data=WORK.MdlComp3META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.MdlComp3META label noobs;
47668      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
47669      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
47669    ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
47669    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "역할" LEVEL = "측도 레벨" COUNT = "빈도 개수";
47670      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
47671      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "변수 요약";
MPRINT(EM_DIAGRAM):   run;
47672      run;

NOTE: 1개의 관측값을 데이터셋 WORK.MDLCOMP3META.에서 읽었습니다.
NOTE: 출력 결과 (프로시저: PRINT, 페이지: 14)
NOTE: 프로시저 PRINT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

47673      title10;
MPRINT(EM_DIAGRAM):   title10;
47674      %let _hpflow = 0;
47675      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
47676      set EMWS6.Tree4_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS6.Tree4_EMINFO;
47677      where key="HPDMSAMPLE";
MPRINT(EM_DIAGRAM):   where key="HPDMSAMPLE";
47678      call symput('_hpflow', '1');
MPRINT(EM_DIAGRAM):   call symput('_hpflow', '1');
47679      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 0개의 관측값을 데이터셋 EMWS6.TREE4_EMINFO.에서 읽었습니다.
      WHERE key='HPDMSAMPLE';
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

47680      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
47681      set EMWS6.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS6.em_nodeid;
47682      where upcase(NODEID) = upcase("Tree4");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Tree4");
47683      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
47684      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS6.EM_NODEID.에서 읽었습니다.
      WHERE UPCASE(NODEID)='TREE4';
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

47685      data EMWS6.MdlComp3_EMRANK;
MPRINT(EM_DIAGRAM):    data EMWS6.MdlComp3_EMRANK;
47686      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
47686    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
47687      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
47687    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
47687    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
47687    ! TARGETLABEL =
47688         "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "선행 노드" MODEL = "모델 노드" MODELDESCRIPTION = "모델 
설명" TARGETLABEL = "타겟 레이블";
47689      retain parent "Tree4" MODEL "Tree4" MODELDESCRIPTION "의사결정트리(Decision Tree)
47689    ! (4)" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Tree4" MODEL "Tree4" MODELDESCRIPTION 
"의사결정트리(Decision Tree) (4)" TARGETLABEL "";
47690      set EMWS6.Tree4_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS6.Tree4_EMRANK;
47691      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
47692      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 40개의 관측값을 데이터셋 EMWS6.TREE4_EMRANK.에서 읽었습니다.
      WHERE UPCASE(TARGET)='BAD';
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMRANK은(는) 40개의 관측값과 38개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

47693      data EMWS6.MdlComp3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):    data EMWS6.MdlComp3_EMSCOREDIST;
47694      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
47694    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
47695      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
47695    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
47695    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
47695    ! TARGETLABEL =
47696         "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "선행 노드" MODEL = "모델 노드" MODELDESCRIPTION = "모델 
설명" TARGETLABEL = "타겟 레이블";
47697      retain parent "Tree4" MODEL "Tree4" MODELDESCRIPTION "의사결정트리(Decision Tree)
47697    ! (4)" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Tree4" MODEL "Tree4" MODELDESCRIPTION 
"의사결정트리(Decision Tree) (4)" TARGETLABEL "";
47698      set EMWS6.Tree4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS6.Tree4_EMSCOREDIST;
47699      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
47700      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 16개의 관측값을 데이터셋 EMWS6.TREE4_EMSCOREDIST.에서 읽었습니다.
      WHERE UPCASE(TARGET)='BAD';
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMSCOREDIST은(는) 16개의 관측값과 24개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.04 초
      

Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: 1개의 관측값을 데이터셋 EMWS6.TREE4_EMINFO.에서 읽었습니다.
      WHERE (TARGET='BAD') and (KEY='DECMETA');
NOTE: 데이터셋 WORK.EMINFO40UPKAN5은(는) 1개의 관측값과 3개의 변수를 가지고 있습니다.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: 1개의 관측값을 데이터셋 EMWS6.TREE4_EMINFO.에서 읽었습니다.
      WHERE (TARGET='BAD') and (KEY='DECDATA');
NOTE: 데이터셋 WORK.EMINFO40UPKAN5은(는) 1개의 관측값과 3개의 변수를 가지고 있습니다.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
47701      data WORK.Tree4_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Tree4_OUTFIT;
47702      set EMWS6.Tree4_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS6.Tree4_EMOUTFIT;
47703      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS6.TREE4_EMOUTFIT.에서 읽었습니다.
NOTE: 데이터셋 WORK.TREE4_OUTFIT은(는) 1개의 관측값과 17개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

47704      data EMWS6.MdlComp3_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS6.MdlComp3_EMOUTFIT;
47705      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL 
$200;
47706      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
47706    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
47706    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
47706    ! TARGETLABEL =
47707         "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "선행 노드" MODEL = "모델 노드" MODELDESCRIPTION = "모델 
설명" TARGETLABEL = "타겟 레이블";
47708      retain parent "Tree4" MODEL "Tree4" MODELDESCRIPTION "의사결정트리(Decision Tree)
47708    ! (4)" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Tree4" MODEL "Tree4" MODELDESCRIPTION 
"의사결정트리(Decision Tree) (4)" TARGETLABEL "";
47709      set WORK.Tree4_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Tree4_OUTFIT;
47710      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
47711      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 1개의 관측값을 데이터셋 WORK.TREE4_OUTFIT.에서 읽었습니다.
      WHERE UPCASE(TARGET)='BAD';
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT은(는) 1개의 관측값과 20개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

47712      data EMWS6.MdlComp3_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):    data EMWS6.MdlComp3_EMCLASSIFICATION;
47713      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
47713    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
47714      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
47714    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
47714    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
47714    ! TARGETLABEL =
47715         "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "선행 노드" MODEL = "모델 노드" MODELDESCRIPTION = "모델 
설명" TARGETLABEL = "타겟 레이블";
47716      retain parent "Tree4" MODEL "Tree4" MODELDESCRIPTION "의사결정트리(Decision Tree)
47716    ! (4)" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Tree4" MODEL "Tree4" MODELDESCRIPTION 
"의사결정트리(Decision Tree) (4)" TARGETLABEL "";
47717      set EMWS6.Tree4_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS6.Tree4_EMCLASSIFICATION;
47718      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
47719      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 8개의 관측값을 데이터셋 EMWS6.TREE4_EMCLASSIFICATION.에서 읽었습니다.
      WHERE UPCASE(TARGET)='BAD';
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMCLASSIFICATION은(는) 8개의 관측값과 15개의 변수를 가지고 
      있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

47720      data EMWS6.MdlComp3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):    data EMWS6.MdlComp3_EMEVENTREPORT;
47721      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
47721    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
47722      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
47722    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
47722    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
47722    ! TARGETLABEL =
47723         "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "선행 노드" MODEL = "모델 노드" MODELDESCRIPTION = "모델 
설명" TARGETLABEL = "타겟 레이블";
47724      retain parent "Tree4" MODEL "Tree4" MODELDESCRIPTION "의사결정트리(Decision Tree)
47724    ! (4)" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Tree4" MODEL "Tree4" MODELDESCRIPTION 
"의사결정트리(Decision Tree) (4)" TARGETLABEL "";
47725      set EMWS6.Tree4_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS6.Tree4_EMEVENTREPORT;
47726      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
47727      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 2개의 관측값을 데이터셋 EMWS6.TREE4_EMEVENTREPORT.에서 읽었습니다.
      WHERE UPCASE(TARGET)='BAD';
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMEVENTREPORT은(는) 2개의 관측값과 10개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

*------------------------------------------------------------* 
* "평가 통계량 계산" 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS6.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Tree4");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS6.Tree4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS6.MdlComp3_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Tree4" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS6.Ids4_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS6.Tree4_TRAIN;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN 
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = 
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;

MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;

MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;

MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1                               ") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;

MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1                               " NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          경고: 모든 사후확률은 결측값입니다. ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = 
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   DATA WORK.MdlComp3_ROCTEMP (KEEP = SENSITIVITY SPECIFICITY EVENTVALUE 
ONEMINUSSPECIFICITY _FALPOS_ _FALNEG_ _POS_ _NEG_ FIRSTINGROUP LASTINGROUP LOWPOSTERIOR 
UPPOSTERIOR ) ;

MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;

MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;

MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - 
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1992805755 _NEVENTS 
831 _NNONEVENTS 3339 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;

MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 4170));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1                               " ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0435916542 OVLMAX 1 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;

MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 4170 * 
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / 
(4170/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 4170)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 4170/20) ) / ( 
AVGNUMRESP / (4170/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 4170 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 4170 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 4170/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * 
((20-GROUP+1)* 4170/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF CEIL (OVLMIN * 100) <= _K <= FLOOR (OVLMAX * 100) THEN DO;
MPRINT(EM_ASSESS):   PROBABILITY = _K / 100;
MPRINT(EM_ASSESS):   _POS_ = TRUEPOSX ( _K);
MPRINT(EM_ASSESS):   SENSITIVITY = _POS_ / _NEVENTS;
MPRINT(EM_ASSESS):   _NEG_ = TRUENEGX ( _K);
MPRINT(EM_ASSESS):   _FALPOS_ = FALSEPOSX ( _K);
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = _FALPOS_ / (4170 - _NEVENTS);
MPRINT(EM_ASSESS):   SPECIFICITY = 1 - ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   _FALNEG_ = FALSENEGX ( _K);
MPRINT(EM_ASSESS):   FALSENEG = _FALNEG_ / _NEVENTS;
MPRINT(EM_ASSESS):   OVL_ACCURACY = (_NEG_ + _POS_) / 4170;
MPRINT(EM_ASSESS):   Y0P0 = _NEG_ / 4170;
MPRINT(EM_ASSESS):   Y1P1 = _POS_ / 4170;
MPRINT(EM_ASSESS):   Y0P1 = _FALPOS_ / 4170;
MPRINT(EM_ASSESS):   Y1P0 = _FALNEG_ / 4170;
MPRINT(EM_ASSESS):   PROB = _K / 100;
MPRINT(EM_ASSESS):   IF _POS_ > 0 THEN POSPREC = _POS_ / (_POS_ + ONEMINUSSPECIFICITY * 
_NNONEVENTS);
MPRINT(EM_ASSESS):   ELSE POSPREC = .;
MPRINT(EM_ASSESS):   IF _NEG_ > 0 THEN NEGPREC = _NEG_ / (_NEG_ + FALSENEG * _NEVENTS);
MPRINT(EM_ASSESS):   ELSE NEGPREC = .;
MPRINT(EM_ASSESS):   _DIFFERENCE = ABS (SUM ( FALSENEG, - SPECIFICITY ));
MPRINT(EM_ASSESS):   IF FALSENEG > . AND SPECIFICITY > . AND KS_ABSDIFF < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   KSPROB = PROB;
MPRINT(EM_ASSESS):   KS_ABSDIFF = _DIFFERENCE;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   PERCENT1 = _EVENTS (_K) / _NEVENTS;
MPRINT(EM_ASSESS):   PERCENT0 = NONEVENTS (_K) / (4170 - _NEVENTS);
MPRINT(EM_ASSESS):   IF POSPREC > . AND SENSITIVITY > . AND MINPRECTPR > ABS (POSPREC - 
SENSITIVITY) THEN DO;
MPRINT(EM_ASSESS):   PRECTPR = PROB;
MPRINT(EM_ASSESS):   MINPRECTPR = ABS (POSPREC - SENSITIVITY);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   DO KK = 20 TO 1 BY -1;
MPRINT(EM_ASSESS):   IF MINPROBS ( KK) <= PROB <= MAXPROBS ( KK) THEN DO;
MPRINT(EM_ASSESS):   DECILE = KK;
MPRINT(EM_ASSESS):   KK = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   FIRSTINGROUP = FIRSTIN (_K);
MPRINT(EM_ASSESS):   LASTINGROUP = LASTIN (_K);
MPRINT(EM_ASSESS):   IF FIRSTINGROUP > . THEN DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = ROUND (FIRSTINGROUP, .001);
MPRINT(EM_ASSESS):   UPPOSTERIOR = LOWPOSTERIOR + .0099;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = . ;
MPRINT(EM_ASSESS):   UPPOSTERIOR = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp3_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "이벤트" DECILE = "깊이" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;

MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Just adding extremes;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   IF 0 THEN SET WORK.MdlComp3_ROCTEMP NOBS = NOBS;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NOBS", NOBS);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp3_ROCTEMP;
MPRINT(EM_ASSESS):   SET WORK.MdlComp3_ROCTEMP END = EOF;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp3_ROCTEMP;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   _POS_ = .;
MPRINT(EM_ASSESS):   _FALPOS_ = .;
MPRINT(EM_ASSESS):   _NEG_ = .;
MPRINT(EM_ASSESS):   _FALNEG_ = .;
MPRINT(EM_ASSESS):   EVENTVALUE = "1                               " ;
MPRINT(EM_ASSESS):   FIRSTINGROUP = .;
MPRINT(EM_ASSESS):   LASTINGROUP = 1;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 1;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 1;
MPRINT(EM_ASSESS):   SENSITIVITY = 0;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 0;
MPRINT(EM_ASSESS):   SPECIFICITY = 1;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp3_ROCTEMP;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 0;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 0;
MPRINT(EM_ASSESS):   LASTINGROUP = 0;
MPRINT(EM_ASSESS):   SENSITIVITY = 1;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 1;
MPRINT(EM_ASSESS):   SPECIFICITY = 0;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp3_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RENAME LASTINGROUP = CUTOFF EVENTVALUE = EVENT ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Run for data outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp3_ROCTEMP;
MPRINT(EM_ASSESS):   BY SENSITIVITY ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..................................... OUTROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY MdlComp3_ROCTEMP;
MPRINT(EM_ASSESS):   LABEL EVENT = "이벤트" ONEMINUSSPECIFICITY = "1 - 특이도" SENSITIVITY = 
"민감도" _POS_ = "True Positive 개수" _NEG_ = "True Negative 개수" _FALPOS_ = "False Positive 
개수" _FALNEG_ = "False Negative 개수" CUTOFF = "그룹 내 마지막" LOWPOSTERIOR = "하한 확률" 
UPPOSTERIOR = "상한 확률" SPECIFICITY = "특이도" FIRSTINGROUP = "그룹 내 첫번째" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp3_ROCTEMP;
MPRINT(EM_ASSESS):   BY ONEMINUSSPECIFICITY SENSITIVITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....................... Analyzing outfit data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp3_STATTEMP;
MPRINT(EM_ASSESS):   _AUR_ = INPUT ( PUT (0.87856438278752, 5.3), 5.3);
MPRINT(EM_ASSESS):   _GINI_ = INPUT ( PUT (0.75712876557504, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_ = INPUT ( PUT (0.6770688386, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_PROB_CUTOFF = INPUT ( PUT (0.160, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_BIN_ = INPUT ( PUT (0.6732208217, 5.3), 5.3);
MPRINT(EM_ASSESS):   BINNED_KS_PROB_CUTOFF = INPUT ( PUT (0.2235727029, 5.3), 5.3);
MPRINT(EM_ASSESS):   LABEL _AUR_ = "ROC 아래의 영역" ;
MPRINT(EM_ASSESS):   LABEL _GINI_ = "Gini 계수" ;
MPRINT(EM_ASSESS):   LABEL _KS_ = _KS_ = "Two-Sample Kolmogorov-Smirnov 통계량" ;
MPRINT(EM_ASSESS):   LABEL _KS_PROB_CUTOFF = " Kolmogorov-Smirnov Stat Prob Cut-off";
MPRINT(EM_ASSESS):   LABEL _KS_BIN_ = "Bin-Based Two-sample Kolmogorov-Smirnov 통계량" ;
MPRINT(EM_ASSESS):   LABEL BINNED_KS_PROB_CUTOFF = " Binned Kolmogorov-Smirnov Stat Prob 
Cut-off";
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp3_ROCTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $8 TARGET $32 
TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label PARENT = "선행 노드" MODEL = "모델 노드" MODELDESCRIPTION = "모델 
설명" DATAROLE = "데이터 역할" TARGET = "타겟 변수" TARGETLABEL = "타겟 레이블";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp3_ROCTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Tree4" MODEL "Tree4" MODELDESCRIPTION 
"의사결정트리(Decision Tree) (4)" TARGET "BAD" TARGETLABEL "" DATAROLE "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS6.MdlComp3_EMROC;
MPRINT(EM_DIAGRAM):   set WORK.MdlComp3_ROCTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp3_STATTEMP;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   retain TARGET "BAD" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp3_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):   modify MdlComp3_STATTEMP;
MPRINT(EM_DIAGRAM):   rename _KS_=KS;
MPRINT(EM_DIAGRAM):   label _AUR_ = "분석: Roc 인덱스" _Gini_ = "분석: Gini 계수" KS = "분석: 
Kolmogorov-Smirnov 통계량" _KS_BIN_ = "분석: Bin-Based Two-Way Kolmogorov-Smirnov 통계량" 
_KS_PROB_CUTOFF = "분석: Kolmogorov-Smirnov 확률 임계값" BINNED_KS_PROB_CUTOFF= "분석: 
Bin-Based Two-Way Kolmogorov-Smirnov 확률 임계값";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp3INDEXTEMP;
MPRINT(EM_DIAGRAM):   set WORK.MdlComp3_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS6.Tree4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS6.MdlComp3_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Tree4" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS6.MdlComp3_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Tree4" and DATAROLE="VALIDATE";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSVALID', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS6.Ids4_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS6.Tree4_VALIDATE;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN 
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = 
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;

MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;

MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;

MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1                               ") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;

MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1                               " NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          경고: 모든 사후확률은 결측값입니다. ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = 
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   DATA WORK.MdlComp3_ROCTEMP (KEEP = SENSITIVITY SPECIFICITY EVENTVALUE 
ONEMINUSSPECIFICITY _FALPOS_ _FALNEG_ _POS_ _NEG_ FIRSTINGROUP LASTINGROUP LOWPOSTERIOR 
UPPOSTERIOR ) ;

MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;

MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;

MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - 
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.2 _NEVENTS 358 
_NNONEVENTS 1432 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;

MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1790));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1                               " ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0435916542 OVLMAX 1 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;

MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1790 * 
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / 
(1790/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1790)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 1790/20) ) / ( 
AVGNUMRESP / (1790/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1790 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1790 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 1790/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * 
((20-GROUP+1)* 1790/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF CEIL (OVLMIN * 100) <= _K <= FLOOR (OVLMAX * 100) THEN DO;
MPRINT(EM_ASSESS):   PROBABILITY = _K / 100;
MPRINT(EM_ASSESS):   _POS_ = TRUEPOSX ( _K);
MPRINT(EM_ASSESS):   SENSITIVITY = _POS_ / _NEVENTS;
MPRINT(EM_ASSESS):   _NEG_ = TRUENEGX ( _K);
MPRINT(EM_ASSESS):   _FALPOS_ = FALSEPOSX ( _K);
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = _FALPOS_ / (1790 - _NEVENTS);
MPRINT(EM_ASSESS):   SPECIFICITY = 1 - ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   _FALNEG_ = FALSENEGX ( _K);
MPRINT(EM_ASSESS):   FALSENEG = _FALNEG_ / _NEVENTS;
MPRINT(EM_ASSESS):   OVL_ACCURACY = (_NEG_ + _POS_) / 1790;
MPRINT(EM_ASSESS):   Y0P0 = _NEG_ / 1790;
MPRINT(EM_ASSESS):   Y1P1 = _POS_ / 1790;
MPRINT(EM_ASSESS):   Y0P1 = _FALPOS_ / 1790;
MPRINT(EM_ASSESS):   Y1P0 = _FALNEG_ / 1790;
MPRINT(EM_ASSESS):   PROB = _K / 100;
MPRINT(EM_ASSESS):   IF _POS_ > 0 THEN POSPREC = _POS_ / (_POS_ + ONEMINUSSPECIFICITY * 
_NNONEVENTS);
MPRINT(EM_ASSESS):   ELSE POSPREC = .;
MPRINT(EM_ASSESS):   IF _NEG_ > 0 THEN NEGPREC = _NEG_ / (_NEG_ + FALSENEG * _NEVENTS);
MPRINT(EM_ASSESS):   ELSE NEGPREC = .;
MPRINT(EM_ASSESS):   _DIFFERENCE = ABS (SUM ( FALSENEG, - SPECIFICITY ));
MPRINT(EM_ASSESS):   IF FALSENEG > . AND SPECIFICITY > . AND KS_ABSDIFF < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   KSPROB = PROB;
MPRINT(EM_ASSESS):   KS_ABSDIFF = _DIFFERENCE;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   PERCENT1 = _EVENTS (_K) / _NEVENTS;
MPRINT(EM_ASSESS):   PERCENT0 = NONEVENTS (_K) / (1790 - _NEVENTS);
MPRINT(EM_ASSESS):   IF POSPREC > . AND SENSITIVITY > . AND MINPRECTPR > ABS (POSPREC - 
SENSITIVITY) THEN DO;
MPRINT(EM_ASSESS):   PRECTPR = PROB;
MPRINT(EM_ASSESS):   MINPRECTPR = ABS (POSPREC - SENSITIVITY);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   DO KK = 20 TO 1 BY -1;
MPRINT(EM_ASSESS):   IF MINPROBS ( KK) <= PROB <= MAXPROBS ( KK) THEN DO;
MPRINT(EM_ASSESS):   DECILE = KK;
MPRINT(EM_ASSESS):   KK = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   FIRSTINGROUP = FIRSTIN (_K);
MPRINT(EM_ASSESS):   LASTINGROUP = LASTIN (_K);
MPRINT(EM_ASSESS):   IF FIRSTINGROUP > . THEN DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = ROUND (FIRSTINGROUP, .001);
MPRINT(EM_ASSESS):   UPPOSTERIOR = LOWPOSTERIOR + .0099;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = . ;
MPRINT(EM_ASSESS):   UPPOSTERIOR = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp3_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "이벤트" DECILE = "깊이" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;

MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Just adding extremes;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   IF 0 THEN SET WORK.MdlComp3_ROCTEMP NOBS = NOBS;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NOBS", NOBS);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp3_ROCTEMP;
MPRINT(EM_ASSESS):   SET WORK.MdlComp3_ROCTEMP END = EOF;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp3_ROCTEMP;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   _POS_ = .;
MPRINT(EM_ASSESS):   _FALPOS_ = .;
MPRINT(EM_ASSESS):   _NEG_ = .;
MPRINT(EM_ASSESS):   _FALNEG_ = .;
MPRINT(EM_ASSESS):   EVENTVALUE = "1                               " ;
MPRINT(EM_ASSESS):   FIRSTINGROUP = .;
MPRINT(EM_ASSESS):   LASTINGROUP = 1;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 1;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 1;
MPRINT(EM_ASSESS):   SENSITIVITY = 0;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 0;
MPRINT(EM_ASSESS):   SPECIFICITY = 1;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp3_ROCTEMP;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 0;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 0;
MPRINT(EM_ASSESS):   LASTINGROUP = 0;
MPRINT(EM_ASSESS):   SENSITIVITY = 1;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 1;
MPRINT(EM_ASSESS):   SPECIFICITY = 0;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp3_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RENAME LASTINGROUP = CUTOFF EVENTVALUE = EVENT ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Run for data outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp3_ROCTEMP;
MPRINT(EM_ASSESS):   BY SENSITIVITY ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..................................... OUTROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY MdlComp3_ROCTEMP;
MPRINT(EM_ASSESS):   LABEL EVENT = "이벤트" ONEMINUSSPECIFICITY = "1 - 특이도" SENSITIVITY = 
"민감도" _POS_ = "True Positive 개수" _NEG_ = "True Negative 개수" _FALPOS_ = "False Positive 
개수" _FALNEG_ = "False Negative 개수" CUTOFF = "그룹 내 마지막" LOWPOSTERIOR = "하한 확률" 
UPPOSTERIOR = "상한 확률" SPECIFICITY = "특이도" FIRSTINGROUP = "그룹 내 첫번째" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp3_ROCTEMP;
MPRINT(EM_ASSESS):   BY ONEMINUSSPECIFICITY SENSITIVITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....................... Analyzing outfit data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp3_STATTEMP;
MPRINT(EM_ASSESS):   _AUR_ = INPUT ( PUT (0.86740426328766, 5.3), 5.3);
MPRINT(EM_ASSESS):   _GINI_ = INPUT ( PUT (0.73480852657532, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_ = INPUT ( PUT (0.6606145251, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_PROB_CUTOFF = INPUT ( PUT (0.160, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_BIN_ = INPUT ( PUT (0.6551618086, 5.3), 5.3);
MPRINT(EM_ASSESS):   BINNED_KS_PROB_CUTOFF = INPUT ( PUT (0.2235727029, 5.3), 5.3);
MPRINT(EM_ASSESS):   LABEL _AUR_ = "ROC 아래의 영역" ;
MPRINT(EM_ASSESS):   LABEL _GINI_ = "Gini 계수" ;
MPRINT(EM_ASSESS):   LABEL _KS_ = _KS_ = "Two-Sample Kolmogorov-Smirnov 통계량" ;
MPRINT(EM_ASSESS):   LABEL _KS_PROB_CUTOFF = " Kolmogorov-Smirnov Stat Prob Cut-off";
MPRINT(EM_ASSESS):   LABEL _KS_BIN_ = "Bin-Based Two-sample Kolmogorov-Smirnov 통계량" ;
MPRINT(EM_ASSESS):   LABEL BINNED_KS_PROB_CUTOFF = " Binned Kolmogorov-Smirnov Stat Prob 
Cut-off";
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp3_ROCTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $8 TARGET $32 
TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label PARENT = "선행 노드" MODEL = "모델 노드" MODELDESCRIPTION = "모델 
설명" DATAROLE = "데이터 역할" TARGET = "타겟 변수" TARGETLABEL = "타겟 레이블";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp3_ROCTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Tree4" MODEL "Tree4" MODELDESCRIPTION 
"의사결정트리(Decision Tree) (4)" TARGET "BAD" TARGETLABEL "" DATAROLE "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS6.MdlComp3_EMROC;
MPRINT(EM_DIAGRAM):   set EMWS6.MdlComp3_EMROC WORK.MdlComp3_ROCTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp3_STATTEMP;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   retain TARGET "BAD" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp3_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):   modify MdlComp3_STATTEMP;
MPRINT(EM_DIAGRAM):   rename _AUR_=_VAUR_ _GINI_=_VGINI_ _KS_=VKS _KS_BIN_=_VKS_BIN_ 
_KS_PROB_CUTOFF=_VKS_PROB_CUTOFF_ BINNED_KS_PROB_CUTOFF=_VBINNED_KS_PROB_CUTOFF_;
MPRINT(EM_DIAGRAM):   label _VAUR_ = "평가: Roc 인덱스" _VGini_ = "평가: Gini 계수" VKS = 
"평가: Kolmogorov-Smirnov 통계량" _VKS_BIN_ = "평가: Bin-Based Two-Way Kolmogorov-Smirnov 
통계량" _VKS_PROB_CUTOFF_ = "평가: Kolmogorov-Smirnov 확률 임계값" _VBINNED_KS_PROB_CUTOFF_= 
"평가: Bin-Based Two-Way Kolmogorov-Smirnov 확률 임계값";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp3INDEXTEMP;
MPRINT(EM_DIAGRAM):   set WORK.MdlComp3INDEXTEMP;
MPRINT(EM_DIAGRAM):   if _N_ =1 then set WORK.MdlComp3_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp3INDEXTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL 
$200;
MPRINT(EM_DIAGRAM):   label PARENT = "선행 노드" MODEL = "모델 노드" MODELDESCRIPTION = "모델 
설명" TARGET = "타겟 변수" TARGETLABEL = "타겟 레이블";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp3INDEXTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Tree4" MODEL "Tree4" MODELDESCRIPTION 
"의사결정트리(Decision Tree) (4)" TARGET "" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS6.MdlComp3_EMINDEX;
MPRINT(EM_DIAGRAM):   set WORK.MdlComp3INDEXTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS6.MdlComp3_EMROC;
MPRINT(EM_DIAGRAM):   set EMWS6.MdlComp3_EMROC end=lastobs;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   if lastobs then do;
MPRINT(EM_DIAGRAM):   MODEL=' _Baseline_ ';
MPRINT(EM_DIAGRAM):   MODELDESCRIPTION="기준선";
MPRINT(EM_DIAGRAM):   DATAROLE ='TRAIN';
MPRINT(EM_DIAGRAM):   sensitivity = 0;
MPRINT(EM_DIAGRAM):   oneminusspecificity = 0;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   MODEL=' _Baseline_ ';
MPRINT(EM_DIAGRAM):   MODELDESCRIPTION="기준선";
MPRINT(EM_DIAGRAM):   DATAROLE ='TRAIN';
MPRINT(EM_DIAGRAM):   sensitivity = 1;
MPRINT(EM_DIAGRAM):   oneminusspecificity = 1;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   MODEL=' _Baseline_ ';
MPRINT(EM_DIAGRAM):   MODELDESCRIPTION="기준선";
MPRINT(EM_DIAGRAM):   DATAROLE='VALIDATE';
MPRINT(EM_DIAGRAM):   sensitivity = 0;
MPRINT(EM_DIAGRAM):   oneminusspecificity = 0;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   MODEL=' _Baseline_ ';
MPRINT(EM_DIAGRAM):   MODELDESCRIPTION="기준선";
MPRINT(EM_DIAGRAM):   DATAROLE='VALIDATE';
MPRINT(EM_DIAGRAM):   sensitivity = 1;
MPRINT(EM_DIAGRAM):   oneminusspecificity = 1;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
47873      proc sort data=EMWS6.MdlComp3_EMOUTFIT NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS6.MdlComp3_EMOUTFIT NOTHREADS;
47874      by model target;
MPRINT(EM_DIAGRAM):   by model target;
47875      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT은(는) 1개의 관측값과 20개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

47876      proc sort data=EMWS6.MdlComp3_EMINDEX NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS6.MdlComp3_EMINDEX NOTHREADS;
47877      by model target;
MPRINT(EM_DIAGRAM):   by model target;
47878      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMINDEX.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMINDEX은(는) 1개의 관측값과 17개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

47879      data EMWS6.MdlComp3_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS6.MdlComp3_EMOUTFIT;
47880      merge EMWS6.MdlComp3_EMOUTFIT EMWS6.MdlComp3_EMINDEX;
MPRINT(EM_DIAGRAM):   merge EMWS6.MdlComp3_EMOUTFIT EMWS6.MdlComp3_EMINDEX;
47881      label TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TARGET = "타겟 변수";
47882      by model target;
MPRINT(EM_DIAGRAM):   by model target;
47883      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT.에서 읽었습니다.
NOTE: 1개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMINDEX.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT은(는) 1개의 관측값과 32개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

47884      proc sort data=EMWS6.MdlComp3_EMRANK(keep=DATAROLE DECILE MODEL GAIN LIFT LIFTC RESP
47884    !  RESPC CAP CAPC) out=_temp;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS6.MdlComp3_EMRANK(keep=DATAROLE DECILE MODEL GAIN 
LIFT LIFTC RESP RESPC CAP CAPC) out=_temp;
47885      by MODEL;
MPRINT(EM_DIAGRAM):   by MODEL;
47886      where DECILE=10;
MPRINT(EM_DIAGRAM):   where DECILE=10;
47887      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 2개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMRANK.에서 읽었습니다.
      WHERE DECILE=10;
NOTE: 데이터셋 WORK._TEMP은(는) 2개의 관측값과 10개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

47888      data _temp;
MPRINT(EM_DIAGRAM):   data _temp;
47889      retain _GAIN_ _VGAIN_ _LIFT_ _LIFTC_ _VLIFT_ _VLIFTC_ _RESP_ _RESPC_ _VRESP_
47889    ! _VRESPC_ _CAP_ _CAPC_ _VCAP_ _VCAPC_ .;
MPRINT(EM_DIAGRAM):   retain _GAIN_ _VGAIN_ _LIFT_ _LIFTC_ _VLIFT_ _VLIFTC_ _RESP_ _RESPC_ 
_VRESP_ _VRESPC_ _CAP_ _CAPC_ _VCAP_ _VCAPC_ .;
47890      label _GAIN_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_traingain_vlabel, NOQUOTE))"
47890    ! _VGAIN_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_validgain_vlabel, NOQUOTE))" _LIFT_ =
47890    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trainlift_vlabel, NOQUOTE))" _VLIFT_ =
47891         "%sysfunc(sasmsg(sashelp.dmine, rpt_validlift_vlabel, NOQUOTE))" _RESP_ =
47891    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trainresp_vlabel, NOQUOTE))" _VRESP_ =
47891    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_validresp_vlabel, NOQUOTE))" _CAP_ =
47892         "%sysfunc(sasmsg(sashelp.dmine, rpt_traincap_vlabel,  NOQUOTE))" _VCAP_ =
47892    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_validcap_vlabel,  NOQUOTE))" _LIFTC_ =
47892    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trainliftc_vlabel, NOQUOTE))" _VLIFTC_ =
47893         "%sysfunc(sasmsg(sashelp.dmine, rpt_validliftc_vlabel, NOQUOTE))" _RESPC_ =
47893    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trainrespc_vlabel, NOQUOTE))" _VRESPC_ =
47893    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_validrespc_vlabel, NOQUOTE))" _CAPC_ =
47894         "%sysfunc(sasmsg(sashelp.dmine, rpt_traincapc_vlabel,  NOQUOTE))" _VCAPC_ =
47894    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_validcapc_vlabel,  NOQUOTE))" _TGAIN_ =
47894    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_testgain_vlabel,  NOQUOTE))" _TLIFT_ =
47895         "%sysfunc(sasmsg(sashelp.dmine, rpt_testlift_vlabel,   NOQUOTE))" _TRESP_ =
47895    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_testresp_vlabel,  NOQUOTE))" _TCAP_ =
47895    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_testcap_vlabel,   NOQUOTE))" _TLIFTC_ =
47896         "%sysfunc(sasmsg(sashelp.dmine, rpt_testliftc_vlabel,   NOQUOTE))" _TRESPC_ =
47896    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_testrespc_vlabel,  NOQUOTE))" _TCAPC_ =
47896    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_testcapc_vlabel,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _GAIN_ = "분석: 이득" _VGAIN_ = "평가: 이득" _LIFT_ = "분석: 
향상도" _VLIFT_ = "평가: 향상도" _RESP_ = "분석: 반응률" _VRESP_ = "평가: 반응률" _CAP_ = 
"분석: 반응검출률" _VCAP_ = "평가: 반응검출률" _LIFTC_ = "분석: 누적 향상도" _VLIFTC_ = "평가: 
누적 향상도" _RESPC_ = "분석: 누적반응률" _VRESPC_ = "평가: 누적반응률" _CAPC_ = "분석: 누적 
반응검출률" _VCAPC_ = "평가: 누적 반응검출률" _TGAIN_ = "검증: 이득" _TLIFT_ = "검증: 향상도" 
_TRESP_ = "검증: 반응률" _TCAP_ = "검증: 반응검출률" _TLIFTC_ = "검증: 누적 향상도" _TRESPC_ = 
"검증: 누적반응률" _TCAPC_ = "검증: 누적 반응검출률";
47897      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
47898      by MODEL;
MPRINT(EM_DIAGRAM):   by MODEL;
47899      if first.MODEL then do;
MPRINT(EM_DIAGRAM):   if first.MODEL then do;
47900      _GAIN_=.;
MPRINT(EM_DIAGRAM):   _GAIN_=.;
47901      _VGAIN_=.;
MPRINT(EM_DIAGRAM):   _VGAIN_=.;
47902      _TGAIN_=.;
MPRINT(EM_DIAGRAM):   _TGAIN_=.;
47903      _LIFT_=.;
MPRINT(EM_DIAGRAM):   _LIFT_=.;
47904      _VLIFT_=.;
MPRINT(EM_DIAGRAM):   _VLIFT_=.;
47905      _TLIFT_=.;
MPRINT(EM_DIAGRAM):   _TLIFT_=.;
47906      _LIFTC_=.;
MPRINT(EM_DIAGRAM):   _LIFTC_=.;
47907      _VLIFTC_=.;
MPRINT(EM_DIAGRAM):   _VLIFTC_=.;
47908      _TLIFTC_=.;
MPRINT(EM_DIAGRAM):   _TLIFTC_=.;
47909      _RESP_=.;
MPRINT(EM_DIAGRAM):   _RESP_=.;
47910      _VRESP_=.;
MPRINT(EM_DIAGRAM):   _VRESP_=.;
47911      _TRESP_=.;
MPRINT(EM_DIAGRAM):   _TRESP_=.;
47912      _RESPC_=.;
MPRINT(EM_DIAGRAM):   _RESPC_=.;
47913      _VRESPC_=.;
MPRINT(EM_DIAGRAM):   _VRESPC_=.;
47914      _TRESPC_=.;
MPRINT(EM_DIAGRAM):   _TRESPC_=.;
47915      _CAP_=.;
MPRINT(EM_DIAGRAM):   _CAP_=.;
47916      _VCAP_=.;
MPRINT(EM_DIAGRAM):   _VCAP_=.;
47917      _TCAP_=.;
MPRINT(EM_DIAGRAM):   _TCAP_=.;
47918      _CAPC_=.;
MPRINT(EM_DIAGRAM):   _CAPC_=.;
47919      _VCAPC_=.;
MPRINT(EM_DIAGRAM):   _VCAPC_=.;
47920      _VCAPC_=.;
MPRINT(EM_DIAGRAM):   _VCAPC_=.;
47921      end;
MPRINT(EM_DIAGRAM):   end;
47922      select(DATAROLE);
MPRINT(EM_DIAGRAM):   select(DATAROLE);
47923      when('TRAIN') do;
MPRINT(EM_DIAGRAM):   when('TRAIN') do;
47924      _GAIN_=GAIN;
MPRINT(EM_DIAGRAM):   _GAIN_=GAIN;
47925      _LIFT_=LIFT;
MPRINT(EM_DIAGRAM):   _LIFT_=LIFT;
47926      _LIFTC_=LIFTC;
MPRINT(EM_DIAGRAM):   _LIFTC_=LIFTC;
47927      _RESP_=RESP;
MPRINT(EM_DIAGRAM):   _RESP_=RESP;
47928      _RESPC_=RESPC;
MPRINT(EM_DIAGRAM):   _RESPC_=RESPC;
47929      _CAP_=CAP;
MPRINT(EM_DIAGRAM):   _CAP_=CAP;
47930      _CAPC_=CAPC;
MPRINT(EM_DIAGRAM):   _CAPC_=CAPC;
47931      end;
MPRINT(EM_DIAGRAM):   end;
47932      when('VALIDATE') do;
MPRINT(EM_DIAGRAM):   when('VALIDATE') do;
47933      _VGAIN_=GAIN;
MPRINT(EM_DIAGRAM):   _VGAIN_=GAIN;
47934      _VLIFT_=LIFT;
MPRINT(EM_DIAGRAM):   _VLIFT_=LIFT;
47935      _VLIFTC_=LIFTC;
MPRINT(EM_DIAGRAM):   _VLIFTC_=LIFTC;
47936      _VRESP_=RESP;
MPRINT(EM_DIAGRAM):   _VRESP_=RESP;
47937      _VRESPC_=RESPC;
MPRINT(EM_DIAGRAM):   _VRESPC_=RESPC;
47938      _VCAP_=CAP;
MPRINT(EM_DIAGRAM):   _VCAP_=CAP;
47939      _VCAPC_=CAPC;
MPRINT(EM_DIAGRAM):   _VCAPC_=CAPC;
47940      end;
MPRINT(EM_DIAGRAM):   end;
47941      when('TEST') do;
MPRINT(EM_DIAGRAM):   when('TEST') do;
47942      _TGAIN_=GAIN;
MPRINT(EM_DIAGRAM):   _TGAIN_=GAIN;
47943      _TLIFT_=LIFT;
MPRINT(EM_DIAGRAM):   _TLIFT_=LIFT;
47944      _TLIFTC_=LIFTC;
MPRINT(EM_DIAGRAM):   _TLIFTC_=LIFTC;
47945      _TRESP_=RESP;
MPRINT(EM_DIAGRAM):   _TRESP_=RESP;
47946      _TRESPC_=RESPC;
MPRINT(EM_DIAGRAM):   _TRESPC_=RESPC;
47947      _TCAP_=CAP;
MPRINT(EM_DIAGRAM):   _TCAP_=CAP;
47948      _TCAPC_=CAPC;
MPRINT(EM_DIAGRAM):   _TCAPC_=CAPC;
47949      end;
MPRINT(EM_DIAGRAM):   end;
47950      otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
47951      end;
MPRINT(EM_DIAGRAM):   end;
47952      keep MODEL _GAIN_ _LIFT_ _LIFTC_ _RESP_ _RESPC_ _CAP_ _CAPC_
47953      _VGAIN_ _VLIFT_ _VLIFTC_ _VRESP_ _VRESPC_ _VCAP_ _VCAPC_
47954      ;
MPRINT(EM_DIAGRAM):   keep MODEL _GAIN_ _LIFT_ _LIFTC_ _RESP_ _RESPC_ _CAP_ _CAPC_ _VGAIN_ 
_VLIFT_ _VLIFTC_ _VRESP_ _VRESPC_ _VCAP_ _VCAPC_ ;
47955      if last.model then output;
MPRINT(EM_DIAGRAM):   if last.model then output;
47956      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 2개의 관측값을 데이터셋 WORK._TEMP.에서 읽었습니다.
NOTE: 데이터셋 WORK._TEMP은(는) 1개의 관측값과 15개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.14 초
      cpu 시간            0.14 초
      

47957      proc sort data=EMWS6.MdlComp3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS6.MdlComp3_EMOUTFIT;
47958      by MODEL;
MPRINT(EM_DIAGRAM):   by MODEL;
47959      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT은(는) 1개의 관측값과 32개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

47960      data EMWS6.MdlComp3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS6.MdlComp3_EMOUTFIT;
47961      merge EMWS6.MdlComp3_EMOUTFIT _temp;
MPRINT(EM_DIAGRAM):   merge EMWS6.MdlComp3_EMOUTFIT _temp;
47962      by MODEL;
MPRINT(EM_DIAGRAM):   by MODEL;
47963      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT.에서 읽었습니다.
NOTE: 1개의 관측값을 데이터셋 WORK._TEMP.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT은(는) 1개의 관측값과 46개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.00 초
      

47964      data EMWS6.MdlComp3_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS6.MdlComp3_EMOUTFIT;
47965      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200
47965    ! _CRITERION_ 8;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL 
$200 _CRITERION_ 8;
47966      set EMWS6.MdlComp3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS6.MdlComp3_EMOUTFIT;
47967      label _CRITERION_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_selectioncriterion_vlabel ,
47967    !  NOQUOTE, %nrbquote(Valid: Misclassification Rate)))";
MPRINT(EM_DIAGRAM):   label _CRITERION_ = "선택 기준: Valid: Misclassification Rate";
47968      _CRITERION_ = _VMISC_;
MPRINT(EM_DIAGRAM):   _CRITERION_ = _VMISC_;
47969      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT은(는) 1개의 관측값과 47개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.03 초
      

47970      data EMWS6.MdlComp3_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS6.MdlComp3_EMOUTFIT;
47971      length USE $1;
MPRINT(EM_DIAGRAM):   length USE $1;
47972      label USE= "%sysfunc(sasmsg(sashelp.dmine, rpt_selmodel_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label USE= "선택된 모델";
47973      set EMWS6.MdlComp3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS6.MdlComp3_EMOUTFIT;
47974      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 변수 USE이(가) 초기화되지 않았습니다.
NOTE: 1개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT은(는) 1개의 관측값과 48개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

47975      proc sort data = EMWS6.MdlComp3_EMOUTFIT NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS6.MdlComp3_EMOUTFIT NOTHREADS;
47976      by
47977      _VMISC_
47978      _VASE_ _ASE_ _MISC_;
MPRINT(EM_DIAGRAM):   by _VMISC_ _VASE_ _ASE_ _MISC_;
47979      run;
MPRINT(EM_DIAGRAM):   run;

SAS 시스템

NOTE: 1개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT은(는) 1개의 관측값과 48개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

47980      %let EM_AUTOMODEL = %str();
47981      data EMWS6.MdlComp3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS6.MdlComp3_EMOUTFIT;
47982      set EMWS6.MdlComp3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS6.MdlComp3_EMOUTFIT;
47983      drop found;
MPRINT(EM_DIAGRAM):   drop found;
47984      retain found 0;
MPRINT(EM_DIAGRAM):   retain found 0;
47985      if found = 0 and _VMISC_ ne . then do;
MPRINT(EM_DIAGRAM):   if found = 0 and _VMISC_ ne . then do;
47986      use = 'Y';
MPRINT(EM_DIAGRAM):   use = 'Y';
47987      found = 1;
MPRINT(EM_DIAGRAM):   found = 1;
47988      call symput('EM_AUTOMODEL', model);
MPRINT(EM_DIAGRAM):   call symput('EM_AUTOMODEL', model);
47989      end;
MPRINT(EM_DIAGRAM):   end;
47990      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT은(는) 1개의 관측값과 48개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

47991      title ' ';
MPRINT(EM_DIAGRAM):    title ' ';
47992      proc print data=EMWS6.MdlComp3_EMOUTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS6.MdlComp3_EMOUTFIT noobs label;
47993      var
47994      USE
47995      MODEL
47996      MODELDESCRIPTION
47997      _VMISC_
47998      _ASE_
47999      _MISC_
48000      _VASE_
48001      ;
MPRINT(EM_DIAGRAM):   var USE MODEL MODELDESCRIPTION _VMISC_ _ASE_ _MISC_ _VASE_ ;
48002      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title,        NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "적합통계량";
48003      title10 "Valid: Misclassification Rate (_VMISC_)에 근거한 모델 선택";
MPRINT(EM_DIAGRAM):   title10 "Valid: Misclassification Rate (_VMISC_)에 근거한 모델 선택";
MPRINT(EM_DIAGRAM):   run;
48004      run;

NOTE: 1개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT.에서 읽었습니다.
NOTE: 출력 결과 (프로시저: PRINT, 페이지: 15)
NOTE: 프로시저 PRINT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

48005      title9;
MPRINT(EM_DIAGRAM):   title9;
48006      title10;
MPRINT(EM_DIAGRAM):   title10;
48007      proc transpose data=EMWS6.MdlComp3_EMOUTFIT out=
48007    ! work.modelstats(rename=(_LABEL_=Label _NAME_=STAT));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS6.MdlComp3_EMOUTFIT out= 
work.modelstats(rename=(_LABEL_=Label _NAME_=STAT));
48008      ID model;
MPRINT(EM_DIAGRAM):   ID model;
48009      by target targetLabel;
MPRINT(EM_DIAGRAM):   by target targetLabel;
48010      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT.에서 읽었습니다.
NOTE: 데이터셋 WORK.MODELSTATS은(는) 42개의 관측값과 5개의 변수를 가지고 있습니다.
NOTE: 프로시저 TRANSPOSE 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

48011      data work.modelstats;
MPRINT(EM_DIAGRAM):   data work.modelstats;
48012      set work.modelstats;
MPRINT(EM_DIAGRAM):   set work.modelstats;
48013      if substr(STAT, 1, 2) = '_V' or STAT='VKS' then do;
MPRINT(EM_DIAGRAM):   if substr(STAT, 1, 2) = '_V' or STAT='VKS' then do;
48014      NumRole=2;
MPRINT(EM_DIAGRAM):   NumRole=2;
48015      end;
MPRINT(EM_DIAGRAM):   end;
48016      else if substr(STAT, 1, 2) = '_T' or STAT='TKS' then do;
MPRINT(EM_DIAGRAM):   else if substr(STAT, 1, 2) = '_T' or STAT='TKS' then do;
48017      NumRole=3;
MPRINT(EM_DIAGRAM):   NumRole=3;
48018      end;
MPRINT(EM_DIAGRAM):   end;
48019      else if substr(STAT, 1, 1) = '_' or STAT in('KS', 'BINNED_KS_PROB_CUTOFF') then do;
MPRINT(EM_DIAGRAM):   else if substr(STAT, 1, 1) = '_' or STAT in('KS', 
'BINNED_KS_PROB_CUTOFF') then do;
48020      NumRole=1;
MPRINT(EM_DIAGRAM):   NumRole=1;
48021      end;
MPRINT(EM_DIAGRAM):   end;
48022      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 42개의 관측값을 데이터셋 WORK.MODELSTATS.에서 읽었습니다.
NOTE: 데이터셋 WORK.MODELSTATS은(는) 42개의 관측값과 6개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

48023      proc sort data=work.modelstats out=work.modelstats;
MPRINT(EM_DIAGRAM):   proc sort data=work.modelstats out=work.modelstats;
48024      by NumRole STAT;
MPRINT(EM_DIAGRAM):   by NumRole STAT;
48025      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 42개의 관측값을 데이터셋 WORK.MODELSTATS.에서 읽었습니다.
NOTE: 데이터셋 WORK.MODELSTATS은(는) 42개의 관측값과 6개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

48026      proc format;
MPRINT(EM_DIAGRAM):   proc format;
48027      value RoleFmt 1='Train' 2='Valid' 3='Test';
MPRINT(EM_DIAGRAM):   value RoleFmt 1='Train' 2='Valid' 3='Test';
NOTE: 출력형식 'ROLEFMT'을(를) 생성했습니다.
MPRINT(EM_DIAGRAM):   run;
48028      run;

NOTE: 프로시저 FORMAT 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.00 초
      

48029      proc print data= work.modelstats(drop=STAT target targetLabel) noobs label;
MPRINT(EM_DIAGRAM):   proc print data= work.modelstats(drop=STAT target targetLabel) noobs 
label;
48030      label Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_statistics_vlabel, NOQUOTE))"
48030    ! NumRole= "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Label = "통계량" NumRole= "데이터 역할";
48031      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_fittable_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "적합통계량 테이블";
48032      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_target_title,   NOQUOTE, BAD))";
MPRINT(EM_DIAGRAM):   title10 "타겟: BAD";
MPRINT(EM_DIAGRAM):   by NumRole;
MPRINT(EM_DIAGRAM):   format NumRole RoleFmt.;
MPRINT(EM_DIAGRAM):   run;
48033      by NumRole;
48034      format NumRole RoleFmt.;
48035      run;

NOTE: 42개의 관측값을 데이터셋 WORK.MODELSTATS.에서 읽었습니다.
NOTE: 출력 결과 (프로시저: PRINT, 페이지: 16)
NOTE: 프로시저 PRINT 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

48036      title9;
MPRINT(EM_DIAGRAM):   title9;
48037      title10;
MPRINT(EM_DIAGRAM):   title10;
48038      data EMWS6.MdlComp3_COMPAREFIT;
MPRINT(EM_DIAGRAM):   data EMWS6.MdlComp3_COMPAREFIT;
48039      length DataRole Target $32 targetlabel $200;
MPRINT(EM_DIAGRAM):   length DataRole Target $32 targetlabel $200;
48040      label DataRole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,  NOQUOTE))"
48040    ! STAT = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_vlabel,   NOQUOTE))" LABEL =
48040    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_statlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DataRole = "데이터 역할" STAT = "적합통계량" LABEL = "통계량 
레이블";
48041      set work.modelstats;
MPRINT(EM_DIAGRAM):   set work.modelstats;
48042      DataRole = strip(put(NumRole, Rolefmt.));
MPRINT(EM_DIAGRAM):   DataRole = strip(put(NumRole, Rolefmt.));
48043      drop NumRole;
MPRINT(EM_DIAGRAM):   drop NumRole;
48044      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 42개의 관측값을 데이터셋 WORK.MODELSTATS.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.MDLCOMP3_COMPAREFIT은(는) 42개의 관측값과 6개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.04 초
      cpu 시간            0.03 초
      

48045      %macro ReportFit;
48046      proc transpose data= EMWS6.MdlComp3_EMOUTFIT(obs=1) out=tempFit;
48047      run;
48048      data _null_;
48049      set tempfit end=eof;
48050      retain statCount 0;
48051      if substr(_NAME_,1,2) ^in('_V', '_T', 'TK', 'VK') then do;
48052      statCount + 1;
48053      call symput('statName'!!strip(put(statCount,best.)), _NAME_);
48054      call symput('statLabel'!!strip(put(statCount,best.)), scan(_LABEL_,2, ':'));
48055      end;
48056      if eof then do;
48057      call symput('statCount', strip(put(statCount,best.)));
48058      end;
48059      run;
48060      data EMWS6.MdlComp3_EMREPORTFIT;
48061      set EMWS6.MdlComp3_EMOUTFIT;
48062      length FitStat $41 Label $40;
48063      label FitStat = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_vlabel,   NOQUOTE))"
48063    ! LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_statlabel_vlabel, NOQUOTE))";
48064      %do i=1 %to &statCount;
48065      FitStat="&&StatName&i";
48066      Label="&&StatLabel&i";
48067      Train =&&StatName&i;
48068      %if &&StatName&i= KS %then %do;
48069      Validate = VKS;
48070      Test = TKS;
48071      %end;
48072      %else %if &&StatName&i= BINNED_KS_PROB_CUTOFF %then %do;
48073      Validate = _VBINNED_KS_PROB_CUTOFF_;
48074      Test = _TBINNED_KS_PROB_CUTOFF_;
48075      %end;
48076      %else %do;
48077      %let VstatName= _V%substr(&&StatName&i,2);
48078      %let TstatName= _T%substr(&&StatName&i,2);
48079      Validate=&VStatName;
48080      Test=&TStatName;
48081      %end;
48082      output;
48083      %end;
48084      keep Parent Model Target TargetLabel FitStat Label Train Validate Test;
48085      run;
48086      %mend;
48087      %reportFit;
MPRINT(EM_DIAGRAM):   
MPRINT(REPORTFIT):   proc transpose data= EMWS6.MdlComp3_EMOUTFIT(obs=1) out=tempFit;
MPRINT(REPORTFIT):   run;

NOTE: 1개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT.에서 읽었습니다.
NOTE: 데이터셋 WORK.TEMPFIT은(는) 42개의 관측값과 3개의 변수를 가지고 있습니다.
NOTE: 프로시저 TRANSPOSE 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(REPORTFIT):   data _null_;
MPRINT(REPORTFIT):   set tempfit end=eof;
MPRINT(REPORTFIT):   retain statCount 0;
MPRINT(REPORTFIT):   if substr(_NAME_,1,2) ^in('_V', '_T', 'TK', 'VK') then do;
MPRINT(REPORTFIT):   statCount + 1;
MPRINT(REPORTFIT):   call symput('statName'!!strip(put(statCount,best.)), _NAME_);
MPRINT(REPORTFIT):   call symput('statLabel'!!strip(put(statCount,best.)), scan(_LABEL_,2, 
':'));
MPRINT(REPORTFIT):   end;
MPRINT(REPORTFIT):   if eof then do;
MPRINT(REPORTFIT):   call symput('statCount', strip(put(statCount,best.)));
MPRINT(REPORTFIT):   end;
MPRINT(REPORTFIT):   run;

NOTE: 42개의 관측값을 데이터셋 WORK.TEMPFIT.에서 읽었습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.00 초
      cpu 시간            0.01 초
      

MPRINT(REPORTFIT):   data EMWS6.MdlComp3_EMREPORTFIT;
MPRINT(REPORTFIT):   set EMWS6.MdlComp3_EMOUTFIT;
MPRINT(REPORTFIT):   length FitStat $41 Label $40;
MPRINT(REPORTFIT):   label FitStat = "적합통계량" LABEL = "통계량 레이블";
MPRINT(REPORTFIT):   FitStat="_CRITERION_             ";
MPRINT(REPORTFIT):   Label=" Valid";
MPRINT(REPORTFIT):   Train =_CRITERION_ ;
MPRINT(REPORTFIT):   Validate=_VCRITERION_;
MPRINT(REPORTFIT):   Test=_TCRITERION_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_NOBS_                  ";
MPRINT(REPORTFIT):   Label=" Sum of Frequencies                             ";
MPRINT(REPORTFIT):   Train =_NOBS_ ;
MPRINT(REPORTFIT):   Validate=_VNOBS_;
MPRINT(REPORTFIT):   Test=_TNOBS_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_MISC_                  ";
MPRINT(REPORTFIT):   Label=" Misclassification Rate                         ";
MPRINT(REPORTFIT):   Train =_MISC_ ;
MPRINT(REPORTFIT):   Validate=_VMISC_;
MPRINT(REPORTFIT):   Test=_TMISC_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_MAX_                   ";
MPRINT(REPORTFIT):   Label=" Maximum Absolute Error                         ";
MPRINT(REPORTFIT):   Train =_MAX_ ;
MPRINT(REPORTFIT):   Validate=_VMAX_;
MPRINT(REPORTFIT):   Test=_TMAX_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_SSE_                   ";
MPRINT(REPORTFIT):   Label=" Sum of Squared Errors                          ";
MPRINT(REPORTFIT):   Train =_SSE_ ;
MPRINT(REPORTFIT):   Validate=_VSSE_;
MPRINT(REPORTFIT):   Test=_TSSE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_ASE_                   ";
MPRINT(REPORTFIT):   Label=" Average Squared Error                          ";
MPRINT(REPORTFIT):   Train =_ASE_ ;
MPRINT(REPORTFIT):   Validate=_VASE_;
MPRINT(REPORTFIT):   Test=_TASE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_RASE_                  ";
MPRINT(REPORTFIT):   Label=" Root Average Squared Error                     ";
MPRINT(REPORTFIT):   Train =_RASE_ ;
MPRINT(REPORTFIT):   Validate=_VRASE_;
MPRINT(REPORTFIT):   Test=_TRASE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_DIV_                   ";
MPRINT(REPORTFIT):   Label=" Divisor for ASE                                ";
MPRINT(REPORTFIT):   Train =_DIV_ ;
MPRINT(REPORTFIT):   Validate=_VDIV_;
MPRINT(REPORTFIT):   Test=_TDIV_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_DFT_                   ";
MPRINT(REPORTFIT):   Label=" Total Degrees of Freedom                       ";
MPRINT(REPORTFIT):   Train =_DFT_ ;
MPRINT(REPORTFIT):   Validate=_VDFT_;
MPRINT(REPORTFIT):   Test=_TDFT_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_AUR_                   ";
MPRINT(REPORTFIT):   Label=" Roc 인덱스                                      ";
MPRINT(REPORTFIT):   Train =_AUR_ ;
MPRINT(REPORTFIT):   Validate=_VAUR_;
MPRINT(REPORTFIT):   Test=_TAUR_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_GINI_                  ";
MPRINT(REPORTFIT):   Label=" Gini 계수                                       ";
MPRINT(REPORTFIT):   Train =_GINI_ ;
MPRINT(REPORTFIT):   Validate=_VGINI_;
MPRINT(REPORTFIT):   Test=_TGINI_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="KS                      ";
MPRINT(REPORTFIT):   Label=" Kolmogorov-Smirnov 통계량                       ";
MPRINT(REPORTFIT):   Train =KS ;
MPRINT(REPORTFIT):   Validate = VKS;
MPRINT(REPORTFIT):   Test = TKS;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_KS_PROB_CUTOFF         ";
MPRINT(REPORTFIT):   Label=" Kolmogorov-Smirnov 확률 임계값                  ";
MPRINT(REPORTFIT):   Train =_KS_PROB_CUTOFF ;
MPRINT(REPORTFIT):   Validate=_VKS_PROB_CUTOFF;
MPRINT(REPORTFIT):   Test=_TKS_PROB_CUTOFF;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_KS_BIN_                ";
MPRINT(REPORTFIT):   Label=" Bin-Based Two-Way Kolmogorov-Smirnov 통계량     ";
MPRINT(REPORTFIT):   Train =_KS_BIN_ ;
MPRINT(REPORTFIT):   Validate=_VKS_BIN_;
MPRINT(REPORTFIT):   Test=_TKS_BIN_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="BINNED_KS_PROB_CUTOFF   ";
MPRINT(REPORTFIT):   Label=" Bin-Based Two-Way Kolmogorov-Smirnov 확률 임계값";
MPRINT(REPORTFIT):   Train =BINNED_KS_PROB_CUTOFF ;
MPRINT(REPORTFIT):   Validate = _VBINNED_KS_PROB_CUTOFF_;
MPRINT(REPORTFIT):   Test = _TBINNED_KS_PROB_CUTOFF_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_GAIN_                  ";
MPRINT(REPORTFIT):   Label=" 이득                                            ";
MPRINT(REPORTFIT):   Train =_GAIN_ ;
MPRINT(REPORTFIT):   Validate=_VGAIN_;
MPRINT(REPORTFIT):   Test=_TGAIN_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_LIFT_                  ";
MPRINT(REPORTFIT):   Label=" 향상도                                          ";
MPRINT(REPORTFIT):   Train =_LIFT_ ;
MPRINT(REPORTFIT):   Validate=_VLIFT_;
MPRINT(REPORTFIT):   Test=_TLIFT_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_LIFTC_                 ";
MPRINT(REPORTFIT):   Label=" 누적 향상도                                     ";
MPRINT(REPORTFIT):   Train =_LIFTC_ ;
MPRINT(REPORTFIT):   Validate=_VLIFTC_;
MPRINT(REPORTFIT):   Test=_TLIFTC_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_RESP_                  ";
MPRINT(REPORTFIT):   Label=" 반응률                                          ";
MPRINT(REPORTFIT):   Train =_RESP_ ;
MPRINT(REPORTFIT):   Validate=_VRESP_;
MPRINT(REPORTFIT):   Test=_TRESP_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_RESPC_                 ";
MPRINT(REPORTFIT):   Label=" 누적반응률                                      ";
MPRINT(REPORTFIT):   Train =_RESPC_ ;
MPRINT(REPORTFIT):   Validate=_VRESPC_;
MPRINT(REPORTFIT):   Test=_TRESPC_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_CAP_                   ";
MPRINT(REPORTFIT):   Label=" 반응검출률                                      ";
MPRINT(REPORTFIT):   Train =_CAP_ ;
MPRINT(REPORTFIT):   Validate=_VCAP_;
MPRINT(REPORTFIT):   Test=_TCAP_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_CAPC_                  ";
MPRINT(REPORTFIT):   Label=" 누적 반응검출률                                 ";
MPRINT(REPORTFIT):   Train =_CAPC_ ;
MPRINT(REPORTFIT):   Validate=_VCAPC_;
MPRINT(REPORTFIT):   Test=_TCAPC_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   keep Parent Model Target TargetLabel FitStat Label Train Validate Test;
MPRINT(REPORTFIT):   run;

NOTE: 변수 _VCRITERION_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TCRITERION_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TNOBS_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TMISC_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TMAX_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TSSE_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TASE_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TRASE_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TDIV_이(가) 초기화되지 않았습니다.
NOTE: 변수 _VDFT_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TDFT_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TAUR_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TGINI_이(가) 초기화되지 않았습니다.
NOTE: 변수 TKS이(가) 초기화되지 않았습니다.
NOTE: 변수 _VKS_PROB_CUTOFF이(가) 초기화되지 않았습니다.
NOTE: 변수 _TKS_PROB_CUTOFF이(가) 초기화되지 않았습니다.
NOTE: 변수 _TKS_BIN_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TBINNED_KS_PROB_CUTOFF_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TGAIN_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TLIFT_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TLIFTC_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TRESP_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TRESPC_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TCAP_이(가) 초기화되지 않았습니다.
NOTE: 변수 _TCAPC_이(가) 초기화되지 않았습니다.
NOTE: 1개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMOUTFIT.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMREPORTFIT은(는) 22개의 관측값과 9개의 변수를 가지고 있습니다.
NOTE: DATA 문장 실행(총 프로세스 시간):
      실행 시간           0.03 초
      cpu 시간            0.03 초
      

MPRINT(EM_DIAGRAM):  ;

48088      proc print data=EMWS6.MdlComp3_EMEVENTREPORT(drop=PARENT) noobs label;
MPRINT(EM_DIAGRAM):    proc print data=EMWS6.MdlComp3_EMEVENTREPORT(drop=PARENT) noobs label;
48089      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "이벤트 분류 테이블";
48090      title10 "Valid: Misclassification Rate (_VMISC_)에 근거한 모델 선택";
MPRINT(EM_DIAGRAM):   title10 "Valid: Misclassification Rate (_VMISC_)에 근거한 모델 선택";
MPRINT(EM_DIAGRAM):   run;
48091      run;

NOTE: 2개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMEVENTREPORT.에서 읽었습니다.
NOTE: 출력 결과 (프로시저: PRINT, 페이지: 17)
NOTE: 프로시저 PRINT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

48092      title9;
MPRINT(EM_DIAGRAM):   title9;
48093      title10;
MPRINT(EM_DIAGRAM):   title10;
48094      proc datasets library=EMWS6 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS6 nolist;
48095      modify MdlComp3_EMRANK;
MPRINT(EM_DIAGRAM):   modify MdlComp3_EMRANK;
48096      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
48096    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" DATAROLE =
48096    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,  NOQUOTE))" TARGET =
48097         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
48097    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "선행 노드" MODEL = "모델 노드" DATAROLE = "데이터 역할" 
TARGET = "타겟 변수" TARGETLABEL = "타겟 레이블";
MPRINT(EM_DIAGRAM):   run;
48098      run;

NOTE: EMWS6.MDLCOMP3_EMRANK.DATA에 대한 MODIFY에 성공했습니다.

NOTE: 프로시저 DATASETS 실행(총 프로세스 시간):
      실행 시간           0.11 초
      cpu 시간            0.10 초
      

48099      proc sort data=EMWS6.MdlComp3_EMRANK NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS6.MdlComp3_EMRANK NOTHREADS;
48100      by descending model target;
MPRINT(EM_DIAGRAM):   by descending model target;
48101      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 40개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMRANK.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMRANK은(는) 40개의 관측값과 38개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.02 초
      cpu 시간            0.03 초
      

48102      proc datasets library=EMWS6 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS6 nolist;
48103      modify MdlComp3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify MdlComp3_EMSCOREDIST;
48104      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
48104    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" DATAROLE =
48104    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,  NOQUOTE))" TARGET =
48105         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
48105    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "선행 노드" MODEL = "모델 노드" DATAROLE = "데이터 역할" 
TARGET = "타겟 변수" TARGETLABEL = "타겟 레이블";
MPRINT(EM_DIAGRAM):   run;
48106      run;

NOTE: EMWS6.MDLCOMP3_EMSCOREDIST.DATA에 대한 MODIFY에 성공했습니다.

NOTE: 프로시저 DATASETS 실행(총 프로세스 시간):
      실행 시간           0.11 초
      cpu 시간            0.10 초
      

48107      proc sort data=EMWS6.MdlComp3_EMSCOREDIST NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS6.MdlComp3_EMSCOREDIST NOTHREADS;
48108      by descending model target;
MPRINT(EM_DIAGRAM):   by descending model target;
48109      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 16개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMSCOREDIST.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMSCOREDIST은(는) 16개의 관측값과 24개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

48110      proc sort data=EMWS6.MdlComp3_EMROC NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS6.MdlComp3_EMROC NOTHREADS;
48111      by descending model target;
MPRINT(EM_DIAGRAM):   by descending model target;
48112      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: 200개의 관측값을 데이터셋 EMWS6.MDLCOMP3_EMROC.에서 읽었습니다.
NOTE: 데이터셋 EMWS6.MDLCOMP3_EMROC은(는) 200개의 관측값과 18개의 변수를 가지고 있습니다.
NOTE: 프로시저 SORT 실행(총 프로세스 시간):
      실행 시간           0.01 초
      cpu 시간            0.01 초
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
